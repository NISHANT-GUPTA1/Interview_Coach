import { NextRequest, NextResponse } from 'next/server';

interface RealTimeAnalysisRequest {
  questionText: string;
  answerText: string;
  questionId: string;
  category: string;
  role: string;
  experience: string;
  language: string;
  isPartialAnswer?: boolean; // For real-time analysis during speaking
}

export async function POST(req: NextRequest) {
  try {
    const body: RealTimeAnalysisRequest = await req.json();
    const { 
      questionText, 
      answerText, 
      questionId, 
      category, 
      role, 
      experience, 
      language,
      isPartialAnswer = false
    } = body;

    console.log('ü§ñ Real-time multilingual analysis API called:', { 
      questionId, 
      category, 
      role, 
      experience, 
      language,
      answerLength: answerText.length,
      isPartialAnswer
    });

    // Check for API keys
    const openrouterKey = process.env.OPENROUTER_API_KEY;
    
    // Try real-time AI analysis first
    if (openrouterKey && !openrouterKey.includes('dummy')) {
      try {
        const analysis = await generateRealTimeAnalysis(body, openrouterKey);
        return NextResponse.json({
          success: true,
          analysis,
          provider: 'OpenRouter',
          isRealTime: true,
          language
        });
      } catch (error) {
        console.error('Real-time AI analysis failed:', error);
      }
    }

    // Fallback to quick local analysis
    console.log('üîÑ Using fallback real-time analysis');
    const fallbackAnalysis = generateQuickAnalysis(body);
    return NextResponse.json({
      success: true,
      analysis: fallbackAnalysis,
      provider: 'Fallback',
      isRealTime: true,
      language
    });

  } catch (error) {
    console.error('‚ùå Real-time Analysis API error:', error);
    return NextResponse.json({
      success: false,
      error: 'Real-time analysis failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

async function generateRealTimeAnalysis(
  data: RealTimeAnalysisRequest,
  apiKey: string
) {
  const { questionText, answerText, category, role, experience, language, isPartialAnswer } = data;
  
  // Create language-specific prompt
  const languageMap: Record<string, { nativeName: string; analysisPrompt: string }> = {
    'hi': {
      nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
      analysisPrompt: `‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç‡•§`
    },
    'es': {
      nativeName: 'Espa√±ol', 
      analysisPrompt: `Analice la pregunta de la entrevista en tiempo real. Responda √∫nicamente en espa√±ol.`
    },
    'fr': {
      nativeName: 'Fran√ßais',
      analysisPrompt: `Analysez la question d'entretien en temps r√©el. R√©pondez uniquement en fran√ßais.`
    },
    'en': {
      nativeName: 'English',
      analysisPrompt: `Analyze the interview question in real-time. Respond only in English.`
    }
  };
  
  const langInfo = languageMap[language] || languageMap['en'];
  
  const prompt = `${langInfo.analysisPrompt}

‡§™‡•ç‡§∞‡§∂‡•ç‡§® / Question: ${questionText}
‡§â‡§§‡•ç‡§§‡§∞ / Answer: ${answerText}
‡§∂‡•ç‡§∞‡•á‡§£‡•Ä / Category: ${category}
‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ / Role: ${role}
‡§Ö‡§®‡•Å‡§≠‡§µ / Experience: ${experience}

${language === 'hi' ? `
‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ JSON ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç (‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç):

{
  "score": 75,
  "quickFeedback": "‡§Ü‡§™‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à...",
  "strengths": ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡§ï‡•ç‡§§‡§ø 1", "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡§ï‡•ç‡§§‡§ø 2"],
  "improvements": ["‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ 1", "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ 2"],
  "nextSteps": "‡§Ö‡§ó‡§≤‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ...",
  "confidence": "‡§Ö‡§ö‡•ç‡§õ‡§æ"
}

‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§∏‡§≠‡•Ä text ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
` : language === 'es' ? `
Proporcione comentarios inmediatos en el siguiente formato JSON (solo en espa√±ol):

{
  "score": 75,
  "quickFeedback": "Su respuesta es buena...",
  "strengths": ["Fortaleza principal 1", "Fortaleza principal 2"],
  "improvements": ["Sugerencia de mejora 1", "Sugerencia de mejora 2"],
  "nextSteps": "Pr√≥xima sugerencia...",
  "confidence": "Buena"
}

Importante: Todo el texto debe estar en espa√±ol.
` : `
Provide immediate feedback in the following JSON format (English only):

{
  "score": 75,
  "quickFeedback": "Your answer is good...",
  "strengths": ["Key strength 1", "Key strength 2"],
  "improvements": ["Improvement suggestion 1", "Improvement suggestion 2"],
  "nextSteps": "Next suggestion...",
  "confidence": "Good"
}

Important: All text must be in English.
`}

Analysis type: ${isPartialAnswer ? 'Real-time partial' : 'Complete answer'}`;

  const systemPrompt = language === 'hi' 
    ? '‡§Ü‡§™ ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞‡§ï‡§∞‡•ç‡§§‡§æ ‡§π‡•à‡§Ç‡•§ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç JSON ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§'
    : language === 'es'
    ? 'Eres un entrevistador experto. Proporciona retroalimentaci√≥n constructiva en tiempo real. Responde solo en espa√±ol en formato JSON.'
    : 'You are an expert interviewer. Provide constructive real-time feedback. Respond only in English JSON format.';

  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',
      'X-Title': 'AI Interview Coach - Real-time'
    },
    body: JSON.stringify({
      model: process.env.OPENROUTER_MODEL || 'qwen/qwen-2-72b-instruct',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 800,
      temperature: 0.6,
      response_format: { type: 'json_object' }
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API error: ${response.status}`);
  }

  const result = await response.json();
  const content = result.choices[0].message.content;
  
  try {
    const analysis = JSON.parse(content);
    
    // Validate language consistency
    if (language === 'hi') {
      const hasHindiContent = JSON.stringify(analysis).includes('‡§∏') || 
                             JSON.stringify(analysis).includes('‡§™‡•ç‡§∞') ||
                             JSON.stringify(analysis).includes('‡§Ö');
      if (!hasHindiContent) {
        throw new Error('Analysis not in Hindi');
      }
    }
    
    return analysis;
  } catch (error) {
    console.error('Failed to parse real-time analysis:', error);
    throw new Error('Invalid response format');
  }
}

function generateQuickAnalysis(data: RealTimeAnalysisRequest) {
  const { answerText, questionText, category, role, language } = data;
  
  // Quick scoring algorithm
  const wordCount = answerText.split(' ').length;
  const hasExamples = /\b(example|instance|experience|project|when|time|‡§â‡§¶‡§æ‡§π‡§∞‡§£|‡§Ö‡§®‡•Å‡§≠‡§µ|‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü|ejemplo|experiencia)\b/i.test(answerText);
  const hasTechnical = /\b(code|algorithm|database|api|framework|system|‡§ï‡•ã‡§°|‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ|‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏|‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ|c√≥digo|algoritmo|base de datos)\b/i.test(answerText);
  
  let score = 50;
  if (wordCount >= 30) score += 20;
  if (hasExamples) score += 15;
  if (hasTechnical) score += 15;
  score = Math.min(score, 95);
  
  // Language-specific responses
  const responses: Record<string, any> = {
    'hi': {
      score,
      quickFeedback: wordCount >= 30 
        ? "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§â‡§§‡•ç‡§§‡§∞! ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
        : "‡§â‡§§‡•ç‡§§‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§",
      strengths: hasExamples 
        ? ["‡§Ö‡§ö‡•ç‡§õ‡•á ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§¶‡§ø‡§è", "‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∏‡§Ç‡§µ‡§æ‡§¶"]
        : ["‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∏‡§Ç‡§µ‡§æ‡§¶", "‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä"],
      improvements: wordCount < 30 
        ? ["‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§¶‡•á‡§Ç", "‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"]
        : ["‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç", "‡§Æ‡§æ‡§™‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§Ç"],
      nextSteps: "‡§Ö‡§™‡§®‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡•á ‡§è‡§ï ‡§î‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
      confidence: score >= 75 ? "‡§Ö‡§ö‡•ç‡§õ‡§æ" : score >= 60 ? "‡§Æ‡§ß‡•ç‡§Ø‡§Æ" : "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ"
    },
    'es': {
      score,
      quickFeedback: wordCount >= 30 
        ? "¬°Buena respuesta detallada! Podr√≠a agregar algunos ejemplos m√°s espec√≠ficos."
        : "Buena respuesta pero necesita m√°s elaboraci√≥n.",
      strengths: hasExamples 
        ? ["Buenos ejemplos", "Comunicaci√≥n clara"]
        : ["Comunicaci√≥n clara", "Informaci√≥n relevante"],
      improvements: wordCount < 30 
        ? ["Proporcionar m√°s detalle", "Agregar ejemplos espec√≠ficos"]
        : ["Mejorar detalles t√©cnicos", "Incluir resultados medibles"],
      nextSteps: "Trate de proporcionar otro ejemplo espec√≠fico de su experiencia.",
      confidence: score >= 75 ? "Buena" : score >= 60 ? "Moderada" : "Necesita mejora"
    },
    'en': {
      score,
      quickFeedback: wordCount >= 30 
        ? "Good detailed answer! Could add some more specific examples."
        : "Good answer but needs more elaboration.",
      strengths: hasExamples 
        ? ["Good examples provided", "Clear communication"]
        : ["Clear communication", "Relevant information"],
      improvements: wordCount < 30 
        ? ["Provide more detail", "Add specific examples"]
        : ["Enhance technical details", "Include measurable results"],
      nextSteps: "Try to provide another specific example from your experience.",
      confidence: score >= 75 ? "Good" : score >= 60 ? "Moderate" : "Needs improvement"
    }
  };
  
  return responses[language] || responses['en'];
}
