import { NextRequest, NextResponse } from 'next/server';

// Real-time Multilingual Interview API - NO FALLBACKS
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { 
      operation, // 'questions' | 'analysis' | 'feedback' | 'followup'
      role = 'Software Engineer',
      experience = '2-3 years',
      language = 'en',
      count = 5,
      interviewData = null
    } = body;

    console.log('ЁЯМР Real-time Multilingual Interview API called:', { 
      operation, 
      role, 
      experience, 
      language, 
      count 
    });

    // MANDATORY: OpenRouter API key required for ALL operations
    const openrouterKey = process.env.OPENROUTER_API_KEY;
    
    if (!openrouterKey || openrouterKey.includes('dummy')) {
      console.error('тЭМ NO VALID OPENROUTER API KEY - Cannot perform real-time operations');
      return NextResponse.json({
        success: false,
        error: 'OpenRouter API key required for real-time operations',
        message: "CRITICAL: Configure OpenRouter API key for AI-powered multilingual interviews. No fallback content will be provided.",
        data: null,
        real: false
      }, { status: 400 });
    }

    let result;

    try {
      switch (operation) {
        case 'questions':
          console.log('ЁЯЪА Generating REAL-TIME questions...');
          result = await generateRealTimeQuestions(role, experience, language, count, openrouterKey);
          break;
          
        case 'analysis':
          console.log('ЁЯЪА Generating REAL-TIME analysis...');
          result = await generateRealTimeAnalysis(interviewData, language, openrouterKey);
          break;
          
        case 'feedback':
          console.log('ЁЯЪА Generating REAL-TIME feedback...');
          result = await generateRealTimeFeedback(interviewData, language, openrouterKey);
          break;
          
        case 'followup':
          console.log('ЁЯЪА Generating REAL-TIME followup questions...');
          result = await generateRealTimeFollowup(interviewData, language, openrouterKey);
          break;
          
        default:
          throw new Error(`Unsupported operation: ${operation}`);
      }

      console.log('тЬЕ Real-time', operation, 'completed successfully for', language);
      
      return NextResponse.json({
        success: true,
        operation,
        data: result,
        real: true,
        provider: 'OpenRouter',
        language: language,
        generated: 'real-time',
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      console.error('тЭМ Real-time', operation, 'failed:', error);
      
      // NO FALLBACK - Return error for real-time requirement
      return NextResponse.json({
        success: false,
        operation,
        error: `Real-time ${operation} generation failed`,
        message: 'OpenRouter API failed. Please check API key and try again.',
        details: error instanceof Error ? error.message : 'Unknown error',
        data: null,
        real: false
      }, { status: 500 });
    }

  } catch (error) {
    console.error('тЭМ Real-time Multilingual API error:', error);
    return NextResponse.json({
      success: false,
      error: 'API operation failed',
      details: error instanceof Error ? error.message : 'Unknown error',
      real: false
    }, { status: 500 });
  }
}

async function generateRealTimeQuestions(
  role: string,
  experience: string,
  language: string,
  count: number,
  apiKey: string
): Promise<any[]> {
  
  // Language-specific prompts for pure language content
  const languagePrompts = {
    'hi': `${count} рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдкреНрд░рд╢реНрди рд╣рд┐рдВрджреА рдореЗрдВ ${role} рдкрдж рдХреЗ рд▓рд┐рдП (${experience} рдЕрдиреБрднрд╡) рдмрдирд╛рдПрдВред рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рддрдХрдиреАрдХреА, рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдкреНрд░рд╢реНрди рд╣реЛрдВред`,
    'ta': `${count} родрпКро┤ро┐ро▓рпНроорпБро▒рпИ роирпЗро░рпНроХро╛рогро▓рпН роХрпЗро│рпНро╡ро┐роХро│рпИ родрооро┐ро┤ро┐ро▓рпН ${role} рокродро╡ро┐роХрпНроХро╛роХ (${experience} роЕройрпБрокро╡роорпН) роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН. родрооро┐ро┤рпН роорпКро┤ро┐ропро┐ро▓рпН роороЯрпНроЯрпБроорпН родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роХрпЗро│рпНро╡ро┐роХро│рпНред`,
    'te': `${count} р░╡р▒Гр░др▒Нр░др░┐р░кр░░р░ор▒Ир░и р░Зр░Вр░Яр░░р▒Нр░╡р▒Нр░пр▒В р░кр▒Нр░░р░╢р▒Нр░ир░▓р░ир▒Б р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л ${role} р░╕р▒Нр░ер░╛р░ир░В р░Хр▒Лр░╕р░В (${experience} р░Ер░ир▒Бр░нр░╡р░В) р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░Вр░бр░┐ред р░др▒Жр░▓р▒Бр░Чр▒Б р░нр░╛р░╖р░▓р▒Л р░ор░╛р░др▒Нр░░р░ор▒З р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Х р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Бред`,
    'kn': `${count} р▓╡р│Гр▓др│Нр▓др▓┐р▓кр▓░ р▓╕р▓Вр▓жр▓░р│Нр▓╢р▓и р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ ${role} р▓╣р│Бр▓жр│Нр▓жр│Жр▓Чр▓╛р▓Чр▓┐ (${experience} р▓Ер▓ир│Бр▓нр▓╡) р▓░р▓Ър▓┐р▓╕р▓┐ред р▓Хр▓ир│Нр▓ир▓б р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓ор▓╛р▓др│Нр▓░ р▓др▓╛р▓Вр▓др│Нр▓░р▓┐р▓Х р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р│Бред`,
    'ml': `${count} р┤кр╡Нр┤░р╡Кр┤лр┤╖р┤гр╡╜ р┤Ер┤нр┤┐р┤ор╡Бр┤Ц р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ ${role} р┤╕р╡Нр┤ер┤╛р┤ир┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ (${experience} р┤кр┤░р┤┐р┤Ър┤пр┤В) р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤Хред р┤ор┤▓р┤пр┤╛р┤│р┤В р┤нр┤╛р┤╖р┤пр┤┐р╡╜ р┤ор┤╛р┤др╡Нр┤░р┤В р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Х р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ред`,
    'mr': `${count} рд╡реНрдпрд╛рд╡рд╕рд╛рдпрд┐рдХ рдореБрд▓рд╛рдЦрдд рдкреНрд░рд╢реНрди рдорд░рд╛рдареАрдд ${role} рдкрджрд╛рд╕рд╛рдареА (${experience} рдЕрдиреБрднрд╡) рддрдпрд╛рд░ рдХрд░рд╛ред рдорд░рд╛рдареА рднрд╛рд╖реЗрдд рдлрдХреНрдд рддрд╛рдВрддреНрд░рд┐рдХ рдкреНрд░рд╢реНрдиред`,
    'gu': `${count} рк╡рлНркпрк╛рк╡рк╕рк╛ркпрк┐ркХ ркЗркирлНркЯрк░рк╡рлНркпрлБ рккрлНрк░рк╢рлНркирлЛ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ${role} рккркж ркорк╛ркЯрлЗ (${experience} ркЕркирлБркнрк╡) ркмркирк╛рк╡рлЛред ркЧрлБркЬрк░рк╛ркдрлА ркнрк╛рк╖рк╛ркорк╛ркВ ркЬ ркдркХркирлАркХрлА рккрлНрк░рк╢рлНркирлЛред`,
    'pa': `${count} рикрйЗри╕ри╝рйЗри╡ри░ риЗрй░риЯри░ри╡ри┐риК ри╕ри╡ри╛ри▓ рикрй░риЬри╛римрйА ри╡ри┐рй▒риЪ ${role} рикриж ри▓риИ (${experience} ридриЬри░римри╛) римригри╛риУред рикрй░риЬри╛римрйА ринри╛ри╕ри╝ри╛ ри╡ри┐рй▒риЪ ри╣рйА ридриХриирйАриХрйА ри╕ри╡ри╛ри▓ред`,
    'bn': `${count}ржЯрж┐ ржкрзЗрж╢рж╛ржжрж╛рж░ ржЗржирзНржЯрж╛рж░ржнрж┐ржЙ ржкрзНрж░рж╢рзНржи ржмрж╛ржВрж▓рж╛ржпрж╝ ${role} ржкржжрзЗрж░ ржЬржирзНржп (${experience} ржЕржнрж┐ржЬрзНржЮрждрж╛) рждрзИрж░рж┐ ржХрж░рзБржиред ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ рж╢рзБржзрзБржорж╛рждрзНрж░ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд ржкрзНрж░рж╢рзНржиред`,
    'ur': `${count} ┘╛█М╪┤█Б ┘И╪▒╪з┘Ж█Б ╪з┘Ж┘╣╪▒┘И█М┘И ╪│┘И╪з┘Д╪з╪к ╪з╪▒╪п┘И ┘Е█М┌║ ${role} ╪╣█Б╪п█Т ┌й█Т ┘Д█М█Т (${experience} ╪к╪м╪▒╪и█Б) ╪и┘Ж╪з╪ж█М┌║█Ф ╪╡╪▒┘Б ╪з╪▒╪п┘И ╪▓╪и╪з┘Ж ┘Е█М┌║ ╪к┌й┘Ж█М┌й█М ╪│┘И╪з┘Д╪з╪к█Ф`,
    'default': `Generate ${count} professional technical interview questions for a ${role} position with ${experience} experience. Return only questions in pure ${language} language.`
  };

  const prompt = languagePrompts[language as keyof typeof languagePrompts] || languagePrompts.default;

  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://ai-interview-coach.vercel.app',
      'X-Title': 'AI Interview Coach - Real-time Multilingual'
    },
    body: JSON.stringify({
      model: 'microsoft/wizardlm-2-8x22b',
      messages: [
        {
          role: 'system',
          content: `You are an expert multilingual interview question generator. Generate questions ONLY in the requested language. Never mix languages or use English unless specifically for English language requests.`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.8,
      max_tokens: 1500,
      top_p: 0.9
    })
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API failed: ${response.status}`);
  }

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  const questions = content
    .split('\n')
    .filter((line: string) => line.trim())
    .map((line: string, index: number) => ({
      id: index + 1,
      text: line.replace(/^\d+\.\s*/, '').trim(),
      language: language,
      generated: 'real-time',
      timestamp: new Date().toISOString()
    }))
    .filter((q: any) => q.text.length > 10)
    .slice(0, count);

  return questions;
}

async function generateRealTimeAnalysis(
  interviewData: any,
  language: string,
  apiKey: string
): Promise<any> {
  
  const languagePrompts = {
    'hi': 'рдЗрд╕ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдХрд╛ рд╣рд┐рдВрджреА рдореЗрдВ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВред рдЙрдореНрдореАрджрд╡рд╛рд░ рдХреЗ рдкреНрд░рджрд░реНрд╢рди, рдордЬрдмреВрдд рдмрд┐рдВрджреБрдУрдВ рдФрд░ рд╕реБрдзрд╛рд░ рдХреЗ рдХреНрд╖реЗрддреНрд░реЛрдВ рдХрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░реЗрдВред',
    'ta': 'роЗроирпНрод роирпЗро░рпНроХро╛рогро▓ро┐ройрпН родрооро┐ро┤ро┐ро▓рпН ро╡ро┐ро░ро┐ро╡ро╛рой рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН. ро╡рпЗроЯрпНрокро╛ро│ро░ро┐ройрпН роЪрпЖропро▓рпНродро┐ро▒ройрпН, ро╡ро▓ро┐роорпИропро╛рой рокрпБро│рпНро│ро┐роХро│рпН рооро▒рпНро▒рпБроорпН роорпЗроорпНрокро╛роЯрпНроЯрпБрокрпН рокроХрпБродро┐роХро│рпИ роородро┐рокрпНрокро┐роЯрпБроЩрпНроХро│рпНред',
    'te': 'р░И р░Зр░Вр░Яр░░р▒Нр░╡р▒Нр░пр▒В р░пр▒Кр░Хр▒Нр░Х р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Х р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░Ър▒Зр░пр░Вр░бр░┐ред р░Ер░нр▒Нр░пр░░р▒Нр░ер░┐ р░кр░ир░┐р░др▒Ар░░р▒Б, р░мр░▓р░ор▒Ир░и р░Ер░Вр░╢р░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░░р░Вр░Чр░╛р░▓р░ир▒Б р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░Вр░бр░┐ред',
    'kn': 'р▓И р▓╕р▓Вр▓жр▓░р│Нр▓╢р▓ир▓ж р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓╡р▓┐р▓╡р▓░р▓╡р▓╛р▓ж р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж р▓ор▓╛р▓бр▓┐ред р▓Ер▓нр│Нр▓пр▓░р│Нр▓ер▓┐р▓п р▓Хр▓╛р▓░р│Нр▓пр▓Хр│Нр▓╖р▓ор▓др│Ж, р▓мр▓▓р▓╡р▓╛р▓ж р▓Ер▓Вр▓╢р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р│Бр▓зр▓╛р▓░р▓гр│Жр▓п р▓Хр│Нр▓╖р│Зр▓др│Нр▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ор│Мр▓▓р│Нр▓пр▓ор▓╛р▓кр▓и р▓ор▓╛р▓бр▓┐ред',
    'ml': 'р┤И р┤Ер┤нр┤┐р┤ор╡Бр┤Цр┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤╡р┤┐р┤╢р┤жр┤ор┤╛р┤п р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤ир┤Яр┤др╡Нр┤др╡Бр┤Х. р┤Йр┤жр╡Нр┤жр╡Зр┤╢р┤┐р┤Ър╡Нр┤Ъ р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤пр╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤Хр┤Яр┤ир┤В, р┤╢р┤Хр╡Нр┤др┤ор┤╛р┤п р┤кр╡Лр┤пр┤┐р┤ир╡Нр┤▒р╡Бр┤Хр╡╛, р┤ор╡Жр┤Ър╡Нр┤Ър┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др┤╛р┤╡р╡Бр┤ир╡Нр┤и р┤ор╡Зр┤Цр┤▓р┤Хр╡╛ р┤Ор┤ир╡Нр┤ир┤┐р┤╡ р┤╡р┤┐р┤▓р┤пр┤┐р┤░р╡Бр┤др╡Нр┤др╡Бр┤Хред',
    'default': `Provide detailed interview analysis in ${language}. Evaluate candidate performance, strengths, and improvement areas.`
  };

  const prompt = languagePrompts[language as keyof typeof languagePrompts] || languagePrompts.default;

  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://ai-interview-coach.vercel.app',
      'X-Title': 'AI Interview Coach - Real-time Analysis'
    },
    body: JSON.stringify({
      model: 'microsoft/wizardlm-2-8x22b',
      messages: [
        {
          role: 'system',
          content: `You are an expert interview analyst. Provide analysis ONLY in ${language} language. Never mix languages.`
        },
        {
          role: 'user',
          content: `${prompt}\n\nInterview Data: ${JSON.stringify(interviewData)}`
        }
      ],
      temperature: 0.7,
      max_tokens: 2000
    })
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API failed: ${response.status}`);
  }

  const data = await response.json();
  
  return {
    analysis: data.choices[0].message.content,
    language: language,
    generated: 'real-time',
    timestamp: new Date().toISOString()
  };
}

async function generateRealTimeFeedback(
  interviewData: any,
  language: string,
  apiKey: string
): Promise<any> {
  
  const languagePrompts = {
    'hi': 'рдЗрд╕ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдХреЗ рд▓рд┐рдП рд╣рд┐рдВрджреА рдореЗрдВ рд░рдЪрдирд╛рддреНрдордХ рдлреАрдбрдмреИрдХ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕реБрдЭрд╛рд╡ рдФрд░ рд╕реБрдзрд╛рд░ рдХреА рд░рдгрдиреАрддрд┐ рджреЗрдВред',
    'ta': 'роЗроирпНрод роирпЗро░рпНроХро╛рогро▓рпБроХрпНроХрпБ родрооро┐ро┤ро┐ро▓рпН роЖроХрпНроХрокрпВро░рпНро╡рооро╛рой роХро░рпБродрпНродрпБ ро╡ро┤роЩрпНроХрпБроЩрпНроХро│рпН. роироЯрпИроорпБро▒рпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпН рооро▒рпНро▒рпБроорпН роорпЗроорпНрокро╛роЯрпНроЯрпБ роЙродрпНродро┐роХро│рпИ роХрпКроЯрпБроЩрпНроХро│рпНред',
    'te': 'р░И р░Зр░Вр░Яр░░р▒Нр░╡р▒Нр░пр▒Вр░Хр▒Б р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░ир░┐р░░р▒Нр░ор░╛р░гр░╛р░др▒Нр░ор░Х р░Ер░нр░┐р░кр▒Нр░░р░╛р░пр░В р░Ер░Вр░жр░┐р░Вр░Ър░Вр░бр░┐. р░Жр░Ър░░р░гр░╛р░др▒Нр░ор░Х р░╕р▒Вр░Ър░ир░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░╡р▒Нр░пр▒Вр░╣р░╛р░▓р░ир▒Б р░Зр░╡р▒Нр░╡р░Вр░бр░┐ред',
    'kn': 'р▓И р▓╕р▓Вр▓жр▓░р│Нр▓╢р▓ир▓Хр│Нр▓Хр│Ж р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓░р▓Ър▓ир▓╛р▓др│Нр▓ор▓Х р▓кр│Нр▓░р▓др▓┐р▓Хр│Нр▓░р▓┐р▓пр│Ж р▓ир│Ар▓бр▓┐. р▓кр│Нр▓░р▓╛р▓пр│Лр▓Чр▓┐р▓Х р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р│Бр▓зр▓╛р▓░р▓гр│Жр▓п р▓др▓Вр▓др│Нр▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Ар▓бр▓┐ред',
    'ml': 'р┤И р┤Ер┤нр┤┐р┤ор╡Бр┤Цр┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤Хр╡Нр┤░р┤┐р┤пр┤╛р┤др╡Нр┤ор┤Х р┤лр╡Ар┤бр╡Нр┤мр┤╛р┤Хр╡Нр┤Хр╡Н р┤ир╡╜р┤Хр╡Бр┤Х. р┤кр╡Нр┤░р┤╛р┤пр╡Лр┤Чр┤┐р┤Х р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤ор╡Жр┤Ър╡Нр┤Ър┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др╡╜ р┤др┤ир╡Нр┤др╡Нр┤░р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤ир╡╜р┤Хр╡Бр┤Хред',
    'default': `Provide constructive feedback in ${language}. Give practical suggestions and improvement strategies.`
  };

  const prompt = languagePrompts[language as keyof typeof languagePrompts] || languagePrompts.default;

  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'microsoft/wizardlm-2-8x22b',
      messages: [
        {
          role: 'system',
          content: `You are an expert interview coach. Provide feedback ONLY in ${language} language.`
        },
        {
          role: 'user',
          content: `${prompt}\n\nInterview Data: ${JSON.stringify(interviewData)}`
        }
      ],
      temperature: 0.7,
      max_tokens: 1500
    })
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API failed: ${response.status}`);
  }

  const data = await response.json();
  
  return {
    feedback: data.choices[0].message.content,
    language: language,
    generated: 'real-time',
    timestamp: new Date().toISOString()
  };
}

async function generateRealTimeFollowup(
  interviewData: any,
  language: string,
  apiKey: string
): Promise<any> {
  
  const languagePrompts = {
    'hi': 'рдЗрд╕ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╣рд┐рдВрджреА рдореЗрдВ рдЕрдиреБрд╡рд░реНрддреА рдкреНрд░рд╢реНрди рддреИрдпрд╛рд░ рдХрд░реЗрдВред рдЙрдореНрдореАрджрд╡рд╛рд░ рдХреЗ рдЙрддреНрддрд░реЛрдВ рдХреЛ рдЧрд╣рд░рд╛ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрди рдмрдирд╛рдПрдВред',
    'ta': 'роЗроирпНрод роирпЗро░рпНроХро╛рогро▓ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН родрооро┐ро┤ро┐ро▓рпН рокро┐ройрпНродрпКроЯро░рпНро╡рпБроХрпН роХрпЗро│рпНро╡ро┐роХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроЩрпНроХро│рпН. ро╡рпЗроЯрпНрокро╛ро│ро░ро┐ройрпН рокродро┐ро▓рпНроХро│рпИ роЖро┤рооро╛роХрпНроХрпБроорпН роХрпЗро│рпНро╡ро┐роХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроЩрпНроХро│рпНред',
    'te': 'р░И р░Зр░Вр░Яр░░р▒Нр░╡р▒Нр░пр▒В р░Жр░зр░╛р░░р░Вр░Чр░╛ р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░лр░╛р░▓р▒Л-р░Ер░кр▒Н р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░Вр░бр░┐. р░Ер░нр▒Нр░пр░░р▒Нр░ер░┐ р░╕р░ор░╛р░зр░╛р░ир░╛р░▓р░ир▒Б р░▓р▒Лр░др▒Бр░Чр░╛ р░Ър▒Зр░╕р▒З р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░╕р▒Гр░╖ р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐ред',
    'kn': 'р▓И р▓╕р▓Вр▓жр▓░р│Нр▓╢р▓ир▓ж р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ р▓Ер▓ир│Бр▓╕р▓░р▓гр▓╛ р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓░р▓Ър▓┐р▓╕р▓┐. р▓Ер▓нр│Нр▓пр▓░р│Нр▓ер▓┐р▓п р▓Йр▓др│Нр▓др▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓Жр▓│р▓╡р▓╛р▓Чр▓┐р▓╕р│Бр▓╡ р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓░р▓Ър▓┐р▓╕р▓┐ред',
    'ml': 'р┤И р┤Ер┤нр┤┐р┤ор╡Бр┤Цр┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤др╡Нр┤др┤┐р╡╜ р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤лр╡Лр┤│р╡Л-р┤Ер┤кр╡Нр┤кр╡Н р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤░р╡Вр┤кр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др╡Бр┤Х. р┤Йр┤жр╡Нр┤жр╡Зр┤╢р┤┐р┤Ър╡Нр┤Ъ р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤пр╡Бр┤Яр╡Ж р┤Йр┤др╡Нр┤др┤░р┤Щр╡Нр┤Щр╡╛ р┤Жр┤┤р┤др╡Нр┤др┤┐р┤▓р┤╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤Хред',
    'default': `Generate follow-up questions in ${language} based on this interview. Create questions that deepen candidate responses.`
  };

  const prompt = languagePrompts[language as keyof typeof languagePrompts] || languagePrompts.default;

  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'microsoft/wizardlm-2-8x22b',
      messages: [
        {
          role: 'system',
          content: `You are an expert interviewer. Generate follow-up questions ONLY in ${language} language.`
        },
        {
          role: 'user',
          content: `${prompt}\n\nInterview Data: ${JSON.stringify(interviewData)}`
        }
      ],
      temperature: 0.8,
      max_tokens: 1000
    })
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API failed: ${response.status}`);
  }

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  const questions = content
    .split('\n')
    .filter((line: string) => line.trim())
    .map((line: string, index: number) => ({
      id: index + 1,
      text: line.replace(/^\d+\.\s*/, '').trim(),
      type: 'followup',
      language: language,
      generated: 'real-time',
      timestamp: new Date().toISOString()
    }))
    .filter((q: any) => q.text.length > 10);

  return {
    followupQuestions: questions,
    language: language,
    generated: 'real-time',
    timestamp: new Date().toISOString()
  };
}
