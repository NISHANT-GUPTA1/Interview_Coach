import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { role, goal, language, count = 6 } = await request.json()

    console.log(`ЁЯза Generating real AI questions for ${role} in ${language}...`)

    // Check if we have OpenAI API key for real processing
    const apiKey = process.env.OPENAI_API_KEY

    if (!apiKey || apiKey.includes("dummy") || apiKey.includes("development") || apiKey.includes("fake")) {
      console.log("тЪая╕П No real OpenAI API key found, using fallback questions")
      const questions = generateFallbackQuestions(role, goal, language, count)
      return NextResponse.json({
        questions,
        real: false,
        message: "Using fallback questions. Add OpenAI API key for AI-generated questions.",
      })
    }

    // Create detailed prompt for real AI question generation
    const prompt = `You are an expert technical interviewer conducting a ${goal} interview for a ${role} position in ${language} language.

Generate ${count} professional, relevant interview questions that:

1. Are specifically tailored for a ${role} role
2. Match the interview goal: ${goal}
3. Are written in ${language} language
4. Progress from basic to advanced difficulty
5. Include a mix of:
   - Technical knowledge questions
   - Problem-solving scenarios
   - Behavioral questions
   - Experience-based questions
6. Are engaging and realistic
7. Allow for detailed responses

Requirements:
- Each question should be complete and clear
- Questions should be appropriate for the ${language} speaking region
- Avoid overly complex or trick questions
- Focus on practical, job-relevant topics
- Make questions conversational and natural

Return ONLY a JSON array of ${count} questions as strings, nothing else.

Example format: ["Question 1 in ${language}", "Question 2 in ${language}", ...]`

    console.log("ЁЯЪА Calling OpenAI GPT-4 for real question generation...")

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `You are an expert multilingual technical interviewer. Generate professional interview questions in ${language} for ${role} positions. Always respond with valid JSON array format.`,
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 1500,
        temperature: 0.8,
        response_format: { type: "json_object" },
      }),
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error("OpenAI API error:", response.status, errorData)
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const data = await response.json()
    console.log("тЬЕ Real AI questions generated successfully")

    try {
      // Parse the JSON response
      const content = data.choices[0].message.content
      const parsedContent = JSON.parse(content)

      // Extract questions array from the response
      let questions = []
      if (Array.isArray(parsedContent)) {
        questions = parsedContent
      } else if (parsedContent.questions && Array.isArray(parsedContent.questions)) {
        questions = parsedContent.questions
      } else if (parsedContent.interview_questions && Array.isArray(parsedContent.interview_questions)) {
        questions = parsedContent.interview_questions
      } else {
        throw new Error("Invalid response format from AI")
      }

      // Validate questions
      questions = questions.filter((q) => typeof q === "string" && q.trim().length > 10).slice(0, count)

      if (questions.length === 0) {
        throw new Error("No valid questions generated")
      }

      console.log(`тЬЕ Generated ${questions.length} real AI questions in ${language}`)
      return NextResponse.json({ questions, real: true })
    } catch (parseError) {
      console.error("Failed to parse AI response:", parseError)
      throw new Error("Failed to parse AI response")
    }
  } catch (error) {
    console.error("Real AI question generation failed:", error)

    // Fallback to manual questions with clear indication
    console.log("ЁЯФД Falling back to manual questions...")
    const questions = generateFallbackQuestions(
      request.body?.role || "Software Engineer",
      request.body?.goal || "interview",
      request.body?.language || "English",
      6,
    )

    return NextResponse.json({
      questions,
      real: false,
      error: "Real AI question generation failed. Using fallback questions.",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
}

function generateFallbackQuestions(role: string, goal: string, language: string, count: number): string[] {
  console.log(`тЪая╕П Using fallback questions for ${role} in ${language}`)

  const questionBank: { [key: string]: { [key: string]: string[] } } = {
    "Software Engineer": {
      English: [
        `Tell me about your experience as a ${role} and what drew you to software development.`,
        `Describe a challenging technical problem you solved recently and walk me through your approach.`,
        `How do you ensure code quality and maintainability in your projects?`,
        `What's your experience with version control systems and collaborative development?`,
        `How do you stay updated with new technologies and programming trends?`,
        `Describe a time when you had to debug a complex issue. What was your process?`,
      ],
      Hindi: [
        `${role} рдХреЗ рд░реВрдк рдореЗрдВ рдЕрдкрдиреЗ рдЕрдиреБрднрд╡ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ рдФрд░ рдХреНрдпрд╛ рдЖрдкрдХреЛ рд╕реЙрдлреНрдЯрд╡реЗрдпрд░ рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ рдХреА рдУрд░ рдЖрдХрд░реНрд╖рд┐рдд рдХрд┐рдпрд╛ред`,
        `рд╣рд╛рд▓ рд╣реА рдореЗрдВ рдЖрдкрдиреЗ рдЬреЛ рдЪреБрдиреМрддреАрдкреВрд░реНрдг рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣рд▓ рдХреА рд╣реИ, рдЙрд╕рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдФрд░ рдЕрдкрдирд╛ рджреГрд╖реНрдЯрд┐рдХреЛрдг рдмрддрд╛рдПрдВред`,
        `рдЖрдк рдЕрдкрдиреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯреНрд╕ рдореЗрдВ рдХреЛрдб рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдФрд░ рд░рдЦрд░рдЦрд╛рд╡ рдХреИрд╕реЗ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреЗ рд╣реИрдВ?`,
        `рд╡рд░реНрдЬрди рдХрдВрдЯреНрд░реЛрд▓ рд╕рд┐рд╕реНрдЯрдо рдФрд░ рд╕рд╣рдпреЛрдЧреА рд╡рд┐рдХрд╛рд╕ рдХреЗ рд╕рд╛рде рдЖрдкрдХрд╛ рдХреНрдпрд╛ рдЕрдиреБрднрд╡ рд╣реИ?`,
        `рдЖрдк рдирдИ рддрдХрдиреАрдХреЛрдВ рдФрд░ рдкреНрд░реЛрдЧреНрд░рд╛рдорд┐рдВрдЧ рдЯреНрд░реЗрдВрдбреНрд╕ рдХреЗ рд╕рд╛рде рдХреИрд╕реЗ рдЕрдкрдбреЗрдЯ рд░рд╣рддреЗ рд╣реИрдВ?`,
        `рдПрдХ рд╕рдордп рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдЬрдм рдЖрдкрдХреЛ рдПрдХ рдЬрдЯрд┐рд▓ рд╕рдорд╕реНрдпрд╛ рдХреЛ рдбрд┐рдмрдЧ рдХрд░рдирд╛ рдкрдбрд╝рд╛ред рдЖрдкрдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреНрдпрд╛ рдереА?`,
      ],
      Bengali: [
        `${role} рж╣рж┐рж╕рзЗржмрзЗ ржЖржкржирж╛рж░ ржЕржнрж┐ржЬрзНржЮрждрж╛рж░ ржХржерж╛ ржмрж▓рзБржи ржПржмржВ ржХрзА ржЖржкржирж╛ржХрзЗ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯрзЗрж░ ржжрж┐ржХрзЗ ржЖржХрж░рзНрж╖ржг ржХрж░рзЗржЫрзЗред`,
        `рж╕ржорзНржкрзНрж░рждрж┐ ржЖржкржирж┐ ржпрзЗ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬрж┐ржВ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗржЫрзЗржи рждрж╛рж░ ржмрж░рзНржгржирж╛ ржжрж┐ржи ржПржмржВ ржЖржкржирж╛рж░ ржкржжрзНржзрждрж┐ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржиред`,
        `ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкрзНрж░ржХрж▓рзНржкржЧрзБрж▓рж┐рждрзЗ ржХрзЛржбрзЗрж░ ржЧрзБржгржорж╛ржи ржПржмржВ рж░ржХрзНрж╖ржгрж╛ржмрзЗржХрзНрж╖ржг ржХрзАржнрж╛ржмрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗржи?`,
        `ржнрж╛рж░рзНрж╕ржи ржХржирзНржЯрзНрж░рзЛрж▓ рж╕рж┐рж╕рзНржЯрзЗржо ржПржмржВ рж╕рж╣ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржЙржирзНржиржпрж╝ржирзЗрж░ рж╕рж╛ржерзЗ ржЖржкржирж╛рж░ ржХрзА ржЕржнрж┐ржЬрзНржЮрждрж╛?`,
        `ржЖржкржирж┐ ржирждрзБржи ржкрзНрж░ржпрзБржХрзНрждрж┐ ржПржмржВ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржЯрзНрж░рзЗржирзНржбрзЗрж░ рж╕рж╛ржерзЗ ржХрзАржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржерж╛ржХрзЗржи?`,
        `ржПржоржи ржПржХржЯрж┐ рж╕ржоржпрж╝рзЗрж░ ржмрж░рзНржгржирж╛ ржжрж┐ржи ржпржЦржи ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ ржЬржЯрж┐рж▓ рж╕ржорж╕рзНржпрж╛ ржбрж┐ржмрж╛ржЧ ржХрж░рждрзЗ рж╣ржпрж╝рзЗржЫрж┐рж▓ред ржЖржкржирж╛рж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрзА ржЫрж┐рж▓?`,
      ],
    },
    "Frontend Developer": {
      English: [
        `What's your experience with modern JavaScript frameworks and which do you prefer?`,
        `How do you approach responsive web design and ensure cross-browser compatibility?`,
        `Describe a complex UI component you built and the challenges you faced.`,
        `How do you optimize web application performance and user experience?`,
        `What's your process for collaborating with designers and backend developers?`,
        `How do you handle state management in large frontend applications?`,
      ],
      Hindi: [
        `рдЖрдзреБрдирд┐рдХ рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдлреНрд░реЗрдорд╡рд░реНрдХ рдХреЗ рд╕рд╛рде рдЖрдкрдХрд╛ рдХреНрдпрд╛ рдЕрдиреБрднрд╡ рд╣реИ рдФрд░ рдЖрдк рдХрд┐рд╕реЗ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрддреЗ рд╣реИрдВ?`,
        `рдЖрдк рд░рд┐рд╕реНрдкреЙрдиреНрд╕рд┐рд╡ рд╡реЗрдм рдбрд┐рдЬрд╝рд╛рдЗрди рдХреИрд╕реЗ рдХрд░рддреЗ рд╣реИрдВ рдФрд░ рдХреНрд░реЙрд╕-рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕рдВрдЧрддрддрд╛ рдХреИрд╕реЗ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреЗ рд╣реИрдВ?`,
        `рдЖрдкрдиреЗ рдЬреЛ рдЬрдЯрд┐рд▓ UI рдХрдВрдкреЛрдиреЗрдВрдЯ рдмрдирд╛рдпрд╛ рд╣реИ рдЙрд╕рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдФрд░ рдЖрдкрдХреЛ рдХрд┐рди рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдирд╛ рдкрдбрд╝рд╛ред`,
        `рдЖрдк рд╡реЗрдм рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдкреНрд░рджрд░реНрд╢рди рдФрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЕрдиреБрднрд╡ рдХреЛ рдХреИрд╕реЗ рдЕрдиреБрдХреВрд▓рд┐рдд рдХрд░рддреЗ рд╣реИрдВ?`,
        `рдбрд┐рдЬрд╝рд╛рдЗрдирд░ рдФрд░ рдмреИрдХрдПрдВрдб рдбреЗрд╡рд▓рдкрд░реНрд╕ рдХреЗ рд╕рд╛рде рд╕рд╣рдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЖрдкрдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреНрдпрд╛ рд╣реИ?`,
        `рдмрдбрд╝реЗ рдлреНрд░рдВрдЯрдПрдВрдб рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдореЗрдВ рдЖрдк рд╕реНрдЯреЗрдЯ рдореИрдиреЗрдЬрдореЗрдВрдЯ рдХреИрд╕реЗ рдХрд░рддреЗ рд╣реИрдВ?`,
      ],
    },
  }

  const roleQuestions = questionBank[role] || questionBank["Software Engineer"]
  const languageQuestions = roleQuestions[language] || roleQuestions["English"]

  return languageQuestions.slice(0, Math.min(count, languageQuestions.length))
}
