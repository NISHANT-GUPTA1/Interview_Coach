import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { role, goal, language, count = 6 } = await request.json()

    console.log(`ЁЯза Generating real AI questions for ${role} in ${language}...`)

    // Check if we have OpenAI API key for real processing
    const apiKey = process.env.OPENAI_API_KEY

    if (!apiKey || apiKey.includes("dummy") || apiKey.includes("development") || apiKey.includes("fake")) {
      console.log("тЪая╕П No real OpenAI API key found, using fallback questions")
      const questions = generateFallbackQuestions(role, goal, language, count)
      return NextResponse.json({
        questions,
        real: false,
        message: "Using fallback questions. Add OpenAI API key for AI-generated questions.",
      })
    }

    // Create detailed prompt for real AI question generation
    const prompt = `You are an expert technical interviewer conducting a ${goal} interview for a ${role} position in ${language} language.

Generate ${count} professional, relevant interview questions that:

1. Are specifically tailored for a ${role} role
2. Match the interview goal: ${goal}
3. Are written in ${language} language
4. Progress from basic to advanced difficulty
5. Include a mix of:
   - Technical knowledge questions
   - Problem-solving scenarios
   - Behavioral questions
   - Experience-based questions
6. Are engaging and realistic
7. Allow for detailed responses

Requirements:
- Each question should be complete and clear
- Questions should be appropriate for the ${language} speaking region
- Avoid overly complex or trick questions
- Focus on practical, job-relevant topics
- Make questions conversational and natural

Return ONLY a JSON array of ${count} questions as strings, nothing else.

Example format: ["Question 1 in ${language}", "Question 2 in ${language}", ...]`

    console.log("ЁЯЪА Calling OpenAI GPT-4 for real question generation...")

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `You are an expert multilingual technical interviewer. Generate professional interview questions in ${language} for ${role} positions. Always respond with valid JSON array format.`,
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 1500,
        temperature: 0.8,
        response_format: { type: "json_object" },
      }),
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error("OpenAI API error:", response.status, errorData)
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const data = await response.json()
    console.log("тЬЕ Real AI questions generated successfully")

    try {
      // Parse the JSON response
      const content = data.choices[0].message.content
      const parsedContent = JSON.parse(content)

      // Extract questions array from the response
      let questions = []
      if (Array.isArray(parsedContent)) {
        questions = parsedContent
      } else if (parsedContent.questions && Array.isArray(parsedContent.questions)) {
        questions = parsedContent.questions
      } else if (parsedContent.interview_questions && Array.isArray(parsedContent.interview_questions)) {
        questions = parsedContent.interview_questions
      } else {
        throw new Error("Invalid response format from AI")
      }

      // Validate questions
      questions = questions.filter((q: any) => typeof q === "string" && q.trim().length > 10).slice(0, count)

      if (questions.length === 0) {
        throw new Error("No valid questions generated")
      }

      console.log(`тЬЕ Generated ${questions.length} real AI questions in ${language}`)
      return NextResponse.json({ questions, real: true })
    } catch (parseError) {
      console.error("Failed to parse AI response:", parseError)
      throw new Error("Failed to parse AI response")
    }
  } catch (error) {
    console.error("Real AI question generation failed:", error)

    // Fallback to manual questions with clear indication
    console.log("ЁЯФД Falling back to manual questions...")
    const { role = "Software Engineer", goal = "interview", language = "English" } = await request.json().catch(() => ({}))
    
    const questions = generateFallbackQuestions(
      role,
      goal,
      language,
      6,
    )

    return NextResponse.json({
      questions,
      real: false,
      error: "Real AI question generation failed. Using fallback questions.",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
}

function generateFallbackQuestions(role: string, goal: string, language: string, count: number): string[] {
  console.log(`тЪая╕П Using fallback questions for ${role} in ${language}`)

  const questionBank: { [key: string]: { [key: string]: string[] } } = {
    "Software Engineer": {
      English: [
        `Tell me about your experience as a ${role} and what drew you to software development.`,
        `Describe a challenging technical problem you solved recently and walk me through your approach.`,
        `How do you ensure code quality and maintainability in your projects?`,
        `What's your experience with version control systems and collaborative development?`,
        `How do you stay updated with new technologies and programming trends?`,
        `Describe a time when you had to debug a complex issue. What was your process?`,
      ],
      Hindi: [
        `${role} рдХреЗ рд░реВрдк рдореЗрдВ рдЕрдкрдиреЗ рдЕрдиреБрднрд╡ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдПрдВ рдФрд░ рдХреНрдпрд╛ рдЖрдкрдХреЛ рд╕реЙрдлреНрдЯрд╡реЗрдпрд░ рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ рдХреА рдУрд░ рдЖрдХрд░реНрд╖рд┐рдд рдХрд┐рдпрд╛ред`,
        `рд╣рд╛рд▓ рд╣реА рдореЗрдВ рдЖрдкрдиреЗ рдЬреЛ рдЪреБрдиреМрддреАрдкреВрд░реНрдг рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣рд▓ рдХреА рд╣реИ, рдЙрд╕рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдФрд░ рдЕрдкрдирд╛ рджреГрд╖реНрдЯрд┐рдХреЛрдг рдмрддрд╛рдПрдВред`,
        `рдЖрдк рдЕрдкрдиреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯреНрд╕ рдореЗрдВ рдХреЛрдб рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдФрд░ рд░рдЦрд░рдЦрд╛рд╡ рдХреИрд╕реЗ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреЗ рд╣реИрдВ?`,
        `рд╡рд░реНрдЬрди рдХрдВрдЯреНрд░реЛрд▓ рд╕рд┐рд╕реНрдЯрдо рдФрд░ рд╕рд╣рдпреЛрдЧреА рд╡рд┐рдХрд╛рд╕ рдХреЗ рд╕рд╛рде рдЖрдкрдХрд╛ рдХреНрдпрд╛ рдЕрдиреБрднрд╡ рд╣реИ?`,
        `рдЖрдк рдирдИ рддрдХрдиреАрдХреЛрдВ рдФрд░ рдкреНрд░реЛрдЧреНрд░рд╛рдорд┐рдВрдЧ рдЯреНрд░реЗрдВрдбреНрд╕ рдХреЗ рд╕рд╛рде рдХреИрд╕реЗ рдЕрдкрдбреЗрдЯ рд░рд╣рддреЗ рд╣реИрдВ?`,
        `рдПрдХ рд╕рдордп рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдЬрдм рдЖрдкрдХреЛ рдПрдХ рдЬрдЯрд┐рд▓ рд╕рдорд╕реНрдпрд╛ рдХреЛ рдбрд┐рдмрдЧ рдХрд░рдирд╛ рдкрдбрд╝рд╛ред рдЖрдкрдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреНрдпрд╛ рдереА?`,
      ],
      Tamil: [
        `${role} роЖроХ роЙроЩрпНроХро│рпН роЕройрпБрокро╡родрпНродрпИрокрпН рокро▒рпНро▒ро┐ роХрпВро▒рпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роорпЖройрпНрокрпКро░рпБро│рпН роорпЗроорпНрокро╛роЯрпНроЯро┐ро▓рпН роЙроЩрпНроХро│рпИ роОродрпБ роИро░рпНродрпНродродрпБ.`,
        `роЪроорпАрокродрпНродро┐ро▓рпН роирпАроЩрпНроХро│рпН родрпАро░рпНродрпНрод роЪро╡ро╛ро▓ро╛рой родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роЪро┐роХрпНроХро▓рпИ ро╡ро┐ро╡ро░ро┐родрпНродрпБ роЙроЩрпНроХро│рпН роЕрогрпБроХрпБроорпБро▒рпИропрпИ ро╡ро┐ро│роХрпНроХрпБроЩрпНроХро│рпН.`,
        `роЙроЩрпНроХро│рпН родро┐роЯрпНроЯроЩрпНроХро│ро┐ро▓рпН роХрпБро▒ро┐ропрпАроЯрпНроЯро┐ройрпН родро░роорпН рооро▒рпНро▒рпБроорпН рокро░ро╛рооро░ро┐рокрпНрокрпИ роОро╡рпНро╡ро╛ро▒рпБ роЙро▒рпБродро┐ роЪрпЖропрпНроХро┐ро▒рпАро░рпНроХро│рпН?`,
        `рокродро┐рокрпНрокрпБ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯрпБ роЕроорпИрокрпНрокрпБроХро│рпН рооро▒рпНро▒рпБроорпН роХрпВроЯрпНроЯрпБ ро╡ро│ро░рпНроЪрпНроЪро┐ропро┐ро▓рпН роЙроЩрпНроХро│рпН роЕройрпБрокро╡роорпН роОройрпНрой?`,
        `рокрпБродро┐роп родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роиро┐ро░ро▓ро╛роХрпНроХ рокрпЛроХрпНроХрпБроХро│рпБроЯройрпН роирпАроЩрпНроХро│рпН роОро╡рпНро╡ро╛ро▒рпБ рокрпБродрпБрокрпНрокро┐родрпНрод роиро┐ро▓рпИропро┐ро▓рпН роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН?`,
        `роЪро┐роХрпНроХро▓ро╛рой роЪро┐роХрпНроХро▓рпИ роирпАроЩрпНроХро│рпН рокро┐ро┤рпИродрпНродро┐ро░рпБродрпНрод ро╡рпЗрогрпНроЯро┐роп роирпЗро░родрпНродрпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН. роЙроЩрпНроХро│рпН роЪрпЖропро▓рпНроорпБро▒рпИ роОройрпНрой?`,
      ],
      Telugu: [
        `${role} р░Чр░╛ р░ор▒А р░Ер░ир▒Бр░нр░╡р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░╕р░╛р░лр▒Нр░Яр▒НтАМр░╡р▒Зр░░р▒Н р░бр▒Жр░╡р░▓р░кр▒НтАМр░ор▒Жр░Вр░Яр▒НтАМр░Хр▒Б р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░Пр░жр░┐ р░Жр░Хр░░р▒Нр░╖р░┐р░Вр░Ър░┐р░Вр░жр░┐.`,
        `р░Зр░Яр▒Ар░╡р░▓ р░ор▒Ар░░р▒Б р░кр░░р░┐р░╖р▒Нр░Хр░░р░┐р░Вр░Ър░┐р░и р░╕р░╡р░╛р░▓р▒Бр░др▒Л р░Хр▒Вр░бр░┐р░и р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Х р░╕р░ор░╕р▒Нр░пр░ир▒Б р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░ор▒А р░╡р░┐р░зр░╛р░ир░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐.`,
        `р░ор▒А р░кр▒Нр░░р░╛р░Ьр▒Жр░Хр▒Нр░Яр▒НтАМр░▓р░▓р▒Л р░Хр▒Лр░бр▒Н р░ир░╛р░гр▒Нр░пр░д р░ор░░р░┐р░пр▒Б р░ир░┐р░░р▒Нр░╡р░╣р░гр░ир▒Б р░Ор░▓р░╛ р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░╕р▒Нр░др░╛р░░р▒Б?`,
        `р░╡р▒Жр░░р▒Нр░╖р░ир▒Н р░Хр░Вр░Яр▒Нр░░р▒Лр░▓р▒Н р░╕р░┐р░╕р▒Нр░Яр░ор▒НтАМр░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р░╣р░Хр░╛р░░ р░Ер░нр░┐р░╡р▒Гр░жр▒Нр░зр░┐р░др▒Л р░ор▒А р░Ер░ир▒Бр░нр░╡р░В р░Пр░ор░┐р░Яр░┐?`,
        `р░Хр▒Кр░др▒Нр░д р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Х р░кр░░р░┐р░Ьр▒Нр░Юр░╛р░ир░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р▒Лр░Чр▒Нр░░р░╛р░ор░┐р░Вр░Чр▒Н р░Яр▒Нр░░р▒Жр░Вр░бр▒НтАМр░▓р░др▒Л р░ор▒Ар░░р▒Б р░Ор░▓р░╛ р░Ер░кр▒НтАМр░бр▒Зр░Яр▒НтАМр░Чр░╛ р░Йр░Вр░Яр░╛р░░р▒Б?`,
        `р░╕р░Вр░Хр▒Нр░▓р░┐р░╖р▒Нр░Яр░ор▒Ир░и р░╕р░ор░╕р▒Нр░пр░ир▒Б р░ор▒Ар░░р▒Б р░бр▒Ар░мр░Чр▒Н р░Ър▒Зр░пр░╛р░▓р▒Нр░╕р░┐р░и р░╕р░ор░пр░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐. р░ор▒А р░кр▒Нр░░р░Хр▒Нр░░р░┐р░п р░Пр░ор░┐р░Яр░┐?`,
      ],
      Kannada: [
        `${role} р▓Жр▓Чр▓┐ р▓ир▓┐р▓ор│Нр▓о р▓Ер▓ир│Бр▓нр▓╡р▓ж р▓мр▓Чр│Нр▓Чр│Ж р▓╣р│Зр▓│р▓┐ р▓ор▓др│Нр▓др│Б р▓╕р▓╛р▓лр│Нр▓Яр│НтАМр▓╡р│Зр▓░р│Н р▓Ер▓нр▓┐р▓╡р│Гр▓жр│Нр▓зр▓┐р▓Чр│Ж р▓ир▓┐р▓ор│Нр▓ор▓ир│Нр▓ир│Б р▓Пр▓ир│Б р▓Жр▓Хр▓░р│Нр▓╖р▓┐р▓╕р▓┐р▓др│Б.`,
        `р▓Зр▓др│Нр▓др│Ар▓Ър│Жр▓Чр│Ж р▓ир│Ар▓╡р│Б р▓кр▓░р▓┐р▓╣р▓░р▓┐р▓╕р▓┐р▓ж р▓╕р▓╡р▓╛р▓▓р▓┐р▓и р▓др▓╛р▓Вр▓др│Нр▓░р▓┐р▓Х р▓╕р▓ор▓╕р│Нр▓пр│Жр▓пр▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐ р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓ор│Нр▓о р▓╡р▓┐р▓зр▓╛р▓ир▓╡р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐.`,
        `р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╛р▓Ьр│Жр▓Хр│Нр▓Яр│НтАМр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓Хр│Лр▓бр│Н р▓Чр│Бр▓гр▓ор▓Яр│Нр▓Я р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Жр▓пр▓ир│Нр▓ир│Б р▓╣р│Зр▓Чр│Ж р▓Цр▓Ър▓┐р▓др▓кр▓бр▓┐р▓╕р│Бр▓др│Нр▓др│Ар▓░р▓┐?`,
        `р▓Жр▓╡р│Гр▓др│Нр▓др▓┐ р▓ир▓┐р▓пр▓Вр▓др│Нр▓░р▓г р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р▓╣р▓Хр▓╛р▓░р▓┐ р▓Ер▓нр▓┐р▓╡р│Гр▓жр│Нр▓зр▓┐р▓пр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ир▓┐р▓ор│Нр▓о р▓Ер▓ир│Бр▓нр▓╡ р▓Пр▓ир│Б?`,
        `р▓╣р│Кр▓╕ р▓др▓Вр▓др│Нр▓░р▓Ьр│Нр▓Юр▓╛р▓ир▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р│Лр▓Чр│Нр▓░р▓╛р▓ор▓┐р▓Вр▓Чр│Н р▓кр│Нр▓░р▓╡р│Гр▓др│Нр▓др▓┐р▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ир│Ар▓╡р│Б р▓╣р│Зр▓Чр│Ж р▓ир▓╡р│Ар▓Хр▓░р▓┐р▓╕р▓┐р▓Хр│Кр▓│р│Нр▓│р│Бр▓др│Нр▓др│Ар▓░р▓┐?`,
        `р▓╕р▓Вр▓Хр│Ар▓░р│Нр▓гр▓╡р▓╛р▓ж р▓╕р▓ор▓╕р│Нр▓пр│Жр▓пр▓ир│Нр▓ир│Б р▓ор│Ар▓░р│Б р▓бр▓┐р▓мр▓Чр│Н р▓ор▓╛р▓бр▓мр│Зр▓Хр▓╛р▓ж р▓╕р▓ор▓пр▓╡р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р▓┐. р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Ж р▓Пр▓ир│Б?`,
      ],
      Malayalam: [
        `${role} р┤Жр┤пр╡Бр┤│р╡Нр┤│ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤ир╡Бр┤нр┤╡р┤др╡Нр┤др╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤кр┤▒р┤пр╡Бр┤Х, р┤╕р╡Лр┤лр╡Нр┤▒р╡Нр┤▒р╡НтАМр┤╡р╡Жр┤пр╡╝ р┤бр╡Жр┤╡р┤▓р┤кр╡НтАМр┤ор╡Жр┤ир╡Нр┤▒р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н р┤Жр┤Хр╡╝р┤╖р┤┐р┤Ър╡Нр┤Ър┤др╡Н.`,
        `р┤Ер┤Яр╡Бр┤др╡Нр┤др┤┐р┤Яр╡Ж р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤кр┤░р┤┐р┤╣р┤░р┤┐р┤Ър╡Нр┤Ъ р┤╡р╡Жр┤▓р╡Нр┤▓р╡Бр┤╡р┤┐р┤│р┤┐ р┤ир┤┐р┤▒р┤Юр╡Нр┤Ю р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Х р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤╡р┤┐р┤╡р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Хр┤пр╡Бр┤В р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р┤ор╡Ар┤кр┤ир┤В р┤╡р┤┐р┤╢р┤жр╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Хр┤пр╡Бр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.`,
        `р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р╡Лр┤Ьр┤Хр╡Нр┤▒р╡Нр┤▒р╡Бр┤Хр┤│р┤┐р╡╜ р┤Хр╡Лр┤бр╡Н р┤Чр╡Бр┤гр┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤╡р╡Бр┤В р┤кр┤░р┤┐р┤кр┤╛р┤▓р┤ир┤╡р╡Бр┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б?`,
        `р┤╡р╡Зр╡╝р┤╖р╡╗ р┤Хр╡║р┤Яр╡Нр┤░р╡Лр╡╛ р┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤╕р┤╣р┤Хр┤░р┤г р┤╡р┤┐р┤Хр┤╕р┤ир┤╡р╡Бр┤ор┤╛р┤пр╡Бр┤│р╡Нр┤│ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤ир╡Бр┤нр┤╡р┤В р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?`,
        `р┤кр╡Бр┤др┤┐р┤п р┤╕р┤╛р┤Щр╡Нр┤Хр╡Зр┤др┤┐р┤Хр┤╡р┤┐р┤жр╡Нр┤пр┤Хр┤│р╡Бр┤В р┤кр╡Нр┤░р╡Лр┤Чр╡Нр┤░р┤╛р┤ор┤┐р┤Вр┤Чр╡Н р┤Яр╡Нр┤░р╡Жр╡╗р┤бр╡Бр┤Хр┤│р╡Бр┤В р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤Ер┤кр╡НтАМр┤бр╡Зр┤▒р╡Нр┤▒р╡Н р┤Жр┤пр┤┐ р┤ир┤┐р┤▓р┤Хр╡Кр┤│р╡Нр┤│р╡Бр┤ир╡Нр┤ир╡Б?`,
        `р┤╕р┤Щр╡Нр┤Хр╡Ар╡╝р┤гр╡Нр┤гр┤ор┤╛р┤п р┤Тр┤░р╡Б р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤бр┤┐р┤мр┤Чр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Зр┤гр╡Нр┤Яр┤┐ р┤╡р┤ир╡Нр┤и р┤╕р┤ор┤пр┤В р┤╡р┤┐р┤╡р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤Хр╡Нр┤░р┤┐р┤п р┤Ор┤ир╡Нр┤др┤╛р┤пр┤┐р┤░р╡Бр┤ир╡Нр┤ир╡Б?`,
      ],
      Marathi: [
        `${role} рдореНрд╣рдгреВрди рддреБрдордЪреНрдпрд╛ рдЕрдиреБрднрд╡рд╛рдмрджреНрджрд▓ рд╕рд╛рдВрдЧрд╛ рдЖрдгрд┐ рд╕реЙрдлреНрдЯрд╡реЗрдЕрд░ рдбреЗрд╡реНрд╣рд▓рдкрдореЗрдВрдЯрдХрдбреЗ рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢рд╛рдиреЗ рдЖрдХрд░реНрд╖рд┐рдд рдХреЗрд▓реЗ.`,
        `рдЕрд▓реАрдХрдбреЗ рддреБрдореНрд╣реА рд╕реЛрдбрд╡рд▓реЗрд▓реА рдЖрд╡реНрд╣рд╛рдирд╛рддреНрдордХ рддрд╛рдВрддреНрд░рд┐рдХ рд╕рдорд╕реНрдпрд╛ рд╡рд░реНрдгрди рдХрд░рд╛ рдЖрдгрд┐ рддреБрдордЪрд╛ рджреГрд╖реНрдЯрд┐рдХреЛрди рд╕реНрдкрд╖реНрдЯ рдХрд░рд╛.`,
        `рддреБрдореНрд╣реА рддреБрдордЪреНрдпрд╛ рдкреНрд░рдХрд▓реНрдкрд╛рдВрдордзреНрдпреЗ рдХреЛрдб рдЧреБрдгрд╡рддреНрддрд╛ рдЖрдгрд┐ рджреЗрдЦрднрд╛рд▓ рдХрд╢реА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛?`,
        `рдЖрд╡реГрддреНрддреА рдирд┐рдпрдВрддреНрд░рдг рдкреНрд░рдгрд╛рд▓реА рдЖрдгрд┐ рд╕рд╣рдпреЛрдЧреА рд╡рд┐рдХрд╛рд╕рд╛рд╕рд╣ рддреБрдордЪрд╛ рдХрд╛рдп рдЕрдиреБрднрд╡ рдЖрд╣реЗ?`,
        `рдирд╡реАрди рддрдВрддреНрд░рдЬреНрдЮрд╛рди рдЖрдгрд┐ рдкреНрд░реЛрдЧреНрд░рд╛рдорд┐рдВрдЧ рдЯреНрд░реЗрдВрдбрд╕рд╣ рддреБрдореНрд╣реА рдХрд╕реЗ рдЕрджреНрдпрддрдирд┐рдд рд░рд╛рд╣рддрд╛?`,
        `рдЬрдЯрд┐рд▓ рд╕рдорд╕реНрдпрд╛ рддреБрдореНрд╣рд╛рд▓рд╛ рдбреАрдмрдЧ рдХрд░рд╛рд╡реА рд▓рд╛рдЧрд▓реЗрд▓реНрдпрд╛ рд╡реЗрд│реЗрдЪреЗ рд╡рд░реНрдгрди рдХрд░рд╛. рддреБрдордЪреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд╛рдп рд╣реЛрддреА?`,
      ],
      Gujarati: [
        `${role} ркдрк░рлАркХрлЗ ркдркорк╛рк░рк╛ ркЕркирлБркнрк╡ рк╡рк┐рк╢рлЗ ркХрк╣рлЛ ркЕркирлЗ рк╕рлЛрклрлНркЯрк╡рлЗрк░ ркбрлЗрк╡рк▓рккркорлЗркирлНркЯ ркдрк░ркл ркдркоркирлЗ рк╢рлБркВ ркЖркХрк░рлНрк╖рк┐ркд ркХрк░рлНркпрлБркВ.`,
        `рк╣рк╛рк▓ркорк╛ркВ ркдркорлЗ ркЙркХрлЗрк▓рлЗрк▓рлА рккркбркХрк╛рк░ркЬркиркХ ркдркХркирлАркХрлА рк╕ркорк╕рлНркпрк╛ркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ ркЕркирлЗ ркдркорк╛рк░рлЛ ркЕркнрк┐ркЧрко рк╕ркоркЬрк╛рк╡рлЛ.`,
        `ркдркорлЗ ркдркорк╛рк░рк╛ рккрлНрк░рлЛркЬрлЗркХрлНркЯрлНрк╕ркорк╛ркВ ркХрлЛркб ркЧрлБркгрк╡ркдрлНркдрк╛ ркЕркирлЗ ркЬрк╛рк│рк╡ркгрлА ркХрлЗрк╡рлА рк░рлАркдрлЗ рк╕рлБркирк┐рк╢рлНркЪрк┐ркд ркХрк░рлЛ ркЫрлЛ?`,
        `рк╡рк░рлНркЭрки ркХркВркЯрлНрк░рлЛрк▓ рк╕рк┐рк╕рлНркЯркорлНрк╕ ркЕркирлЗ рк╕рк╣ркпрлЛркЧрлА рк╡рк┐ркХрк╛рк╕ рк╕рк╛ркерлЗ ркдркорк╛рк░рлЛ рк╢рлБркВ ркЕркирлБркнрк╡ ркЫрлЗ?`,
        `ркдркорлЗ ркирк╡рлА ркЯрлЗркХркирлЛрк▓рлЛркЬрлАркУ ркЕркирлЗ рккрлНрк░рлЛркЧрлНрк░рк╛ркорк┐ркВркЧ ркЯрлНрк░рлЗркирлНркбрлНрк╕ рк╕рк╛ркерлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркЕрккркбрлЗркЯ рк░рк╣рлЛ ркЫрлЛ?`,
        `ркЬркЯрк┐рк▓ рк╕ркорк╕рлНркпрк╛ркирлЗ ркдркорлЗ ркбрлАркмркЧ ркХрк░рк╡рк╛ркирлЛ рк╕ркоркп рк╡рк░рлНркгрк╡рлЛ. ркдркорк╛рк░рлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ рк╢рлБркВ рк╣ркдрлА?`,
      ],
      Punjabi: [
        `${role} ри╡риЬрйЛриВ риЖрикригрйЗ риЕриирйБринри╡ римри╛ри░рйЗ рижрй▒ри╕рйЛ риЕридрйЗ ри╕ри╛рилриЯри╡рйЗриЕри░ рибри┐ри╡рйИри▓рикриорйИриВриЯ ри╡ри┐рй▒риЪ ридрйБри╣ри╛риирйВрй░ риХрйА риЖриХри░ри╕ри╝ри┐рид риХрйАридри╛ред`,
        `ри╣ри╛ри▓ ри╣рйА ри╡ри┐рй▒риЪ ридрйБри╕рйАриВ ри╣рй▒ри▓ риХрйАридрйА риорйБри╕ри╝риХри┐ри▓ ридриХриирйАриХрйА ри╕риорй▒ри╕ри┐риЖ рижри╛ ри╡ри░ригрии риХри░рйЛ риЕридрйЗ риЖрикригрйЗ ридри░рйАриХрйЗ рижрй▒ри╕рйЛред`,
        `ридрйБри╕рйАриВ риЖрикригрйЗ рикрйНри░рйЛриЬрйИриХриЯри╛риВ ри╡ри┐рй▒риЪ риХрйЛриб рижрйА риЧрйБригри╡рй▒ридри╛ риЕридрйЗ ри░рй▒риЦ-ри░риЦри╛риЕ риХри┐ри╡рйЗриВ риприХрйАриирйА римригри╛риЙриВрижрйЗ ри╣рйЛ?`,
        `ри╡ри░риЬри╝рии риХрй░риЯри░рйЛри▓ ри╕ри┐ри╕риЯриори╛риВ риЕридрйЗ ри╕ри╣ри┐рипрйЛриЧрйА ри╡ри┐риХри╛ри╕ риири╛ри▓ ридрйБри╣ри╛рибри╛ риХрйА риЕриирйБринри╡ ри╣рйИ?`,
        `ридрйБри╕рйАриВ риири╡рйАриЖриВ ридриХриирйАриХри╛риВ риЕридрйЗ рикрйНри░рйЛриЧри░ри╛риори┐рй░риЧ ри░рйБриЭри╛риири╛риВ риири╛ри▓ риХри┐ри╡рйЗриВ риЕрикрибрйЗриЯ ри░ри╣ри┐рй░рижрйЗ ри╣рйЛ?`,
        `риХрйЛриИ риЧрйБрй░риЭри▓рижри╛ри░ ри╕риорй▒ри╕ри┐риЖ ридрйБри╕рйАриВ рибрйАримрй▒риЧ риХри░рии рижрйЗ ри╕риорйЗриВ рижри╛ ри╡ри░ригрии риХри░рйЛред ридрйБри╣ри╛рибрйА рикрйНри░риХри┐ри░ри┐риЖ риХрйА ри╕рйА?`,
      ],
      Bengali: [
        `${role} рж╣рж┐рж╕рзЗржмрзЗ ржЖржкржирж╛рж░ ржЕржнрж┐ржЬрзНржЮрждрж╛рж░ ржХржерж╛ ржмрж▓рзБржи ржПржмржВ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░ ржбрзЗржнрзЗрж▓ржкржорзЗржирзНржЯрзЗ ржХрзА ржЖржкржирж╛ржХрзЗ ржЖржХрзГрж╖рзНржЯ ржХрж░рзЗржЫрзЗред`,
        `рж╕ржорзНржкрзНрж░рждрж┐ ржЖржкржирж┐ ржпрзЗ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬрж┐ржВ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗржЫрзЗржи рждрж╛рж░ ржмрж░рзНржгржирж╛ ржжрж┐ржи ржПржмржВ ржЖржкржирж╛рж░ ржкржжрзНржзрждрж┐ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржиред`,
        `ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкрзНрж░ржХрж▓рзНржкржЧрзБрж▓рж┐рждрзЗ ржХрзЛржбрзЗрж░ ржЧрзБржгржорж╛ржи ржПржмржВ рж░ржХрзНрж╖ржгрж╛ржмрзЗржХрзНрж╖ржг ржХрзАржнрж╛ржмрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗржи?`,
        `ржнрж╛рж░рзНрж╕ржи ржХржирзНржЯрзНрж░рзЛрж▓ рж╕рж┐рж╕рзНржЯрзЗржо ржПржмржВ рж╕рж╣ржпрзЛржЧрж┐рждрж╛ржорзВрж▓ржХ ржЙржирзНржиржпрж╝ржирзЗрж░ рж╕рж╛ржерзЗ ржЖржкржирж╛рж░ ржХрзА ржЕржнрж┐ржЬрзНржЮрждрж╛?`,
        `ржЖржкржирж┐ ржирждрзБржи ржкрзНрж░ржпрзБржХрзНрждрж┐ ржПржмржВ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржЯрзНрж░рзЗржирзНржбрзЗрж░ рж╕рж╛ржерзЗ ржХрзАржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржерж╛ржХрзЗржи?`,
        `ржПржоржи ржПржХржЯрж┐ рж╕ржоржпрж╝рзЗрж░ ржмрж░рзНржгржирж╛ ржжрж┐ржи ржпржЦржи ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ ржЬржЯрж┐рж▓ рж╕ржорж╕рзНржпрж╛ ржбрж┐ржмрж╛ржЧ ржХрж░рждрзЗ рж╣ржпрж╝рзЗржЫрж┐рж▓ред ржЖржкржирж╛рж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрзА ржЫрж┐рж▓?`,
      ],
      Urdu: [
        `${role} ┌й█Т ╪╖┘И╪▒ ┘╛╪▒ ╪з┘╛┘Ж█Т ╪к╪м╪▒╪и█Т ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪и╪к╪з╪ж█М┌║ ╪з┘И╪▒ ╪│╪з┘Б┘╣ ┘И█М╪ж╪▒ ┌И█М┘И┘Д┘╛┘Е┘Ж┘╣ ┘Е█М┌║ ╪в┘╛ ┌й┘И ┌й█М╪з ┘Е╪к┘И╪м█Б ┌й█М╪з█Ф`,
        `╪н╪з┘Д █Б█М ┘Е█М┌║ ╪в┘╛ ┘Ж█Т ╪м┘И ┘Е╪┤┌й┘Д ╪к┌й┘Ж█М┌й█М ┘Е╪│╪ж┘Д█Б ╪н┘Д ┌й█М╪з █Б█Т ╪з╪│ ┌й█М ┘И╪╢╪з╪н╪к ┌й╪▒█М┌║ ╪з┘И╪▒ ╪з┘╛┘Ж█Т ╪╖╪▒█М┘В█Б ┌й╪з╪▒ ┌й┘И ╪и█М╪з┘Ж ┌й╪▒█М┌║█Ф`,
        `╪в┘╛ ╪з┘╛┘Ж█Т ┘╛╪▒┘И╪м█М┌й┘╣╪│ ┘Е█М┌║ ┌й┘И┌И ┌й█М ┌й┘И╪з┘Д┘╣█М ╪з┘И╪▒ ╪и╪▒┘В╪▒╪з╪▒█М ┌й┘И ┌й█М╪│█Т █М┘В█М┘Ж█М ╪и┘Ж╪з╪к█Т █Б█М┌║╪Я`,
        `┘И╪▒┌Ш┘Ж ┌й┘Ж┘╣╪▒┘И┘Д ╪│╪│┘╣┘Е╪▓ ╪з┘И╪▒ ╪к╪╣╪з┘И┘Ж█М ╪к╪▒┘В█М ┌й█Т ╪│╪з╪к┌╛ ╪в┘╛ ┌й╪з ┌й█М╪з ╪к╪м╪▒╪и█Б █Б█Т╪Я`,
        `╪в┘╛ ┘Ж╪ж█М ┘╣█М┌й┘Ж╪з┘Д┘И╪м█М╪▓ ╪з┘И╪▒ ┘╛╪▒┘И┌п╪▒╪з┘Е┘Ж┌п ┘╣╪▒█М┘Ж┌И╪▓ ┌й█Т ╪│╪з╪к┌╛ ┌й█М╪│█Т ╪з┘╛ ┌И█М┘╣ ╪▒█Б╪к█Т █Б█М┌║╪Я`,
        `╪з█М┌й ┘╛█М┌Ж█М╪п█Б ┘Е╪│╪ж┘Д█Т ┌й┘И ╪в┘╛ ┘Ж█Т ┌И█М╪и┌п ┌й╪▒┘Ж█Т ┌й█Т ┘И┘В╪к ┌й█М ┘И╪╢╪з╪н╪к ┌й╪▒█М┌║█Ф ╪в┘╛ ┌й╪з ╪╣┘Е┘Д ┌й█М╪з ╪к┌╛╪з╪Я`,
      ]
    },
    "Frontend Developer": {
      English: [
        `What's your experience with modern JavaScript frameworks and which do you prefer?`,
        `How do you approach responsive web design and ensure cross-browser compatibility?`,
        `Describe a complex UI component you built and the challenges you faced.`,
        `How do you optimize web application performance and user experience?`,
        `What's your process for collaborating with designers and backend developers?`,
        `How do you handle state management in large frontend applications?`,
      ],
      Hindi: [
        `рдЖрдзреБрдирд┐рдХ рдЬрд╛рд╡рд╛рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдлреНрд░реЗрдорд╡рд░реНрдХ рдХреЗ рд╕рд╛рде рдЖрдкрдХрд╛ рдХреНрдпрд╛ рдЕрдиреБрднрд╡ рд╣реИ рдФрд░ рдЖрдк рдХрд┐рд╕реЗ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрддреЗ рд╣реИрдВ?`,
        `рдЖрдк рд░рд┐рд╕реНрдкреЙрдиреНрд╕рд┐рд╡ рд╡реЗрдм рдбрд┐рдЬрд╝рд╛рдЗрди рдХреИрд╕реЗ рдХрд░рддреЗ рд╣реИрдВ рдФрд░ рдХреНрд░реЙрд╕-рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕рдВрдЧрддрддрд╛ рдХреИрд╕реЗ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреЗ рд╣реИрдВ?`,
        `рдЖрдкрдиреЗ рдЬреЛ рдЬрдЯрд┐рд▓ UI рдХрдВрдкреЛрдиреЗрдВрдЯ рдмрдирд╛рдпрд╛ рд╣реИ рдЙрд╕рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ рдФрд░ рдЖрдкрдХреЛ рдХрд┐рди рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдирд╛ рдкрдбрд╝рд╛ред`,
        `рдЖрдк рд╡реЗрдм рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдкреНрд░рджрд░реНрд╢рди рдФрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЕрдиреБрднрд╡ рдХреЛ рдХреИрд╕реЗ рдЕрдиреБрдХреВрд▓рд┐рдд рдХрд░рддреЗ рд╣реИрдВ?`,
        `рдбрд┐рдЬрд╝рд╛рдЗрдирд░ рдФрд░ рдмреИрдХрдПрдВрдб рдбреЗрд╡рд▓рдкрд░реНрд╕ рдХреЗ рд╕рд╛рде рд╕рд╣рдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЖрдкрдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреНрдпрд╛ рд╣реИ?`,
        `рдмрдбрд╝реЗ рдлреНрд░рдВрдЯрдПрдВрдб рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдореЗрдВ рдЖрдк рд╕реНрдЯреЗрдЯ рдореИрдиреЗрдЬрдореЗрдВрдЯ рдХреИрд╕реЗ рдХрд░рддреЗ рд╣реИрдВ?`,
      ],
    },
  }

  const roleQuestions = questionBank[role] || questionBank["Software Engineer"]
  
  // Enhanced language fallback logic
  let languageQuestions = roleQuestions[language]
  
  if (!languageQuestions) {
    console.log(`тЪая╕П No questions found for language: ${language}, falling back to English`)
    languageQuestions = roleQuestions["English"]
  }

  return languageQuestions.slice(0, Math.min(count, languageQuestions.length))
}
