import { NextRequest, NextResponse } from 'next/server';

interface InterviewAnswer {
  questionId: string;
  questionText: string;
  answerText: string;
  category: string;
  recordingDuration: number;
}

interface AnalysisRequest {
  answers: InterviewAnswer[];
  role: string;
  experience: string;
  language: string;
  interviewDuration: number;
}

export async function POST(req: NextRequest) {
  try {
    const body: AnalysisRequest = await req.json();
    const { answers, role, experience, language, interviewDuration } = body;

    console.log('ü§ñ Enhanced AI Interview Analysis API called:', { 
      answersCount: answers.length, 
      role, 
      experience, 
      language 
    });

    // Use OpenRouter API only (no OpenAI)
    const openrouterResult = await tryOpenRouterAnalysis(body);
    if (openrouterResult.success) {
      console.log('‚úÖ OpenRouter analysis succeeded');
      return NextResponse.json(openrouterResult);
    }

    // Fallback: Advanced local analysis (still dynamic)
    console.log('‚ö†Ô∏è OpenRouter failed, using advanced fallback analysis');
    const fallbackAnalysis = await createAdvancedAnalysis(body);
    
    return NextResponse.json({
      success: true,
      analysis: fallbackAnalysis,
      source: 'advanced_fallback'
    });

  } catch (error) {
    console.error('‚ùå Enhanced Analysis API error:', error);
    return NextResponse.json({
      success: false,
      error: 'Analysis failed',
      fallback: true
    }, { status: 500 });
  }
}

async function tryOpenAIAnalysis(data: AnalysisRequest) {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.log('‚ö†Ô∏è OpenAI API key not found');
    return { success: false };
  }

  try {
    const analysisPrompt = createAnalysisPrompt(data);
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are an expert technical interviewer and career coach. Analyze interviews comprehensively and provide actionable feedback.'
          },
          {
            role: 'user',
            content: analysisPrompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const result = await response.json();
    const analysis = JSON.parse(result.choices[0].message.content);
    
    console.log('‚úÖ OpenAI analysis successful');
    return {
      success: true,
      analysis,
      source: 'openai'
    };

  } catch (error) {
    console.error('‚ùå OpenAI analysis failed:', error);
    return { success: false };
  }
}

async function tryOpenRouterAnalysis(data: AnalysisRequest) {
  const apiKey = process.env.OPENROUTER_API_KEY;
  if (!apiKey) {
    console.log('‚ö†Ô∏è OpenRouter API key not found');
    return { success: false };
  }

  try {
    const analysisPrompt = createAnalysisPrompt(data);
    
    console.log('üîë OpenRouter API Key available, attempting analysis...');
    
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',
        'X-Title': 'AI Interview Coach'
      },
      body: JSON.stringify({
        model: process.env.OPENROUTER_MODEL || 'qwen/qwen-2-72b-instruct', // Use cheaper model
        messages: [
          {
            role: 'system',
            content: 'You are an expert technical interviewer and career coach. Analyze interviews comprehensively and provide actionable feedback in JSON format.'
          },
          {
            role: 'user',
            content: analysisPrompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenRouter API error details:', errorText);
      
      if (response.status === 402) {
        console.error('‚ùå OpenRouter API: Payment Required (402) - Insufficient credits or billing issue');
      } else {
        console.error(`‚ùå OpenRouter API error: ${response.status} - ${errorText}`);
      }
      
      throw new Error(`OpenRouter API error: ${response.status}`);
    }

    const result = await response.json();
    const analysis = JSON.parse(result.choices[0].message.content);
    
    console.log('‚úÖ OpenRouter analysis successful');
    return {
      success: true,
      analysis,
      source: 'openrouter'
    };

  } catch (error) {
    console.error('‚ùå OpenRouter analysis failed:', error);
    return { success: false };
  }
}

function createAnalysisPrompt(data: AnalysisRequest): string {
  const { answers, role, experience, language, interviewDuration } = data;
  
  // Determine response language
  const getLanguageInfo = (lang: string) => {
    const languageMap: Record<string, { isNonEnglish: boolean; name: string }> = {
      'hi': { isNonEnglish: true, name: 'Hindi' },
      'es': { isNonEnglish: true, name: 'Spanish' },
      'fr': { isNonEnglish: true, name: 'French' },
      'de': { isNonEnglish: true, name: 'German' },
      'it': { isNonEnglish: true, name: 'Italian' },
      'pt': { isNonEnglish: true, name: 'Portuguese' },
      'ru': { isNonEnglish: true, name: 'Russian' },
      'zh': { isNonEnglish: true, name: 'Chinese' },
      'ja': { isNonEnglish: true, name: 'Japanese' },
      'ko': { isNonEnglish: true, name: 'Korean' },
      'ar': { isNonEnglish: true, name: 'Arabic' },
      'bn': { isNonEnglish: true, name: 'Bengali' },
      'te': { isNonEnglish: true, name: 'Telugu' },
      'ta': { isNonEnglish: true, name: 'Tamil' },
      'mr': { isNonEnglish: true, name: 'Marathi' },
      'gu': { isNonEnglish: true, name: 'Gujarati' },
      'kn': { isNonEnglish: true, name: 'Kannada' },
      'ml': { isNonEnglish: true, name: 'Malayalam' },
      'pa': { isNonEnglish: true, name: 'Punjabi' },
      'ur': { isNonEnglish: true, name: 'Urdu' },
      'en': { isNonEnglish: false, name: 'English' }
    };
    
    return languageMap[lang] || { isNonEnglish: false, name: 'English' };
  };
  
  const languageInfo = getLanguageInfo(language);
  const isHindi = language === 'hi';
  
  return `
**INTERVIEW ANALYSIS REQUEST**

${isHindi ? '‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ' : 'Role'}: ${role}
${isHindi ? '‡§Ö‡§®‡•Å‡§≠‡§µ' : 'Experience'}: ${experience}
${isHindi ? '‡§≠‡§æ‡§∑‡§æ' : 'Language'}: ${language}
${isHindi ? '‡§Ö‡§µ‡§ß‡§ø' : 'Duration'}: ${Math.floor(interviewDuration / 60)}m ${interviewDuration % 60}s

**${isHindi ? '‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§î‡§∞ ‡§â‡§§‡•ç‡§§‡§∞:' : 'QUESTIONS & ANSWERS:'}**
${answers.map((answer, index) => `
${isHindi ? '‡§™‡•ç‡§∞‡§∂‡•ç‡§®' : 'Question'} ${index + 1}: ${answer.questionText}
${isHindi ? '‡§â‡§§‡•ç‡§§‡§∞' : 'Answer'}: ${answer.answerText}
${isHindi ? '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä' : 'Category'}: ${answer.category}
---`).join('\n')}

**${isHindi ? '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç:' : 'ANALYSIS REQUIREMENTS:'}**

${languageInfo.isNonEnglish ? `
IMPORTANT: Provide the entire analysis in ${languageInfo.name} language. All feedback, suggestions, strengths, and improvements must be in ${languageInfo.name}.

Please provide detailed analysis in the following JSON format in ${languageInfo.name}:
` : 'Please provide detailed analysis in the following JSON format in English:'}

${isHindi ? `
‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ JSON ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç:

{
  "overallScore": 85,
  "breakdown": {
    "technical": 82,
    "communication": 88,
    "completeness": 80,
    "confidence": 87
  },
  "questionAnalysis": [
    {
      "questionId": "q1",
      "questionText": "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§π‡§æ‡§Å",
      "answerText": "‡§â‡§§‡•ç‡§§‡§∞ ‡§Ø‡§π‡§æ‡§Å", 
      "score": 85,
      "strengths": ["‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∂‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Å"],
      "weaknesses": ["‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞"],
      "suggestions": ["‡§∏‡•Å‡§ù‡§æ‡§µ"],
      "expectedAnswer": "‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£",
      "technicalAccuracy": 85,
      "communicationClarity": 90,
      "completeness": 80
    }
  ],
  "strengths": ["‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Å"],
  "improvements": ["‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ"],
  "recommendations": ["‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç"],
  "statistics": {
    "totalQuestions": ${answers.length},
    "averageResponseLength": 150,
    "totalInterviewTime": "${Math.floor(interviewDuration / 60)}m ${interviewDuration % 60}s",
    "keywordsUsed": 25,
    "expectedKeywords": 35,
    "confidenceLevel": "‡§Ö‡§ö‡•ç‡§õ‡§æ"
  }
}

‡§∏‡§≠‡•Ä ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§Ç‡•§
` : `
Please provide detailed analysis in the following JSON format:

{
  "overallScore": 85,
  "breakdown": {
    "technical": 82,
    "communication": 88,
    "completeness": 80,
    "confidence": 87
  },
  "questionAnalysis": [
    {
      "questionId": "q1",
      "questionText": "Question here",
      "answerText": "Answer here",
      "score": 85,
      "strengths": ["Specific strengths"],
      "weaknesses": ["Areas for improvement"],
      "suggestions": ["Actionable suggestions"],
      "expectedAnswer": "Description of ideal answer",
      "technicalAccuracy": 85,
      "communicationClarity": 90,
      "completeness": 80
    }
  ],
  "strengths": ["Overall strengths"],
  "improvements": ["Improvement suggestions"],
  "recommendations": ["Future recommendations"],
  "statistics": {
    "totalQuestions": ${answers.length},
    "averageResponseLength": 150,
    "totalInterviewTime": "${Math.floor(interviewDuration / 60)}m ${interviewDuration % 60}s",
    "keywordsUsed": 25,
    "expectedKeywords": 35,
    "confidenceLevel": "Good"
  }
}

Provide all feedback in English.
`}

**${isHindi ? '‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£:' : 'IMPORTANT:'}**
- ${isHindi ? '‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§ó‡§π‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç' : 'Analyze each answer thoroughly'}
- ${isHindi ? '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç' : 'Focus on technical accuracy'}
- ${isHindi ? '‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç' : 'Provide actionable suggestions'}
- ${isHindi ? '‡§ï‡•á‡§µ‡§≤ JSON ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç' : 'Respond only in JSON format'}
`;
}

async function createAdvancedAnalysis(data: AnalysisRequest) {
  const { answers, role, experience, language, interviewDuration } = data;
  
  // Determine response language
  const getLanguageInfo = (lang: string) => {
    const languageMap: Record<string, { isNonEnglish: boolean; name: string }> = {
      'hi': { isNonEnglish: true, name: 'Hindi' },
      'es': { isNonEnglish: true, name: 'Spanish' },
      'fr': { isNonEnglish: true, name: 'French' },
      'de': { isNonEnglish: true, name: 'German' },
      'it': { isNonEnglish: true, name: 'Italian' },
      'pt': { isNonEnglish: true, name: 'Portuguese' },
      'ru': { isNonEnglish: true, name: 'Russian' },
      'zh': { isNonEnglish: true, name: 'Chinese' },
      'ja': { isNonEnglish: true, name: 'Japanese' },
      'ko': { isNonEnglish: true, name: 'Korean' },
      'ar': { isNonEnglish: true, name: 'Arabic' },
      'bn': { isNonEnglish: true, name: 'Bengali' },
      'te': { isNonEnglish: true, name: 'Telugu' },
      'ta': { isNonEnglish: true, name: 'Tamil' },
      'mr': { isNonEnglish: true, name: 'Marathi' },
      'gu': { isNonEnglish: true, name: 'Gujarati' },
      'kn': { isNonEnglish: true, name: 'Kannada' },
      'ml': { isNonEnglish: true, name: 'Malayalam' },
      'pa': { isNonEnglish: true, name: 'Punjabi' },
      'ur': { isNonEnglish: true, name: 'Urdu' },
      'en': { isNonEnglish: false, name: 'English' }
    };
    
    return languageMap[lang] || { isNonEnglish: false, name: 'English' };
  };
  
  const languageInfo = getLanguageInfo(language);
  const isHindi = language === 'hi';
  
  // Advanced analysis without AI but still dynamic
  const questionAnalysis = answers.map((answer, index) => {
    const answerText = answer.answerText.toLowerCase();
    const wordCount = answer.answerText.split(' ').length;
    const answerLength = answer.answerText.length;
    
    // Advanced scoring algorithm
    let score = 50; // Base score
    
    // Content quality indicators
    const hasExamples = /\b(example|instance|experience|project|when|time|‡§â‡§¶‡§æ‡§π‡§∞‡§£|‡§Ö‡§®‡•Å‡§≠‡§µ|‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü)\b/i.test(answerText);
    const hasTechnical = /\b(code|algorithm|database|api|framework|system|‡§ï‡•ã‡§°|‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ|‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏|‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ)\b/i.test(answerText);
    const hasMetrics = /\b(\d+%|\d+ (users|hours|days|months|years)|improved|increased|decreased|‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏|‡§ò‡§Ç‡§ü‡•á|‡§¶‡§ø‡§®|‡§Æ‡§π‡•Ä‡§®‡•á|‡§∏‡§æ‡§≤)\b/i.test(answerText);
    const hasStructure = /\b(first|second|then|finally|next|‡§™‡§π‡§≤‡•á|‡§¶‡•Ç‡§∏‡§∞‡•á|‡§´‡§ø‡§∞|‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç|‡§Ö‡§ó‡§≤‡§æ)\b/i.test(answerText);
    
    // Length-based scoring
    if (wordCount >= 50) score += 15;
    else if (wordCount >= 30) score += 10;
    else if (wordCount >= 15) score += 5;
    
    // Content quality bonuses
    if (hasExamples) score += 12;
    if (hasTechnical) score += 10;
    if (hasMetrics) score += 15;
    if (hasStructure) score += 8;
    
    // Cap the score
    score = Math.min(95, Math.max(45, score));
    
    // Generate dynamic feedback
    const strengths: string[] = [];
    const weaknesses: string[] = [];
    const suggestions: string[] = [];
    
    if (isHindi) {
      if (wordCount >= 50) strengths.push('‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§î‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡§ø‡§Ø‡§æ');
      if (hasExamples) strengths.push('‡§Ö‡§ö‡•ç‡§õ‡•á ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§ø‡§è');
      if (hasTechnical) strengths.push('‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ú‡•ç‡§û‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ');
      if (hasMetrics) strengths.push('‡§Æ‡§æ‡§™‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡§ø‡§è');
      if (hasStructure) strengths.push('‡§∏‡§Ç‡§∞‡§ö‡§ø‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡§ø‡§Ø‡§æ');
      
      if (wordCount < 30) weaknesses.push('‡§â‡§§‡•ç‡§§‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§π‡•à');
      if (!hasExamples) weaknesses.push('‡§Ö‡§ß‡§ø‡§ï ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç');
      if (!hasTechnical && answer.category && answer.category.toLowerCase().includes('technical')) weaknesses.push('‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç');
      if (!hasMetrics) weaknesses.push('‡§Æ‡§æ‡§™‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç');
      
      // Dynamic suggestions based on actual content
      if (wordCount < 30) suggestions.push('‡§Ö‡§™‡§®‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•ã ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç');
      if (!hasExamples) suggestions.push('‡§Ö‡§™‡§®‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∏‡•á ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§¶‡•á‡§Ç');
      if (!hasMetrics) suggestions.push('‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§Ø‡§æ ‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§¨‡§§‡§æ‡§è‡§Ç');
      if (!hasTechnical && answer.category && answer.category.toLowerCase().includes('technical')) {
        suggestions.push('‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∂‡§¨‡•ç‡§¶‡§æ‡§µ‡§≤‡•Ä ‡§î‡§∞ ‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç');
      }
    } else if (language === 'es') {
      if (wordCount >= 50) strengths.push('Proporcion√≥ una respuesta completa y detallada');
      if (hasExamples) strengths.push('Incluy√≥ ejemplos relevantes');
      if (hasTechnical) strengths.push('Demostr√≥ conocimiento t√©cnico');
      if (hasMetrics) strengths.push('Incluy√≥ resultados cuantificables');
      if (hasStructure) strengths.push('Respuesta bien estructurada');
      
      if (wordCount < 30) weaknesses.push('Respuesta muy breve, necesita m√°s detalle');
      if (!hasExamples) weaknesses.push('Agregar m√°s ejemplos espec√≠ficos');
      if (!hasTechnical && answer.category && answer.category.toLowerCase().includes('technical')) weaknesses.push('Incluir m√°s detalles t√©cnicos');
      if (!hasMetrics) weaknesses.push('Agregar resultados medibles');
      
      // Dynamic suggestions based on actual content  
      if (wordCount < 30) suggestions.push('Expanda su respuesta con m√°s detalle');
      if (!hasExamples) suggestions.push('Incluya un ejemplo espec√≠fico de su experiencia');
      if (!hasMetrics) suggestions.push('Agregue n√∫meros o m√©tricas para cuantificar sus logros');
      if (!hasTechnical && answer.category && answer.category.toLowerCase().includes('technical')) {
        suggestions.push('Use terminolog√≠a t√©cnica y metodolog√≠as');
      }
    } else {
      if (wordCount >= 50) strengths.push('Provided comprehensive and detailed answer');
      if (hasExamples) strengths.push('Included relevant examples');
      if (hasTechnical) strengths.push('Demonstrated technical knowledge');
      if (hasMetrics) strengths.push('Included quantifiable results');
      if (hasStructure) strengths.push('Well-structured response');
      
      if (wordCount < 30) weaknesses.push('Response too brief, needs more detail');
      if (!hasExamples) weaknesses.push('Add more specific examples');
      if (!hasTechnical && answer.category && answer.category.toLowerCase().includes('technical')) weaknesses.push('Include more technical details');
      if (!hasMetrics) weaknesses.push('Add measurable outcomes');
      
      // Dynamic suggestions based on actual content
      if (wordCount < 30) suggestions.push('Expand your answer with more detail');
      if (!hasExamples) suggestions.push('Include a specific example from your experience');
      if (!hasMetrics) suggestions.push('Add numbers or metrics to quantify your achievements');
      if (!hasTechnical && answer.category && answer.category.toLowerCase().includes('technical')) {
        suggestions.push('Use technical terminology and methodologies');
      }
    }
    
    return {
      questionId: answer.questionId,
      questionText: answer.questionText,
      answerText: answer.answerText,
      score,
      strengths,
      weaknesses,
      suggestions,
      expectedAnswer: isHindi 
        ? `‡§á‡§∏ ${answer.category} ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§¶‡§æ‡§π‡§∞‡§£, ‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ-‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§`
        : `For this ${answer.category} question, ideal answers should include specific examples, metrics, and clear problem-solving approaches.`,
      technicalAccuracy: Math.min(95, score + Math.random() * 10 - 5),
      communicationClarity: Math.min(95, score + Math.random() * 10 - 5),
      completeness: Math.min(95, score + Math.random() * 10 - 5)
    };
  });
  
  // Calculate overall scores
  const scores = questionAnalysis.map(q => q.score);
  const overallScore = Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);
  
  return {
    overallScore,
    breakdown: {
      technical: Math.round(questionAnalysis.reduce((sum, q) => sum + q.technicalAccuracy, 0) / questionAnalysis.length),
      communication: Math.round(questionAnalysis.reduce((sum, q) => sum + q.communicationClarity, 0) / questionAnalysis.length),
      completeness: Math.round(questionAnalysis.reduce((sum, q) => sum + q.completeness, 0) / questionAnalysis.length),
      confidence: Math.min(95, overallScore + 5)
    },
    questionAnalysis,
    // Dynamic strengths based on actual analysis
    strengths: generateDynamicStrengths(questionAnalysis, overallScore, language),
    // Dynamic improvements based on actual weaknesses found
    improvements: generateDynamicImprovements(questionAnalysis, overallScore, language),
    // Dynamic recommendations based on performance gaps
    recommendations: generateDynamicRecommendations(questionAnalysis, role, overallScore, language),
    statistics: {
      totalQuestions: answers.length,
      averageResponseLength: Math.round(answers.reduce((sum, a) => sum + a.answerText.length, 0) / answers.length),
      totalInterviewTime: `${Math.floor(interviewDuration / 60)}m ${interviewDuration % 60}s`,
      keywordsUsed: Math.max(5, answers.length * 3),
      expectedKeywords: answers.length * 5,
      confidenceLevel: isHindi ? 
        (overallScore >= 80 ? '‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü' : overallScore >= 70 ? '‡§Ö‡§ö‡•ç‡§õ‡§æ' : overallScore >= 60 ? '‡§Æ‡§ß‡•ç‡§Ø‡§Æ' : '‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ') :
        (overallScore >= 80 ? 'Excellent' : overallScore >= 70 ? 'Good' : overallScore >= 60 ? 'Moderate' : 'Needs Improvement')
    }
  };
}

// Dynamic helper functions for generating contextual feedback
function generateDynamicStrengths(questionAnalysis: any[], overallScore: number, language: string): string[] {
  const strengths = [];
  const avgWordCount = questionAnalysis.reduce((sum, q) => sum + q.answerText.split(' ').length, 0) / questionAnalysis.length;
  const highScoringQuestions = questionAnalysis.filter(q => q.score >= 80).length;
  
  // Multilingual support
  const translations: Record<string, Record<string, string>> = {
    'hi': {
      'excellent_performance': '‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡§ø‡§ñ‡§æ‡§Ø‡§æ',
      'detailed_answers': '‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§ø‡§è',
      'strong_majority': '‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®',
      'good_examples': '‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó',
      'technical_knowledge': '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡§Æ‡§ù',
      'completed_interview': '‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§ø‡§Ø‡§æ'
    },
    'es': {
      'excellent_performance': 'Excelente rendimiento general en la entrevista',
      'detailed_answers': 'Proporcion√≥ respuestas detalladas y completas',
      'strong_majority': 'Rendimiento s√≥lido en la mayor√≠a de preguntas',
      'good_examples': 'Buen uso de ejemplos pr√°cticos',
      'technical_knowledge': 'Fuerte conocimiento t√©cnico y comprensi√≥n',
      'completed_interview': 'Complet√≥ la entrevista exitosamente'
    },
    'fr': {
      'excellent_performance': 'Excellente performance globale √† l\'entretien',
      'detailed_answers': 'Fourni des r√©ponses d√©taill√©es et compl√®tes',
      'strong_majority': 'Performance solide sur la majorit√© des questions',
      'good_examples': 'Bon usage d\'exemples pratiques',
      'technical_knowledge': 'Forte connaissance technique et compr√©hension',
      'completed_interview': 'A termin√© l\'entretien avec succ√®s'
    },
    'en': {
      'excellent_performance': 'Excellent overall interview performance',
      'detailed_answers': 'Provided detailed and comprehensive answers',
      'strong_majority': 'Strong performance on majority of questions',
      'good_examples': 'Good use of practical examples',
      'technical_knowledge': 'Strong technical knowledge and understanding',
      'completed_interview': 'Completed the interview'
    }
  };
  
  const lang = translations[language] || translations['en'];
  
  if (overallScore >= 80) strengths.push(lang.excellent_performance);
  if (avgWordCount > 50) strengths.push(lang.detailed_answers);
  if (highScoringQuestions > questionAnalysis.length / 2) strengths.push(lang.strong_majority);
  if (questionAnalysis.some(q => q.strengths.some((s: string) => s.includes('example') || s.includes('‡§â‡§¶‡§æ‡§π‡§∞‡§£') || s.includes('ejemplo')))) strengths.push(lang.good_examples);
  if (questionAnalysis.some(q => q.strengths.some((s: string) => s.includes('technical') || s.includes('‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä') || s.includes('t√©cnico')))) strengths.push(lang.technical_knowledge);
  
  return strengths.length > 0 ? strengths : [lang.completed_interview];
}

function generateDynamicImprovements(questionAnalysis: any[], overallScore: number, language: string): string[] {
  const improvements = [];
  const avgWordCount = questionAnalysis.reduce((sum, q) => sum + q.answerText.split(' ').length, 0) / questionAnalysis.length;
  const lowScoringQuestions = questionAnalysis.filter(q => q.score < 60).length;
  
  // Multilingual support
  const translations: Record<string, Record<string, string>> = {
    'hi': {
      'improve_quality': '‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç',
      'detailed_answers': '‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç',
      'focus_weak_areas': '‡§ï‡§Æ‡§ú‡•ã‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§™‡§∞ ‡§´‡•ã‡§ï‡§∏ ‡§ï‡§∞‡•á‡§Ç',
      'more_examples': '‡§Ö‡§ß‡§ø‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç',
      'technical_depth': '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§π‡§∞‡§æ‡§à ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç',
      'continue_practice': '‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç'
    },
    'es': {
      'improve_quality': 'Mejorar la calidad y profundidad de las respuestas',
      'detailed_answers': 'Proporcionar respuestas m√°s detalladas y completas',
      'focus_weak_areas': 'Enfocarse en mejorar el rendimiento en √°reas d√©biles',
      'more_examples': 'Incluir m√°s ejemplos espec√≠ficos de la experiencia',
      'technical_depth': 'Fortalecer el conocimiento t√©cnico y la terminolog√≠a',
      'continue_practice': 'Continuar practicando regularmente'
    },
    'fr': {
      'improve_quality': 'Am√©liorer la qualit√© et la profondeur des r√©ponses',
      'detailed_answers': 'Fournir des r√©ponses plus d√©taill√©es et compl√®tes',
      'focus_weak_areas': 'Se concentrer sur l\'am√©lioration des domaines faibles',
      'more_examples': 'Inclure plus d\'exemples sp√©cifiques de l\'exp√©rience',
      'technical_depth': 'Renforcer les connaissances techniques et la terminologie',
      'continue_practice': 'Continuer √† pratiquer r√©guli√®rement'
    },
    'en': {
      'improve_quality': 'Improve overall response quality and depth',
      'detailed_answers': 'Provide more detailed and comprehensive answers',
      'focus_weak_areas': 'Focus on improving performance in weaker areas',
      'more_examples': 'Include more specific examples from experience',
      'technical_depth': 'Strengthen technical knowledge and terminology',
      'continue_practice': 'Continue practicing'
    }
  };
  
  const lang = translations[language] || translations['en'];
  
  if (overallScore < 70) improvements.push(lang.improve_quality);
  if (avgWordCount < 30) improvements.push(lang.detailed_answers);
  if (lowScoringQuestions > 0) improvements.push(lang.focus_weak_areas);
  if (questionAnalysis.some(q => q.weaknesses.some((w: string) => w.includes('example') || w.includes('‡§â‡§¶‡§æ‡§π‡§∞‡§£') || w.includes('ejemplo')))) improvements.push(lang.more_examples);
  if (questionAnalysis.some(q => q.weaknesses.some((w: string) => w.includes('technical') || w.includes('‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä') || w.includes('t√©cnico')))) improvements.push(lang.technical_depth);
  
  return improvements.length > 0 ? improvements : [lang.continue_practice];
}

function generateDynamicRecommendations(questionAnalysis: any[], role: string, overallScore: number, language: string): string[] {
  const recommendations = [];
  const lowScoringQuestions = questionAnalysis.filter(q => q.score < 60);
  
  // Multilingual support
  const translations: Record<string, Record<string, string>> = {
    'hi': {
      'focus_skills': `${role} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ï‡•å‡§∂‡§≤ ‡§™‡§∞ ‡§´‡•ã‡§ï‡§∏ ‡§ï‡§∞‡•á‡§Ç`,
      'mock_interviews': '‡§Æ‡•â‡§ï ‡§á‡§Ç‡§ü‡§∞‡§µ‡•ç‡§Ø‡•Ç ‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç',
      'comprehensive_answers': '‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç',
      'extra_preparation': '‡§ï‡§Æ‡§ú‡•ã‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç'
    },
    'es': {
      'focus_skills': `Enfocarse en habilidades t√©cnicas espec√≠ficas requeridas para ${role}`,
      'mock_interviews': 'Realizar m√°s entrevistas simuladas para practicar',
      'comprehensive_answers': 'Trabajar en proporcionar explicaciones m√°s comprensivas',
      'extra_preparation': 'Dedicar tiempo extra de preparaci√≥n a las √°reas m√°s d√©biles'
    },
    'fr': {
      'focus_skills': `Se concentrer sur les comp√©tences techniques sp√©cifiques requises pour ${role}`,
      'mock_interviews': 'Mener plus d\'entretiens simul√©s pour la pratique',
      'comprehensive_answers': 'Travailler √† fournir des explications plus compl√®tes',
      'extra_preparation': 'Consacrer un temps de pr√©paration suppl√©mentaire aux domaines faibles'
    },
    'en': {
      'focus_skills': `Focus on specific technical skills required for ${role}`,
      'mock_interviews': 'Conduct more mock interviews for practice',
      'comprehensive_answers': 'Work on providing more comprehensive explanations',
      'extra_preparation': 'Dedicate extra preparation time to weaker areas'
    }
  };
  
  const lang = translations[language] || translations['en'];
  
  recommendations.push(lang.focus_skills);
  recommendations.push(lang.mock_interviews);
  if (overallScore < 75) recommendations.push(lang.comprehensive_answers);
  if (lowScoringQuestions.length > 0) recommendations.push(lang.extra_preparation);
  
  return recommendations;
}
