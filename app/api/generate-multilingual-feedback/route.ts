import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { transcript, keywords, emotion, question, role, language } = await request.json()

    console.log(`ЁЯза Generating real AI feedback in ${language}...`)

    // Check if we have OpenAI API key for real processing
    const apiKey = process.env.OPENAI_API_KEY

    if (!apiKey || apiKey.includes("dummy") || apiKey.includes("development") || apiKey.includes("fake")) {
      console.log("тЪая╕П No real OpenAI API key found, using fallback feedback")
      const feedback = generateFallbackFeedback(transcript, keywords, emotion, question, role, language)
      return NextResponse.json({
        feedback,
        real: false,
        message: "Using fallback feedback. Add OpenAI API key for AI-generated feedback.",
      })
    }

    // Prepare emotion context if available
    const emotionContext = emotion
      ? `
Emotion Analysis Data:
- Confidence Level: ${Math.round(emotion.confidence * 100)}%
- Eye Contact: ${Math.round(emotion.eye_contact * 100)}%
- Engagement: ${Math.round(emotion.engagement * 100)}%
- Dominant Emotion: ${emotion.dominant_emotion}
- Stress Level: ${Math.round((emotion.stress || 0) * 100)}%
`
      : ""

    const keywordContext =
      keywords && keywords.length > 0
        ? `
Detected Keywords: ${keywords.join(", ")}
`
        : ""

    // Create comprehensive prompt for real AI feedback
    const prompt = `You are an expert ${role} interviewer providing constructive feedback in ${language} language.

Interview Question: "${question}"

Candidate's Response: "${transcript}"
${keywordContext}${emotionContext}

Please provide specific, actionable feedback in ${language} that:

1. Acknowledges specific strengths in their response
2. Identifies areas for improvement with concrete suggestions
3. References technical concepts or keywords they mentioned
4. Considers their confidence and engagement level if emotion data is available
5. Gives practical advice for better interview performance
6. Maintains an encouraging but honest tone
7. Is culturally appropriate for ${language} speakers

Keep the feedback concise (2-3 sentences) but meaningful. Focus on both content and delivery aspects.

Respond only in ${language} language.`

    console.log("ЁЯЪА Calling OpenAI GPT-4 for real feedback generation...")

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `You are an expert technical interviewer providing constructive feedback in ${language}. Always respond in ${language} language with specific, actionable advice.`,
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 400,
        temperature: 0.7,
      }),
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error("OpenAI API error:", response.status, errorData)
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const data = await response.json()
    const feedback = data.choices[0].message.content.trim()

    console.log("тЬЕ Real AI feedback generated successfully")
    return NextResponse.json({ feedback, real: true })
  } catch (error) {
    console.error("Real AI feedback generation failed:", error)

    // Fallback to manual feedback
    console.log("ЁЯФД Falling back to manual feedback...")
    const feedback = generateFallbackFeedback("", [], null, "", "", "English")

    return NextResponse.json({
      feedback,
      real: false,
      error: "Real AI feedback generation failed. Using fallback feedback.",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
}

function generateFallbackFeedback(
  transcript: string,
  keywords: string[],
  emotion: any,
  question: string,
  role: string,
  language: string,
): string {
  console.log(`тЪая╕П Using fallback feedback in ${language}`)

  const wordCount = transcript
    .trim()
    .split(/\s+/)
    .filter((w) => w.length > 0).length

  const feedbackTemplates = {
    English: [
      "Thank you for your detailed response. I can see you have relevant experience. Consider providing more specific examples with measurable outcomes to strengthen your answers.",
      "Good technical knowledge comes through in your answer. To improve, try to structure your responses using the STAR method and maintain more eye contact with the interviewer.",
      "I appreciate the depth of your response. For future interviews, consider being more concise while still covering the key points, and speak with more confidence.",
    ],
    Hindi: [
      "рдЖрдкрдХреЗ рд╡рд┐рд╕реНрддреГрдд рдЙрддреНрддрд░ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдореИрдВ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдЕрдиреБрднрд╡ рд╣реИред рдЕрдкрдиреЗ рдЙрддреНрддрд░реЛрдВ рдХреЛ рдордЬрдмреВрдд рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдорд╛рдкрдиреЗ рдпреЛрдЧреНрдп рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЗ рд╕рд╛рде рдЕрдзрд┐рдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЙрджрд╛рд╣рд░рдг рджреЗрдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред",
      "рдЖрдкрдХреЗ рдЙрддреНрддрд░ рдореЗрдВ рдЕрдЪреНрдЫрд╛ рддрдХрдиреАрдХреА рдЬреНрдЮрд╛рди рджрд┐рдЦрддрд╛ рд╣реИред рд╕реБрдзрд╛рд░ рдХреЗ рд▓рд┐рдП, STAR рдкрджреНрдзрддрд┐ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрдкрдиреЗ рдЙрддреНрддрд░реЛрдВ рдХреЛ рд╕рдВрд░рдЪрд┐рдд рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдФрд░ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░рдХрд░реНрддрд╛ рдХреЗ рд╕рд╛рде рдЕрдзрд┐рдХ рдЖрдВрдЦреЛрдВ рдХрд╛ рд╕рдВрдкрд░реНрдХ рдмрдирд╛рдП рд░рдЦреЗрдВред",
      "рдореИрдВ рдЖрдкрдХреЗ рдЙрддреНрддрд░ рдХреА рдЧрд╣рд░рд╛рдИ рдХреА рд╕рд░рд╛рд╣рдирд╛ рдХрд░рддрд╛ рд╣реВрдВред рднрд╡рд┐рд╖реНрдп рдХреЗ рд╕рд╛рдХреНрд╖рд╛рддреНрдХрд╛рд░реЛрдВ рдХреЗ рд▓рд┐рдП, рдореБрдЦреНрдп рдмрд┐рдВрджреБрдУрдВ рдХреЛ рдХрд╡рд░ рдХрд░рддреЗ рд╣реБрдП рдЕрдзрд┐рдХ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╣реЛрдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ, рдФрд░ рдЕрдзрд┐рдХ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдХреЗ рд╕рд╛рде рдмреЛрд▓реЗрдВред",
    ],
    Bengali: [
      "ржЖржкржирж╛рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░рзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржорж┐ ржжрзЗржЦрждрзЗ ржкрж╛ржЪрзНржЫрж┐ ржЖржкржирж╛рж░ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЕржнрж┐ржЬрзНржЮрждрж╛ рж░ржпрж╝рзЗржЫрзЗред ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ржЧрзБрж▓рж┐ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржХрж░рждрзЗ ржкрж░рж┐ржорж╛ржкржпрзЛржЧрзНржп ржлрж▓рж╛ржлрж▓ рж╕рж╣ ржЖрж░ржУ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЙржжрж╛рж╣рж░ржг ржкрзНрж░ржжрж╛ржи ржХрж░рж╛рж░ ржХржерж╛ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржиред",
      "ржЖржкржирж╛рж░ ржЙрждрзНрждрж░рзЗ ржнрж╛рж▓ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд ржЬрзНржЮрж╛ржи ржкрзНрж░ржХрж╛рж╢ ржкрж╛ржпрж╝ред ржЙржирзНржирждрж┐рж░ ржЬржирзНржп, STAR ржкржжрзНржзрждрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЙрждрзНрждрж░ржЧрзБрж▓рж┐ ржХрж╛ржарж╛ржорзЛржмржжрзНржз ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржПржмржВ рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░ржХрж╛рж░рзАрж░ рж╕рж╛ржерзЗ ржЖрж░ржУ ржЪрзЛржЦрзЗрж░ ржпрзЛржЧрж╛ржпрзЛржЧ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред",
      "ржЖржорж┐ ржЖржкржирж╛рж░ ржЙрждрзНрждрж░рзЗрж░ ржЧржнрзАрж░рждрж╛рж░ ржкрзНрж░рж╢ржВрж╕рж╛ ржХрж░рж┐ред ржнржмрж┐рж╖рзНржпрждрзЗрж░ рж╕рж╛ржХрзНрж╖рж╛рзОржХрж╛рж░рзЗрж░ ржЬржирзНржп, ржорзВрж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржХржнрж╛рж░ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржЖрж░ржУ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж╣ржУржпрж╝рж╛рж░ ржХржерж╛ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржи ржПржмржВ ржЖрж░ржУ ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзБржиред",
    ],
  }

  const templates = feedbackTemplates[language as keyof typeof feedbackTemplates] || feedbackTemplates.English
  return templates[Math.floor(Math.random() * templates.length)]
}
