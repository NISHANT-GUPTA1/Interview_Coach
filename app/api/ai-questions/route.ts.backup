import { NextRequest, NextResponse } from 'next/server';

// Helper function to categorize questions
function getQuestionCategory(questionText: string, index: number): string {
  const text = questionText.toLowerCase();
  
  if (text.includes('yourself') || text.includes('background') || text.includes('experience')) {
    return 'Introduction';
  } else if (text.includes('challenge') || text.includes('problem') || text.includes('difficult')) {
    return 'Problem Solving';
  } else if (text.includes('skill') || text.includes('strength') || text.includes('weakness')) {
    return 'Skills & Abilities';
  } else if (text.includes('team') || text.includes('collaborate') || text.includes('leadership')) {
    return 'Teamwork';
  } else if (text.includes('learn') || text.includes('technology') || text.includes('update')) {
    return 'Learning & Growth';
  } else if (text.includes('future') || text.includes('goals') || text.includes('career')) {
    return 'Career Goals';
  } else if (text.includes('technical') || text.includes('code') || text.includes('algorithm')) {
    return 'Technical';
  } else {
    // Assign categories based on question order
    const categories = ['Introduction', 'Technical', 'Problem Solving', 'Behavioral', 'Career Goals'];
    return categories[index % categories.length];
  }
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { role = 'Software Engineer', experience = '2-3 years', count = 5, language = 'en' } = body;

    console.log('ü§ñ AI Question Generation API called:', { role, experience, count, language });

    // Check for OpenRouter API key - MANDATORY for real-time generation
    const openrouterKey = process.env.OPENROUTER_API_KEY;
    
    console.log('üîë OpenRouter API Key:', openrouterKey ? `${openrouterKey.substring(0, 7)}...${openrouterKey.substring(openrouterKey.length - 4)}` : 'None');
    
    if (!openrouterKey || openrouterKey.includes('dummy')) {
      console.error('‚ùå NO VALID OPENROUTER API KEY - Cannot generate real-time questions');
      return NextResponse.json({
        success: false,
        error: 'OpenRouter API key required for real-time question generation',
        message: "CRITICAL: Configure OpenRouter API key for AI-generated questions. No fallback questions will be provided.",
        questions: [],
        real: false
      }, { status: 400 });
    }

    // ALWAYS use OpenRouter API for real-time generation - NO FALLBACKS
    try {
      console.log('üöÄ Using OpenRouter API for REAL-TIME question generation...');
      const rawQuestions = await generateOpenRouterQuestions(role, experience, language, count, openrouterKey);
      
      if (!rawQuestions || rawQuestions.length === 0) {
        throw new Error('OpenRouter returned empty questions array');
      }
      
      console.log('‚úÖ OpenRouter API succeeded, generated', rawQuestions.length, 'REAL-TIME questions');
      console.log('üìã Generated questions preview:', rawQuestions.slice(0, 2));
      
      // Convert strings to proper question objects
      const questions = rawQuestions.map((questionText: string, index: number) => ({
        id: index + 1,
        text: questionText,
        category: getQuestionCategory(questionText, index),
        generated: 'real-time',
        timestamp: new Date().toISOString()
      }));
      
      console.log('üîÑ Formatted', questions.length, 'real-time questions for', language);
      
      return NextResponse.json({
        success: true,
        questions,
        real: true,
        provider: 'OpenRouter',
        language: language,
        generated: 'real-time',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå OpenRouter API failed:', error);
      
      // NO FALLBACK - Return error instead
      return NextResponse.json({
        success: false,
        error: 'Real-time question generation failed',
        message: 'OpenRouter API failed. Please check API key and try again.',
        details: error instanceof Error ? error.message : 'Unknown error',
        questions: [],
        real: false
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå API error:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to generate AI questions',
      details: error instanceof Error ? error.message : 'Unknown error',
      questions: [],
      real: false
    }, { status: 500 });
  }
}

async function generateOpenAIQuestions(
  role: string, 
  experience: string, 
  language: string, 
  count: number,
  apiKey: string
): Promise<string[]> {
  const prompt = `Generate ${count} professional interview questions for a ${role} position with ${experience} experience level.

Requirements:
- Questions should be appropriate for ${experience} experience level
- Mix of technical, behavioral, and problem-solving questions
- Professional and realistic
- Return as JSON object with "questions" array

Example format:
{
  "questions": [
    "Question 1 here",
    "Question 2 here"
  ]
}`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `You are an expert interview coach. Generate professional interview questions in ${language} for ${role} positions. Return a JSON object with a "questions" array.`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 1500,
      temperature: 0.8,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('OpenAI API error details:', errorText);
    throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
  }

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  try {
    const parsed = JSON.parse(content);
    
    // Extract questions from various possible response formats
    let questions = [];
    if (Array.isArray(parsed)) {
      questions = parsed;
    } else if (parsed.questions && Array.isArray(parsed.questions)) {
      questions = parsed.questions;
    } else if (parsed.interview_questions && Array.isArray(parsed.interview_questions)) {
      questions = parsed.interview_questions;
    } else {
      // If no array found, try to extract from text
      throw new Error('No valid questions array found in response');
    }

    return questions.filter((q: any) => typeof q === 'string' && q.trim().length > 10).slice(0, count);
  } catch (parseError) {
    console.error('Failed to parse OpenAI response:', parseError);
    // Fallback: try to extract questions from plain text
    const lines = content.split('\n')
      .filter((line: string) => line.trim().length > 10 && (line.includes('?') || line.match(/^\d+\./)))
      .map((line: string) => line.replace(/^\d+\.\s*/, '').trim())
      .slice(0, count);
    
    if (lines.length > 0) {
      return lines;
    }
    
    throw new Error('Could not extract questions from OpenAI response');
  }
}

async function generateOpenRouterQuestions(
  role: string, 
  experience: string, 
  language: string, 
  count: number,
  apiKey: string
): Promise<string[]> {
  try {
    console.log('üåê OpenRouter Real-time Generation for:', { role, experience, language, count });
    
    // Enhanced language-specific prompts for AI generation
    const languagePrompts = {
      'hi': `Generate ${count} professional interview questions in Hindi (‡§π‡§ø‡§Ç‡§¶‡•Ä) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Hindi script. Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'ta': `Generate ${count} professional interview questions in Tamil (‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Tamil script (‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æé‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'te': `Generate ${count} professional interview questions in Telugu (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Telugu script (‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≤‡∞ø‡∞™‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'kn': `Generate ${count} professional interview questions in Kannada (‡≤ï‡≤®‡≥ç‡≤®‡≤°) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Kannada script (‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≤‡≤ø‡≤™‡≤ø ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'ml': `Generate ${count} professional interview questions in Malayalam (‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Malayalam script (‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥≤‡¥ø‡¥™‡¥ø ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'mr': `Generate ${count} professional interview questions in Marathi (‡§Æ‡§∞‡§æ‡§†‡•Ä) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Marathi script (‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≤‡§ø‡§™‡•Ä ‡§´‡§ï‡•ç‡§§). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'gu': `Generate ${count} professional interview questions in Gujarati (‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Gujarati script (‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä ‡™≤‡™ø‡™™‡™ø ‡™ú). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'pa': `Generate ${count} professional interview questions in Punjabi (‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Punjabi script (‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä ‡®≤‡®ø‡®™‡©Ä ‡®π‡©Ä). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'bn': `Generate ${count} professional interview questions in Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Bengali script (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≤‡¶ø‡¶™‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'ur': `Generate ${count} professional interview questions in Urdu (ÿßÿ±ÿØŸà) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Urdu script (ÿµÿ±ŸÅ ÿßÿ±ÿØŸà ÿ±ÿ≥ŸÖ ÿßŸÑÿÆÿ∑). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'sa': `Generate ${count} professional interview questions in Sanskrit (‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Sanskrit script (‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§≤‡§ø‡§™‡§ø ‡§ï‡•á‡§µ‡§≤). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'or': `Generate ${count} professional interview questions in Odia (‡¨ì‡¨°‡¨º‡¨ø‡¨Ü) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Odia script (‡¨ì‡¨°‡¨º‡¨ø‡¨Ü ‡¨≤‡¨ø‡¨™‡¨ø ‡¨Æ‡¨æ‡¨§‡≠ç‡§∞). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'as': `Generate ${count} professional interview questions in Assamese (‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ) for a ${role} position with ${experience} experience. Questions must be technical, relevant, and completely in Assamese script (‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ ‡¶≤‡¶ø‡¶™‡¶ø ‡¶ï‡ßá‡ß±‡¶≤). Each question should test skills, problem-solving, and expertise. Format: Return only the questions, one per line.`,
      
      'default': `Generate ${count} professional technical interview questions for a ${role} position with ${experience} experience. Focus on practical skills, problem-solving abilities, and relevant technical knowledge. Each question should be clear, specific, and designed to assess the candidate's expertise in their field. Format: Return only the questions, one per line.`
    };
    
    const systemPrompt = languagePrompts[language as keyof typeof languagePrompts] || languagePrompts.default;
    
    console.log('üìù AI Prompt for', language, ':', systemPrompt.substring(0, 100) + '...');
    
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://ai-interview-coach.vercel.app',
        'X-Title': 'AI Interview Coach - Question Generator'
      },
      body: JSON.stringify({
        model: 'microsoft/wizardlm-2-8x22b', // Multi-lingual support
        messages: [
          {
            role: 'system',
            content: `You are an expert technical interview question generator. You MUST generate questions ONLY in the requested language script. Never mix languages or use English unless specifically requested. Be precise and professional.`
          },
          {
            role: 'user',
            content: systemPrompt
          }
        ],
        temperature: 0.8,
        max_tokens: 1500,
        top_p: 0.9
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenRouter API error:', response.status, errorText);
      throw new Error(`OpenRouter API failed: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('üìä OpenRouter API response data available');

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Invalid OpenRouter response structure:', data);
      throw new Error('Invalid response from OpenRouter API');
    }

    const content = data.choices[0].message.content;
    console.log('üìã Raw AI generated content length:', content.length);
    
    // Parse questions from response
    const questions = content
      .split('\n')
      .filter((line: string) => line.trim())
      .map((line: string) => line.replace(/^\d+\.\s*/, '').trim())
      .filter((question: string) => question.length > 10);
    
    console.log('‚úÖ Parsed', questions.length, 'AI-generated questions for', language);
    console.log('üîç Sample questions:', questions.slice(0, 2));
    
    if (questions.length === 0) {
      throw new Error('Failed to parse questions from AI response');
    }
    
    return questions.slice(0, count);
    
  } catch (error) {
    console.error('‚ùå OpenRouter question generation failed:', error);
    throw error;
  }
}

// Remove fallback function - force real-time generation only
function generateFallbackQuestions(role: string, language: string, count: number): string[] {
  // REMOVED: This function now returns empty to force real-time generation
  console.error('üö´ Fallback questions removed - use OpenRouter API only');
  return [];
}
      max_tokens: 1500,
      temperature: 0.8,
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenRouter API error: ${response.status}`);
  }

  const data = await response.json();
  const content = data.choices[0].message.content;
  
  try {
    const parsed = JSON.parse(content);
    let questions = [];
    if (Array.isArray(parsed)) {
      questions = parsed;
    } else if (parsed.questions && Array.isArray(parsed.questions)) {
      questions = parsed.questions;
    }
    
    // Validate language consistency
    const validQuestions = questions.filter((q: any) => {
      if (typeof q !== 'string' || q.trim().length <= 10) return false;
      
      // Language validation
      if (language === 'Hindi') {
        return /[\u0900-\u097F]/.test(q); // Devanagari script
      } else if (language === 'Tamil') {
        return /[\u0B80-\u0BFF]/.test(q); // Tamil script
      } else if (language === 'Telugu') {
        return /[\u0C00-\u0C7F]/.test(q); // Telugu script
      } else if (language === 'Kannada') {
        return /[\u0C80-\u0CFF]/.test(q); // Kannada script
      } else if (language === 'Malayalam') {
        return /[\u0D00-\u0D7F]/.test(q); // Malayalam script
      } else if (language === 'Bengali') {
        return /[\u0980-\u09FF]/.test(q); // Bengali script
      } else if (language === 'Gujarati') {
        return /[\u0A80-\u0AFF]/.test(q); // Gujarati script
      } else if (language === 'Punjabi') {
        return /[\u0A00-\u0A7F]/.test(q); // Gurmukhi script
      }
      
      return true; // For other languages, accept as is
    });
    
    if (validQuestions.length === 0) {
      console.warn(`‚ö†Ô∏è No valid questions in ${language}, falling back`);
      throw new Error(`No valid questions generated in ${language}`);
    }
    
    return validQuestions.slice(0, count);
  } catch (error) {
    console.warn(`‚ö†Ô∏è OpenRouter parsing failed for ${language}:`, error);
    // If JSON parsing fails, try to extract questions from text
    const lines = content.split('\n').filter((line: string) => line.trim().length > 10);
    return lines.slice(0, count);
  }
}

function generateFallbackQuestions(role: string, language: string, count: number): string[] {
  const questionBank: { [key: string]: { [key: string]: string[] } } = {
    "Software Engineer": {
      "English": [
        "Tell me about yourself and your experience as a software engineer.",
        "Describe a challenging technical problem you solved recently and walk me through your approach.",
        "How do you ensure code quality and maintainability in your projects?",
        "What's your experience with version control systems and collaborative development?",
        "How do you stay updated with new technologies and programming trends?",
        "Describe a time when you had to debug a complex issue. What was your process?",
        "How do you approach system design and scalability challenges?",
        "What testing strategies do you use to ensure your code is reliable?"
      ],
      "Hindi": [
        "‡§Ö‡§™‡§®‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§á‡§Ç‡§ú‡•Ä‡§®‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
        "‡§π‡§æ‡§≤ ‡§π‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§®‡•á ‡§ú‡•ã ‡§ö‡•Å‡§®‡•å‡§§‡•Ä‡§™‡•Ç‡§∞‡•ç‡§£ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡§≤ ‡§ï‡•Ä ‡§π‡•à ‡§â‡§∏‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
        "‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§° ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡•à‡§∏‡•á ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§µ‡§∞‡•ç‡§ú‡§® ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§π‡•à?",
        "‡§Ü‡§™ ‡§®‡§à ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•à‡§∏‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§ú‡§ü‡§ø‡§≤ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§°‡§ø‡§¨‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§î‡§∞ ‡§∏‡•ç‡§ï‡•á‡§≤‡•á‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§ö‡•Å‡§®‡•å‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§®‡§ø‡§™‡§ü‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§ï‡•ã‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?"
      ],
      "Tamil": [
        "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÜ‡Æ©‡Øç‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ≥‡Øç ‡Æ™‡Øä‡Æ±‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Ææ‡Æï ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Æµ‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÇ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.",
        "‡Æö‡ÆÆ‡ØÄ‡Æ™‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§ ‡Æö‡Æµ‡Ææ‡Æ≤‡Ææ‡Æ© ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™ ‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øà ‡Æµ‡Æø‡Æµ‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ£‡ØÅ‡Æï‡ØÅ‡ÆÆ‡ØÅ‡Æ±‡Øà‡ÆØ‡Øà ‡Æµ‡Æø‡Æ≥‡Æï‡Øç‡Æï‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.",
        "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡Øç‡Æü‡Æø‡Æ©‡Øç ‡Æ§‡Æ∞‡Æ§‡Øç‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æµ‡Øç‡Æµ‡Ææ‡Æ±‡ØÅ ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?",
        "‡Æ™‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æï‡Æü‡Øç‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡ØÅ ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÇ‡Æü‡Øç‡Æü‡ØÅ ‡Æµ‡Æ≥‡Æ∞‡Øç‡Æö‡Øç‡Æö‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Æµ‡ÆÆ‡Øç ‡Æé‡Æ©‡Øç‡Æ©?",
        "‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ∞‡Æ≤‡Ææ‡Æï‡Øç‡Æï ‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æü‡Æ©‡Øç ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æµ‡Øç‡Æµ‡Ææ‡Æ±‡ØÅ ‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æ§‡Øç‡Æ§ ‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?",
        "‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Ææ‡Æ© ‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øà‡Æ§‡Øç ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡Æø‡ÆØ ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Øà ‡Æµ‡Æø‡Æµ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æé‡Æ©‡Øç‡Æ©?",
        "‡Æï‡Æ£‡Æø‡Æ©‡Æø ‡Æµ‡Æü‡Æø‡Æµ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≥‡Æµ‡Æø‡Æü‡ØÅ‡Æ§‡Æ≤‡Øç ‡Æö‡Æµ‡Ææ‡Æ≤‡Øç‡Æï‡Æ≥‡Øà ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æµ‡Øç‡Æµ‡Ææ‡Æ±‡ØÅ ‡ÆÖ‡Æ£‡ØÅ‡Æï‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?",
        "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ ‡Æ®‡ÆÆ‡Øç‡Æ™‡Æï‡ÆÆ‡Ææ‡Æ©‡Æ§‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Øà ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ ‡Æé‡Æ®‡Øç‡Æ§ ‡Æö‡Øã‡Æ§‡Æ©‡Øà ‡Æâ‡Æ§‡Øç‡Æ§‡Æø‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?"
      ],
      "Telugu": [
        "‡∞Æ‡±Ä ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞æ‡∞´‡±ç‡∞ü‡±ç‚Äå‡∞µ‡±á‡∞∞‡±ç ‡∞á‡∞Ç‡∞ú‡∞®‡±Ä‡∞∞‡±ç‚Äå‡∞ó‡∞æ ‡∞Æ‡±Ä ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø.",
        "‡∞á‡∞ü‡±Ä‡∞µ‡∞≤ ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞∏‡∞µ‡∞æ‡∞≤‡±Å‡∞§‡±ã ‡∞ï‡±Ç‡∞°‡∞ø‡∞® ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞®‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡±Ä ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
        "‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç‚Äå‡∞≤‡∞≤‡±ã ‡∞ï‡±ã‡∞°‡±ç ‡∞®‡∞æ‡∞£‡±ç‡∞Ø‡∞§ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞π‡∞£‡∞®‡±Å ‡∞é‡∞≤‡∞æ ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å?",
        "‡∞µ‡±Ü‡∞∞‡±ç‡∞∑‡∞®‡±ç ‡∞ï‡∞Ç‡∞ü‡±ç‡∞∞‡±ã‡∞≤‡±ç ‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡∞Æ‡±ç‚Äå‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞π‡∞ï‡∞æ‡∞∞ ‡∞Ö‡∞≠‡∞ø‡∞µ‡±É‡∞¶‡±ç‡∞ß‡∞ø‡∞§‡±ã ‡∞Æ‡±Ä ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞Ç ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?",
        "‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞™‡∞∞‡∞ø‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡±ç‡∞∞‡±ã‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ü‡±ç‡∞∞‡±Ü‡∞Ç‡∞°‡±ç‚Äå‡∞≤‡∞§‡±ã ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞≤‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç‚Äå‡∞ó‡∞æ ‡∞â‡∞Ç‡∞ü‡∞æ‡∞∞‡±Å?",
        "‡∞∏‡∞Ç‡∞ï‡±ç‡∞≤‡∞ø‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞®‡±Å ‡∞°‡±Ä‡∞¨‡∞ó‡±ç ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡±ç‡∞∏‡∞ø‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?",
        "‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡∞Æ‡±ç ‡∞°‡∞ø‡∞ú‡±à‡∞®‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡±ç‡∞ï‡±á‡∞≤‡∞¨‡∞ø‡∞≤‡∞ø‡∞ü‡±Ä ‡∞∏‡∞µ‡∞æ‡∞≥‡±ç‡∞≤‡∞®‡±Å ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞≤‡∞æ ‡∞ö‡±á‡∞∞‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡∞æ‡∞∞‡±Å?",
        "‡∞Æ‡±Ä ‡∞ï‡±ã‡∞°‡±ç ‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Æ‡±à‡∞®‡∞¶‡∞ø‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡∞ü‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞µ‡±ç‡∞Ø‡±Ç‡∞π‡∞æ‡∞≤‡∞®‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å?"
      ],
      "Kannada": [
        "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤æ‡≤´‡≥ç‡≤ü‡≥ç‚Äå‡≤µ‡≥á‡≤∞‡≥ç ‡≤á‡≤Ç‡≤ú‡≤ø‡≤®‡≤ø‡≤Ø‡≤∞‡≥ç ‡≤Ü‡≤ó‡≤ø ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤§‡≤ø‡≤≥‡≤ø‡≤∏‡≤ø.",
        "‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≥Ü‡≤ó‡≥Ü ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤™‡≤∞‡≤ø‡≤π‡≤∞‡≤ø‡≤∏‡≤ø‡≤¶ ‡≤∏‡≤µ‡≤æ‡≤≤‡≤ø‡≤® ‡≤§‡≤æ‡≤Ç‡≤§‡≥ç‡≤∞‡≤ø‡≤ï ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≤ø‡≤ß‡≤æ‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø.",
        "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤æ‡≤ú‡≥Ü‡≤ï‡≥ç‡≤ü‡≥ç‚Äå‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≥ã‡≤°‡≥ç ‡≤ó‡≥Å‡≤£‡≤Æ‡≤ü‡≥ç‡≤ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?",
        "‡≤Ü‡≤µ‡≥É‡≤§‡≥ç‡≤§‡≤ø ‡≤®‡≤ø‡≤Ø‡≤Ç‡≤§‡≥ç‡≤∞‡≤£ ‡≤µ‡≥ç‡≤Ø‡≤µ‡≤∏‡≥ç‡≤•‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤π‡≤ï‡≤æ‡≤∞‡≤ø ‡≤Ö‡≤≠‡≤ø‡≤µ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø‡≤Ø‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ ‡≤è‡≤®‡≥Å?",
        "‡≤π‡≥ä‡≤∏ ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ú‡≥ç‡≤û‡≤æ‡≤®‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≥ç‡≤∞‡≥ã‡≤ó‡≥ç‡≤∞‡≤æ‡≤Æ‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤™‡≥ç‡≤∞‡≤µ‡≥É‡≤§‡≥ç‡≤§‡≤ø‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?",
        "‡≤∏‡≤Ç‡≤ï‡≥Ä‡≤∞‡≥ç‡≤£‡≤µ‡≤æ‡≤¶ ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤°‡≤ø‡≤¨‡≤ó‡≥ç ‡≤Æ‡≤æ‡≤°‡≤¨‡≥á‡≤ï‡≤æ‡≤¶ ‡≤∏‡≤Æ‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø. ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤è‡≤®‡≥Å?",
        "‡≤∏‡≤ø‡≤∏‡≥ç‡≤ü‡≤Ç ‡≤µ‡≤ø‡≤®‡≥ç‡≤Ø‡≤æ‡≤∏ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥ç‡≤ï‡≥á‡≤≤‡≥Ü‡≤¨‡≤ø‡≤≤‡≤ø‡≤ü‡≤ø ‡≤∏‡≤µ‡≤æ‡≤≤‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤Æ‡≥Ä‡≤™‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?",
        "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ï‡≥ã‡≤°‡≥ç ‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏‡≤æ‡≤∞‡≥ç‡≤π‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤Ø‡≤æ‡≤µ ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤æ ‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥Ä‡≤∞‡≤ø?"
      ],
      "Malayalam": [
        "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µÅ‡¥Ç ‡¥∏‡µã‡¥´‡µç‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µÜ‡¥Ø‡µº ‡¥é‡¥û‡µç‡¥ö‡¥ø‡¥®‡µÄ‡¥Ø‡¥±‡¥æ‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥®‡µÅ‡¥≠‡¥µ‡¥§‡µç‡¥§‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µÅ‡¥Ç ‡¥™‡¥±‡¥Ø‡µÅ‡¥ï.",
        "‡¥Ö‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø‡¥ü‡µÜ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥™‡¥∞‡¥ø‡¥π‡¥∞‡¥ø‡¥ö‡µç‡¥ö ‡¥µ‡µÜ‡¥≤‡µç‡¥≤‡µÅ‡¥µ‡¥ø‡¥≥‡¥ø ‡¥®‡¥ø‡¥±‡¥û‡µç‡¥û ‡¥∏‡¥æ‡¥ô‡µç‡¥ï‡µá‡¥§‡¥ø‡¥ï ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Ç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡µÅ‡¥Ç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥∏‡¥Æ‡µÄ‡¥™‡¥®‡¥Ç ‡¥µ‡¥ø‡¥∂‡¥¶‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡µÅ‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
        "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µã‡¥ú‡¥ï‡µç‡¥±‡µç‡¥±‡µÅ‡¥ï‡¥≥‡¥ø‡µΩ ‡¥ï‡µã‡¥°‡µç ‡¥ó‡µÅ‡¥£‡¥®‡¥ø‡¥≤‡¥µ‡¥æ‡¥∞‡¥µ‡µÅ‡¥Ç ‡¥™‡¥∞‡¥ø‡¥™‡¥æ‡¥≤‡¥®‡¥µ‡µÅ‡¥Ç ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥â‡¥±‡¥™‡µç‡¥™‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ?",
        "‡¥µ‡µá‡µº‡¥∑‡µª ‡¥ï‡µ∫‡¥ü‡µç‡¥∞‡µã‡µæ ‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥∏‡¥π‡¥ï‡¥∞‡¥£ ‡¥µ‡¥ø‡¥ï‡¥∏‡¥®‡¥µ‡µÅ‡¥Æ‡¥æ‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥®‡µÅ‡¥≠‡¥µ‡¥Ç ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç?",
        "‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥∏‡¥æ‡¥ô‡µç‡¥ï‡µá‡¥§‡¥ø‡¥ï‡¥µ‡¥ø‡¥¶‡µç‡¥Ø‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥™‡µç‡¥∞‡µã‡¥ó‡µç‡¥∞‡¥æ‡¥Æ‡¥ø‡¥Ç‡¥ó‡µç ‡¥ü‡µç‡¥∞‡µÜ‡µª‡¥°‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥Ö‡¥™‡µç‚Äå‡¥°‡µá‡¥±‡µç‡¥±‡µç ‡¥Ü‡¥Ø‡¥ø ‡¥®‡¥ø‡¥≤‡¥ï‡µä‡¥≥‡µç‡¥≥‡µÅ‡¥®‡µç‡¥®‡µÅ?",
        "‡¥∏‡¥ô‡µç‡¥ï‡µÄ‡µº‡¥£‡µç‡¥£‡¥Æ‡¥æ‡¥Ø ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Ç ‡¥°‡¥ø‡¥¨‡¥ó‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µá‡¥£‡µç‡¥ü‡¥ø ‡¥µ‡¥®‡µç‡¥® ‡¥∏‡¥Æ‡¥Ø‡¥Ç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡¥ï‡µç‡¥∞‡¥ø‡¥Ø ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥Ø‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡µÅ?",
        "‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥Ç ‡¥°‡¥ø‡¥∏‡µà‡¥®‡µÅ‡¥Ç ‡¥∏‡µç‡¥ï‡µá‡¥≤‡¥¨‡¥ø‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥µ‡µÜ‡¥≤‡µç‡¥≤‡µÅ‡¥µ‡¥ø‡¥≥‡¥ø‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥∏‡¥Æ‡µÄ‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ?",
        "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µã‡¥°‡µç ‡¥µ‡¥ø‡¥∂‡µç‡¥µ‡¥∏‡¥®‡µÄ‡¥Ø‡¥Æ‡¥æ‡¥£‡µÜ‡¥®‡µç‡¥®‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥è‡¥§‡µç ‡¥ü‡µÜ‡¥∏‡µç‡¥±‡µç‡¥±‡¥ø‡¥Ç‡¥ó‡µç ‡¥§‡¥®‡µç‡¥§‡µç‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ?"
      ],
      "Marathi": [
        "‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§Ü‡§£‡§ø ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ö‡§∞ ‡§á‡§Ç‡§ú‡§ø‡§®‡•Ä‡§Ø‡§∞ ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§∏‡§æ‡§Ç‡§ó‡§æ.",
        "‡§Ö‡§≤‡•Ä‡§ï‡§°‡•á ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§∏‡•ã‡§°‡§µ‡§≤‡•á‡§≤‡•Ä ‡§Ü‡§µ‡•ç‡§π‡§æ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§§‡§æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§® ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ.",
        "‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§ï‡§≤‡•ç‡§™‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ï‡•ã‡§° ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§Ü‡§£‡§ø ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∂‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ?",
        "‡§Ü‡§µ‡•É‡§§‡•ç‡§§‡•Ä ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§Ü‡§£‡§ø ‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∏‡§æ‡§∏‡§π ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§ï‡§æ‡§Ø ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§Ü‡§π‡•á?",
        "‡§®‡§µ‡•Ä‡§® ‡§§‡§Ç‡§§‡•ç‡§∞‡§ú‡•ç‡§û‡§æ‡§® ‡§Ü‡§£‡§ø ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó ‡§ü‡•ç‡§∞‡•á‡§Ç‡§°‡§∏‡§π ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡§∏‡•á ‡§Ö‡§¶‡•ç‡§Ø‡§§‡§®‡§ø‡§§ ‡§∞‡§æ‡§π‡§§‡§æ?",
        "‡§ú‡§ü‡§ø‡§≤ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§°‡•Ä‡§¨‡§ó ‡§ï‡§∞‡§æ‡§µ‡•Ä ‡§≤‡§æ‡§ó‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•á‡§ö‡•á ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡§æ. ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§æ‡§Ø ‡§π‡•ã‡§§‡•Ä?",
        "‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§°‡§ø‡§ù‡§æ‡§á‡§® ‡§Ü‡§£‡§ø ‡§∏‡•ç‡§ï‡•á‡§≤‡•á‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§Ü‡§µ‡•ç‡§π‡§æ‡§®‡§æ‡§Ç‡§ï‡§°‡•á ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡§∏‡•á ‡§ú‡§æ‡§§‡§æ?",
        "‡§§‡•Å‡§Æ‡§ö‡§æ ‡§ï‡•ã‡§° ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡§æ‡§∞‡•ç‡§π ‡§Ü‡§π‡•á ‡§Ø‡§æ‡§ö‡•Ä ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§ß‡•ã‡§∞‡§£‡§æ‡§Ç‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡§§‡§æ?"
      ],
      "Gujarati": [
        "‡™§‡™Æ‡™æ‡™∞‡™æ ‡™µ‡™ø‡™∂‡´á ‡™Ö‡™®‡´á ‡™∏‡´ã‡™´‡´ç‡™ü‡™µ‡´á‡™∞ ‡™è‡™®‡´ç‡™ú‡™ø‡™®‡™ø‡™Ø‡™∞ ‡™§‡™∞‡´Ä‡™ï‡´á ‡™§‡™Æ‡™æ‡™∞‡™æ ‡™Ö‡™®‡´Å‡™≠‡™µ ‡™µ‡™ø‡™∂‡´á ‡™ï‡™π‡´ã.",
        "‡™π‡™æ‡™≤‡™Æ‡™æ‡™Ç ‡™§‡™Æ‡´á ‡™â‡™ï‡´á‡™≤‡´á‡™≤‡´Ä ‡™™‡™°‡™ï‡™æ‡™∞‡™ú‡™®‡™ï ‡™§‡™ï‡™®‡´Ä‡™ï‡´Ä ‡™∏‡™Æ‡™∏‡´ç‡™Ø‡™æ‡™®‡´Å‡™Ç ‡™µ‡™∞‡´ç‡™£‡™® ‡™ï‡™∞‡´ã ‡™Ö‡™®‡´á ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™Ö‡™≠‡™ø‡™ó‡™Æ ‡™∏‡™Æ‡™ú‡™æ‡™µ‡´ã.",
        "‡™§‡™Æ‡´á ‡™§‡™Æ‡™æ‡™∞‡™æ ‡™™‡´ç‡™∞‡´ã‡™ú‡´á‡™ï‡´ç‡™ü‡´ç‡™∏‡™Æ‡™æ‡™Ç ‡™ï‡´ã‡™° ‡™ó‡´Å‡™£‡™µ‡™§‡´ç‡™§‡™æ ‡™Ö‡™®‡´á ‡™ú‡™æ‡™≥‡™µ‡™£‡´Ä ‡™ï‡´á‡™µ‡´Ä ‡™∞‡´Ä‡™§‡´á ‡™∏‡´Å‡™®‡™ø‡™∂‡´ç‡™ö‡™ø‡™§ ‡™ï‡™∞‡´ã ‡™õ‡´ã?",
        "‡™µ‡™∞‡´ç‡™ù‡™® ‡™ï‡™Ç‡™ü‡´ç‡™∞‡´ã‡™≤ ‡™∏‡™ø‡™∏‡´ç‡™ü‡™Æ‡´ç‡™∏ ‡™Ö‡™®‡´á ‡™∏‡™π‡™Ø‡´ã‡™ó‡´Ä ‡™µ‡™ø‡™ï‡™æ‡™∏ ‡™∏‡™æ‡™•‡´á ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™∂‡´Å‡™Ç ‡™Ö‡™®‡´Å‡™≠‡™µ ‡™õ‡´á?",
        "‡™§‡™Æ‡´á ‡™®‡™µ‡´Ä ‡™ü‡´á‡™ï‡™®‡´ã‡™≤‡´ã‡™ú‡´Ä‡™ì ‡™Ö‡™®‡´á ‡™™‡´ç‡™∞‡´ã‡™ó‡´ç‡™∞‡™æ‡™Æ‡™ø‡™Ç‡™ó ‡™ü‡´ç‡™∞‡´á‡™®‡´ç‡™°‡´ç‡™∏ ‡™∏‡™æ‡™•‡´á ‡™ï‡´á‡™µ‡´Ä ‡™∞‡´Ä‡™§‡´á ‡™Ö‡™™‡™°‡´á‡™ü ‡™∞‡™π‡´ã ‡™õ‡´ã?",
        "‡™ú‡™ü‡™ø‡™≤ ‡™∏‡™Æ‡™∏‡´ç‡™Ø‡™æ‡™®‡´á ‡™°‡´Ä‡™¨‡™ó ‡™ï‡™∞‡™µ‡™æ‡™®‡´ã ‡™∏‡™Æ‡™Ø ‡™µ‡™∞‡´ç‡™£‡™µ‡´ã. ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™™‡´ç‡™∞‡™ï‡´ç‡™∞‡™ø‡™Ø‡™æ ‡™∂‡´Å‡™Ç ‡™π‡™§‡´Ä?",
        "‡™∏‡™ø‡™∏‡´ç‡™ü‡™Æ ‡™°‡™ø‡™ù‡™æ‡™á‡™® ‡™Ö‡™®‡´á ‡™∏‡´ç‡™ï‡´á‡™≤‡´á‡™¨‡™ø‡™≤‡™ø‡™ü‡´Ä ‡™™‡™°‡™ï‡™æ‡™∞‡´ã‡™®‡´ã ‡™§‡™Æ‡´á ‡™ï‡´á‡™µ‡´Ä ‡™∞‡´Ä‡™§‡´á ‡™∏‡™Ç‡™™‡™∞‡´ç‡™ï ‡™ï‡™∞‡´ã ‡™õ‡´ã?",
        "‡™§‡™Æ‡™æ‡™∞‡´ã ‡™ï‡´ã‡™° ‡™µ‡™ø‡™∂‡´ç‡™µ‡™∏‡™®‡´Ä‡™Ø ‡™õ‡´á ‡™§‡´á‡™®‡´Ä ‡™ñ‡™æ‡™§‡™∞‡´Ä ‡™ï‡™∞‡™µ‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™§‡™Æ‡´á ‡™ï‡™Ø‡™æ ‡™™‡™∞‡´Ä‡™ï‡´ç‡™∑‡™£ ‡™µ‡´ç‡™Ø‡´Ç‡™π‡™∞‡™ö‡™®‡™æ‡™ì‡™®‡´ã ‡™â‡™™‡™Ø‡´ã‡™ó ‡™ï‡™∞‡´ã ‡™õ‡´ã?"
      ],
      "Punjabi": [
        "‡®Ü‡®™‡®£‡©á ‡®¨‡®æ‡®∞‡©á ‡®Ö‡®§‡©á ‡®∏‡®æ‡®´‡®ü‡®µ‡©á‡®Ö‡®∞ ‡®á‡©∞‡®ú‡©Ä‡®®‡©Ä‡®Ö‡®∞ ‡®µ‡®ú‡©ã‡®Ç ‡®Ü‡®™‡®£‡©á ‡®Ö‡®®‡©Å‡®≠‡®µ ‡®¨‡®æ‡®∞‡©á ‡®¶‡©±‡®∏‡©ã‡•§",
        "‡®π‡®æ‡®≤ ‡®π‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®π‡©±‡®≤ ‡®ï‡©Ä‡®§‡©Ä ‡®Æ‡©Å‡®∏‡®º‡®ï‡®ø‡®≤ ‡®§‡®ï‡®®‡©Ä‡®ï‡©Ä ‡®∏‡®Æ‡©±‡®∏‡®ø‡®Ü ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®Ü‡®™‡®£‡©á ‡®§‡®∞‡©Ä‡®ï‡©á ‡®¶‡©±‡®∏‡©ã‡•§",
        "‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Ü‡®™‡®£‡©á ‡®™‡©ç‡®∞‡©ã‡®ú‡©à‡®ï‡®ü‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®ï‡©ã‡®° ‡®¶‡©Ä ‡®ó‡©Å‡®£‡®µ‡©±‡®§‡®æ ‡®Ö‡®§‡©á ‡®∞‡©±‡®ñ-‡®∞‡®ñ‡®æ‡®Ö ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®Ø‡®ï‡©Ä‡®®‡©Ä ‡®¨‡®£‡®æ‡®â‡®Ç‡®¶‡©á ‡®π‡©ã?",
        "‡®µ‡®∞‡®ú‡®º‡®® ‡®ï‡©∞‡®ü‡®∞‡©ã‡®≤ ‡®∏‡®ø‡®∏‡®ü‡®Æ‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®∏‡®π‡®ø‡®Ø‡©ã‡®ó‡©Ä ‡®µ‡®ø‡®ï‡®æ‡®∏ ‡®®‡®æ‡®≤ ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®ï‡©Ä ‡®Ö‡®®‡©Å‡®≠‡®µ ‡®π‡©à?",
        "‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®®‡®µ‡©Ä‡®Ü‡®Ç ‡®§‡®ï‡®®‡©Ä‡®ï‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®™‡©ç‡®∞‡©ã‡®ó‡®∞‡®æ‡®Æ‡®ø‡©∞‡®ó ‡®∞‡©Å‡®ù‡®æ‡®®‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®Ö‡®™‡®°‡©á‡®ü ‡®∞‡®π‡®ø‡©∞‡®¶‡©á ‡®π‡©ã?",
        "‡®ï‡©ã‡®à ‡®ó‡©Å‡©∞‡®ù‡®≤‡®¶‡®æ‡®∞ ‡®∏‡®Æ‡©±‡®∏‡®ø‡®Ü ‡®°‡©Ä‡®¨‡©±‡®ó ‡®ï‡®∞‡®® ‡®¶‡©á ‡®∏‡®Æ‡©á‡®Ç ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã‡•§ ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®™‡©ç‡®∞‡®ï‡®ø‡®∞‡®ø‡®Ü ‡®ï‡©Ä ‡®∏‡©Ä?",
        "‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®∏‡®ø‡®∏‡®ü‡®Æ ‡®°‡®ø‡®ú‡®º‡®æ‡®á‡®® ‡®Ö‡®§‡©á ‡®∏‡®ï‡©á‡®≤‡©á‡®¨‡®ø‡®≤‡®ø‡®ü‡©Ä ‡®ö‡©Å‡®£‡©å‡®§‡©Ä‡®Ü‡®Ç ‡®®‡®æ‡®≤ ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®®‡®ú‡®ø‡©±‡®†‡®¶‡©á ‡®π‡©ã?",
        "‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Ü‡®™‡®£‡©á ‡®ï‡©ã‡®° ‡®®‡©Ç‡©∞ ‡®≠‡®∞‡©ã‡®∏‡©á‡®Æ‡©∞‡®¶ ‡®¨‡®£‡®æ‡®â‡®£ ‡®≤‡®à ‡®ï‡®ø‡®π‡©ú‡©Ä‡®Ü‡®Ç ‡®ü‡©à‡®∏‡®ü‡®ø‡©∞‡®ó ‡®∞‡®£‡®®‡©Ä‡®§‡©Ä‡®Ü‡®Ç ‡®¶‡©Ä ‡®µ‡®∞‡®§‡©ã‡®Ç ‡®ï‡®∞‡®¶‡©á ‡®π‡©ã?"
      ],
      "Bengali": [
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶´‡¶ü‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§",
        "‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶§‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™‡¶ó‡ßÅ‡¶≤‡¶ø‡¶§‡ßá ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶Æ‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡¶æ‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡¶®?",
        "‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶π‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶â‡¶®‡ßç‡¶®‡¶Ø‡¶º‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßÄ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ?",
        "‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶•‡¶æ‡¶ï‡ßá‡¶®?",
        "‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶¶‡¶ø‡¶® ‡¶Ø‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡ßÄ ‡¶õ‡¶ø‡¶≤?",
        "‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßá‡¶≤‡ßá‡¶¨‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßã‡¶ï‡¶æ‡¶¨‡ßá‡¶≤‡¶æ ‡¶ï‡¶∞‡ßá‡¶®?",
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®?"
      ],
      "Urdu": [
        "ÿßŸæŸÜ€í ÿ®ÿßÿ±€í ŸÖ€å⁄∫ ÿßŸàÿ± ÿ≥ÿßŸÅŸπ Ÿà€åÿ¶ÿ± ÿßŸÜÿ¨€åŸÜÿ¶ÿ± ⁄©€í ÿ∑Ÿàÿ± Ÿæÿ± ÿßŸæŸÜ€í ÿ™ÿ¨ÿ±ÿ®€í ⁄©€í ÿ®ÿßÿ±€í ŸÖ€å⁄∫ ÿ®ÿ™ÿßÿ¶€å⁄∫€î",
        "ÿ≠ÿßŸÑ €Å€å ŸÖ€å⁄∫ ÿ¢Ÿæ ŸÜ€í ÿ¨Ÿà ŸÖÿ¥⁄©ŸÑ ÿ™⁄©ŸÜ€å⁄©€å ŸÖÿ≥ÿ¶ŸÑ€Å ÿ≠ŸÑ ⁄©€åÿß €Å€í ÿßÿ≥ ⁄©€å Ÿàÿ∂ÿßÿ≠ÿ™ ⁄©ÿ±€å⁄∫ ÿßŸàÿ± ÿßŸæŸÜ€í ÿ∑ÿ±€åŸÇ€Å ⁄©ÿßÿ± ⁄©Ÿà ÿ®€åÿßŸÜ ⁄©ÿ±€å⁄∫€î",
        "ÿ¢Ÿæ ÿßŸæŸÜ€í Ÿæÿ±Ÿàÿ¨€å⁄©Ÿπÿ≥ ŸÖ€å⁄∫ ⁄©Ÿà⁄à ⁄©€å ⁄©ŸàÿßŸÑŸπ€å ÿßŸàÿ± ÿ®ÿ±ŸÇÿ±ÿßÿ±€å ⁄©Ÿà ⁄©€åÿ≥€í €åŸÇ€åŸÜ€å ÿ®ŸÜÿßÿ™€í €Å€å⁄∫ÿü",
        "Ÿàÿ±⁄òŸÜ ⁄©ŸÜŸπÿ±ŸàŸÑ ÿ≥ÿ≥ŸπŸÖÿ≤ ÿßŸàÿ± ÿ™ÿπÿßŸàŸÜ€å ÿ™ÿ±ŸÇ€å ⁄©€í ÿ≥ÿßÿ™⁄æ ÿ¢Ÿæ ⁄©ÿß ⁄©€åÿß ÿ™ÿ¨ÿ±ÿ®€Å €Å€íÿü",
        "ÿ¢Ÿæ ŸÜÿ¶€å Ÿπ€å⁄©ŸÜÿßŸÑŸàÿ¨€åÿ≤ ÿßŸàÿ± Ÿæÿ±Ÿà⁄Øÿ±ÿßŸÖŸÜ⁄Ø Ÿπÿ±€åŸÜ⁄àÿ≤ ⁄©€í ÿ≥ÿßÿ™⁄æ ⁄©€åÿ≥€í ÿßŸæ ⁄à€åŸπ ÿ±€Åÿ™€í €Å€å⁄∫ÿü",
        "ÿß€å⁄© Ÿæ€å⁄Ü€åÿØ€Å ŸÖÿ≥ÿ¶ŸÑ€í ⁄©Ÿà ⁄à€åÿ®⁄Ø ⁄©ÿ±ŸÜ€í ⁄©€í ŸàŸÇÿ™ ⁄©€å Ÿàÿ∂ÿßÿ≠ÿ™ ⁄©ÿ±€å⁄∫€î ÿ¢Ÿæ ⁄©ÿß ÿπŸÖŸÑ ⁄©€åÿß ÿ™⁄æÿßÿü",
        "ÿ¢Ÿæ ÿ≥ÿ≥ŸπŸÖ ⁄à€åÿ≤ÿßÿ¶ŸÜ ÿßŸàÿ± ÿßÿ≥⁄©€åŸÑ€åÿ®ŸÑŸπ€å ⁄©€í ⁄Ü€åŸÑŸÜÿ¨ÿ≤ ÿ≥€í ⁄©€åÿ≥€í ŸÜŸÖŸπÿ™€í €Å€å⁄∫ÿü",
        "ÿ¢Ÿæ ÿßŸæŸÜ€í ⁄©Ÿà⁄à ⁄©Ÿà ŸÇÿßÿ®ŸÑ ÿßÿπÿ™ŸÖÿßÿØ ÿ®ŸÜÿßŸÜ€í ⁄©€í ŸÑ€å€í ⁄©ŸàŸÜ ÿ≥€å Ÿπ€åÿ≥ŸπŸÜ⁄Ø ÿ≠⁄©ŸÖÿ™ ÿπŸÖŸÑ€åÿß⁄∫ ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ ⁄©ÿ±ÿ™€í €Å€å⁄∫ÿü"
      ]
    },
    "Frontend Developer": {
      "English": [
        "What's your experience with modern JavaScript frameworks and which do you prefer?",
        "How do you approach responsive web design and ensure cross-browser compatibility?",
        "Describe a complex UI component you built and the challenges you faced.",
        "How do you optimize web application performance and user experience?",
        "What's your process for collaborating with designers and backend developers?",
        "How do you handle state management in large frontend applications?",
        "What testing strategies do you use for frontend applications?",
        "How do you ensure accessibility in your web applications?"
      ],
      "Hindi": [
        "‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§ú‡§æ‡§µ‡§æ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§´‡•ç‡§∞‡•á‡§Æ‡§µ‡§∞‡•ç‡§ï ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§π‡•à?",
        "‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§µ ‡§µ‡•á‡§¨ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§î‡§∞ ‡§ï‡•ç‡§∞‡•â‡§∏-‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡§Ç‡§ó‡§§‡§§‡§æ ‡§ï‡•à‡§∏‡•á ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§Ü‡§™‡§®‡•á ‡§ú‡•ã ‡§ú‡§ü‡§ø‡§≤ UI ‡§ï‡§Ç‡§™‡•ã‡§®‡•á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§π‡•à ‡§â‡§∏‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
        "‡§µ‡•á‡§¨ ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®‡§∞ ‡§î‡§∞ ‡§¨‡•à‡§ï‡§è‡§Ç‡§° ‡§°‡•á‡§µ‡§≤‡§™‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§π‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§¨‡§°‡§º‡•á ‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•á‡§ü ‡§Æ‡•à‡§®‡•á‡§ú‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§´‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        "‡§µ‡•á‡§¨ ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡§ø‡§¨‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?"
      ]
    }
  };

  const roleQuestions = questionBank[role] || questionBank["Software Engineer"];
  
  // Enhanced language fallback logic
  let languageQuestions = roleQuestions[language];
  
  if (!languageQuestions) {
    console.log(`‚ö†Ô∏è No questions found for language: ${language}, falling back to English`);
    languageQuestions = roleQuestions["English"];
  }
  
  return languageQuestions.slice(0, Math.min(count, languageQuestions.length));
}
