'use client';

import { useState } from 'react';

interface Question {
  id: string;
  question: string;
  type: 'technical' | 'mcq' | 'boolean';
  options?: string[];
  correct_answer?: string;
  answer?: string;
  source: string;
  model_used?: string;
  confidence?: number;
}

interface GenerationResult {
  success: boolean;
  questions?: Question[];
  metadata?: {
    role: string;
    experience: string;
    total_count: number;
    generated_by: string;
    model: string;
  };
  error?: string;
}

export default function AIQuestionTest() {
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState<GenerationResult | null>(null);
  const [config, setConfig] = useState({
    role: 'Frontend Developer',
    experience: '2-3 years',
    count: 3
  });

  const generateQuestions = async () => {
    setIsGenerating(true);
    setResult(null);

    try {
      const response = await fetch('/api/ai-questions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(config)
      });

      const data = await response.json();
      setResult(data);
    } catch (error) {
      setResult({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white">
      <h1 className="text-3xl font-bold text-center mb-8 text-gray-800">
        ü§ñ OpenRouter AI Question Generation Test
      </h1>
      
      <div className="bg-gray-50 p-6 rounded-lg mb-6">
        <h2 className="text-xl font-semibold mb-4">Configuration</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <select 
              value={config.role}
              onChange={(e) => setConfig({...config, role: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option>Frontend Developer</option>
              <option>Backend Developer</option>
              <option>Full Stack Developer</option>
              <option>DevOps Engineer</option>
              <option>Software Engineer</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Experience</label>
            <select 
              value={config.experience}
              onChange={(e) => setConfig({...config, experience: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option>Entry Level</option>
              <option>2-3 years</option>
              <option>5+ years</option>
              <option>Senior</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Count</label>
            <input 
              type="number"
              min="1"
              max="10"
              value={config.count}
              onChange={(e) => setConfig({...config, count: parseInt(e.target.value)})}
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>
        
        <button
          onClick={generateQuestions}
          disabled={isGenerating}
          className="w-full bg-blue-600 text-white py-3 px-6 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          {isGenerating ? 'üîÑ Generating AI Questions...' : 'üöÄ Generate AI Questions'}
        </button>
      </div>

      {result && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          {result.success ? (
            <div>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-green-600">‚úÖ Generation Successful</h2>
                {result.metadata && (
                  <div className="text-sm text-gray-600">
                    <div>Model: {result.metadata.model}</div>
                    <div>Generated by: {result.metadata.generated_by}</div>
                  </div>
                )}
              </div>
              
              <p className="text-gray-600 mb-6">
                AI questions have been generated successfully using OpenRouter&apos;s Gemma 3n 4B model
              </p>

              <div className="space-y-6">
                {result.questions?.map((question, index) => (
                  <div key={question.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold text-lg">Question {index + 1}</h3>
                      <div className="flex gap-2">
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          question.type === 'technical' ? 'bg-blue-100 text-blue-800' :
                          question.type === 'mcq' ? 'bg-green-100 text-green-800' :
                          'bg-purple-100 text-purple-800'
                        }`}>
                          {question.type}
                        </span>
                        <span className="px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800">
                          {question.source}
                        </span>
                        {question.confidence && (
                          <span className="px-2 py-1 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                            {Math.round(question.confidence * 100)}%
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <p className="text-gray-800 mb-3">{question.question}</p>
                    
                    {question.type === 'mcq' && question.options && (
                      <div className="ml-4">
                        <p className="font-medium text-sm text-gray-600 mb-2">Options:</p>
                        <div className="space-y-1">
                          {question.options.map((option, optionIndex) => (
                            <div key={optionIndex} className="flex items-start">
                              <span className="font-medium text-gray-500 mr-2">
                                {String.fromCharCode(65 + optionIndex)}.
                              </span>
                              <span className={option === question.correct_answer ? 'font-medium text-green-700' : ''}>
                                {option}
                                {option === question.correct_answer && ' ‚úì'}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {question.type === 'boolean' && question.answer && (
                      <div className="ml-4">
                        <p className="font-medium text-sm text-gray-600">
                          Answer: <span className="text-green-700">{question.answer}</span>
                        </p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div>
              <h2 className="text-xl font-semibold text-red-600 mb-4">‚ùå Generation Failed</h2>
              <p className="text-gray-600 mb-4">
                There was an error generating AI questions. Please try again.
              </p>
              <div className="bg-red-50 border border-red-200 rounded p-3">
                <p className="text-red-800 text-sm">{result.error}</p>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
