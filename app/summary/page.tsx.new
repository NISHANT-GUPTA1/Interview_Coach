"use client"

import { useState, useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { 
  Brain, 
  TrendingUp, 
  MessageSquare, 
  CheckCircle, 
  AlertCircle, 
  Target, 
  Mail, 
  Share2, 
  Download,
  Eye,
  BarChart3,
  Award,
  Clock,
  User,
  Lightbulb,
  Home
} from "lucide-react"
import Link from "next/link"

// Translation dictionaries for UI labels
const UI_TRANSLATIONS = {
  en: {
    interviewSummary: "Interview Summary",
    overallScore: "Overall Score",
    questionAnalysis: "Question Analysis",
    strengths: "Strengths",
    areasToImprove: "Areas to Improve", 
    suggestions: "Suggestions",
    yourAnswer: "Your Answer",
    expectedAnswer: "Expected Answer",
    technicalAccuracy: "Technical Accuracy",
    communicationClarity: "Communication Clarity",
    completeness: "Completeness",
    retakeInterview: "Retake Interview",
    newInterview: "New Interview",
    homeButton: "Home",
    shareResults: "Share Results",
    downloadReport: "Download Report",
    loading: "Analyzing your interview with AI...",
    totalQuestions: "Total Questions",
    totalTime: "Total Time",
    avgScore: "Average Score",
    performance: "Performance",
    excellent: "Excellent",
    good: "Good", 
    needsImprovement: "Needs Improvement",
    realTimeAnalysis: "Real-time AI Analysis",
    apiError: "API Connection Error",
    tryAgain: "Try Again"
  },
  hi: {
    interviewSummary: "‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂",
    overallScore: "‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§ï‡•ã‡§∞",
    questionAnalysis: "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
    strengths: "‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§™‡§ï‡•ç‡§∑",
    areasToImprove: "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞",
    suggestions: "‡§∏‡•Å‡§ù‡§æ‡§µ",
    yourAnswer: "‡§Ü‡§™‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞",
    expectedAnswer: "‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§â‡§§‡•ç‡§§‡§∞",
    technicalAccuracy: "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ",
    communicationClarity: "‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ",
    completeness: "‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ",
    retakeInterview: "‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§≤‡•á‡§Ç",
    newInterview: "‡§®‡§Ø‡§æ ‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞",
    homeButton: "‡§π‡•ã‡§Æ",
    shareResults: "‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç",
    downloadReport: "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
    loading: "AI ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§ï‡§æ‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...",
    totalQuestions: "‡§ï‡•Å‡§≤ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
    totalTime: "‡§ï‡•Å‡§≤ ‡§∏‡§Æ‡§Ø",
    avgScore: "‡§î‡§∏‡§§ ‡§∏‡•ç‡§ï‡•ã‡§∞",
    performance: "‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®",
    excellent: "‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü",
    good: "‡§Ö‡§ö‡•ç‡§õ‡§æ",
    needsImprovement: "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ",
    realTimeAnalysis: "‡§∞‡•Ä‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ AI ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
    apiError: "API ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
    tryAgain: "‡§™‡•Å‡§®: ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç"
  },
  es: {
    interviewSummary: "Resumen de la Entrevista",
    overallScore: "Puntuaci√≥n General",
    questionAnalysis: "An√°lisis de Preguntas",
    strengths: "Fortalezas",
    areasToImprove: "√Åreas de Mejora",
    suggestions: "Sugerencias",
    yourAnswer: "Tu Respuesta",
    expectedAnswer: "Respuesta Esperada",
    technicalAccuracy: "Precisi√≥n T√©cnica",
    communicationClarity: "Claridad de Comunicaci√≥n",
    completeness: "Completitud",
    retakeInterview: "Repetir Entrevista",
    newInterview: "Nueva Entrevista",
    homeButton: "Inicio",
    shareResults: "Compartir Resultados",
    downloadReport: "Descargar Informe",
    loading: "Analizando tu entrevista con IA...",
    totalQuestions: "Total de Preguntas",
    totalTime: "Tiempo Total",
    avgScore: "Puntuaci√≥n Promedio",
    performance: "Rendimiento",
    excellent: "Excelente",
    good: "Bueno",
    needsImprovement: "Necesita Mejora",
    realTimeAnalysis: "An√°lisis de IA en tiempo real",
    apiError: "Error de conexi√≥n API",
    tryAgain: "Intentar de nuevo"
  }
}

interface QuestionAnalysis {
  questionId: string;
  questionText: string;
  answerText: string;
  score: number;
  strengths: string[];
  weaknesses: string[];
  suggestions: string[];
  expectedAnswer: string;
  technicalAccuracy: number;
  communicationClarity: number;
  completeness: number;
}

interface AnalysisData {
  overallScore: number;
  questionAnalysis: QuestionAnalysis[];
  strengths: string[];
  improvements: string[];
  recommendations: string[];
  statistics: {
    totalQuestions: number;
    averageResponseLength: number;
    totalInterviewTime: string;
    keywordsUsed: number;
    expectedKeywords: number;
    confidenceLevel: string;
  };
}

export default function SummaryPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [analysis, setAnalysis] = useState<AnalysisData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState("overview")
  const [selectedQuestion, setSelectedQuestion] = useState<QuestionAnalysis | null>(null)
  const [showAllAnswers, setShowAllAnswers] = useState(false)
  const [isRealTimeAnalysis, setIsRealTimeAnalysis] = useState(true)

  // Get language from URL params or default to English
  const language = searchParams.get('language') || 'en'
  
  // Translation helper function
  const t = (key: keyof typeof UI_TRANSLATIONS.en) => {
    return UI_TRANSLATIONS[language as keyof typeof UI_TRANSLATIONS]?.[key] || UI_TRANSLATIONS.en[key]
  }

  useEffect(() => {
    loadInterviewData()
  }, [])

  const loadInterviewData = async () => {
    try {
      // First try to get interview ID from URL params
      const interviewId = searchParams.get('interviewId');
      if (interviewId) {
        console.log('üìä Loading interview by ID:', interviewId);
        await loadInterviewById(interviewId);
        return;
      }

      // Then try localStorage for recent interview
      const storedData = localStorage.getItem('interviewData');
      if (storedData) {
        const interviewData = JSON.parse(storedData);
        console.log('üìä Loading interview from localStorage:', interviewData);
        
        // Validate we have actual interview answers
        if (interviewData.answers && interviewData.answers.length > 0) {
          await analyzeInterview(interviewData);
        } else {
          setError('No interview answers found. Please complete an interview first.');
          setIsLoading(false);
        }
      } else {
        // Try URL params as backup
        const answersParam = searchParams.get('answers');
        if (answersParam) {
          const interviewData = JSON.parse(decodeURIComponent(answersParam));
          if (interviewData.answers && interviewData.answers.length > 0) {
            await analyzeInterview(interviewData);
          } else {
            setError('No valid interview data found.');
            setIsLoading(false);
          }
        } else {
          // No interview data available
          setError('No interview data found. Please complete an interview first.');
          setIsLoading(false);
        }
      }
    } catch (err) {
      console.error('‚ùå Error loading interview data:', err);
      setError('Failed to load interview data. Please try again.');
      setIsLoading(false);
    }
  }

  const loadInterviewById = async (interviewId: string) => {
    try {
      const response = await fetch(`/api/interview-database?action=get&interviewId=${interviewId}`);
      const result = await response.json();

      if (result.success && result.interview) {
        const interview = result.interview;
        console.log('‚úÖ Interview loaded from database:', interview.language || 'en');
        
        // If analysis already exists, use it
        if (interview.analysis) {
          setAnalysis(interview.analysis);
          setIsLoading(false);
          console.log('‚úÖ Using existing analysis from database');
        } else {
          // Analyze the interview using real-time API
          await analyzeInterview(interview);
        }
      } else {
        console.error('‚ùå Interview not found in database:', result.error);
        setError(result.error || 'Interview not found');
        setIsLoading(false);
      }
    } catch (error) {
      console.error('‚ùå Failed to load interview from database:', error);
      setError('Failed to load interview data from database');
      setIsLoading(false);
    }
  }

  const analyzeInterview = async (interviewData: any) => {
    try {
      setIsLoading(true);
      setError(null);
      console.log('ü§ñ Starting REAL-TIME interview analysis with data:', interviewData);

      // Ensure we have the language and actual questions/answers
      const language = interviewData.language || 'en';
      const answers = interviewData.answers || [];
      const role = interviewData.role || 'Software Engineer';
      const experience = interviewData.experience || '2-3 years';

      console.log(`üåç Analysis Language: ${language}`);
      console.log(`üìù Analyzing ${answers.length} actual answers`);

      // Create analysis request with actual interview data
      const analysisRequest = {
        ...interviewData,
        language,
        role,
        experience,
        answers,
        isRealTime: true, // Flag to ensure real-time analysis is used
        useOpenRouter: true, // Explicitly request OpenRouter API
        forceRealTime: true, // New flag to never use fallback
        analysisInstructions: `Analyze this interview in ${language} language. Provide feedback in the same language the candidate used.`
      };

      // Always use real-time AI analysis with OpenRouter API
      console.log('üöÄ Starting REAL-TIME AI analysis using OpenRouter...');
      const response = await fetch('/api/enhanced-interview-analysis', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Use-OpenRouter': 'true', // Additional header to prioritize OpenRouter
          'X-Real-Time-Analysis': 'true', // Mark as real-time request
          'X-Force-Real-Time': 'true' // Never use fallback
        },
        body: JSON.stringify(analysisRequest)
      });

      if (!response.ok) {
        throw new Error(`Real-time analysis failed with status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ Enhanced AI Analysis result:', result);

      if (result.success && result.analysis) {
        // Validate that the analysis is in the correct language
        const analysisText = JSON.stringify(result.analysis);
        let isCorrectLanguage = true;
        
        if (language === 'hi') {
          isCorrectLanguage = analysisText.includes('‡§∏') || analysisText.includes('‡§™‡•ç‡§∞') || analysisText.includes('‡§Ö');
          if (!isCorrectLanguage) {
            console.warn('‚ö†Ô∏è Analysis not in Hindi, trying again...');
            throw new Error('Analysis language mismatch - Hindi expected');
          }
        } else if (language === 'es') {
          isCorrectLanguage = analysisText.includes('ci√≥n') || analysisText.includes('ente') || analysisText.includes('an√°lisis');
          if (!isCorrectLanguage) {
            console.warn('‚ö†Ô∏è Analysis not in Spanish, trying again...');
            throw new Error('Analysis language mismatch - Spanish expected');
          }
        }
        
        if (isCorrectLanguage) {
          // Use real-time OpenRouter AI analysis only
          setAnalysis(result.analysis);
          setIsRealTimeAnalysis(true);
          console.log(`‚úÖ Using ${result.source || 'OpenRouter'} REAL-TIME AI analysis in ${language} language`);
          console.log('üî• Analysis provider:', result.provider || 'OpenRouter');
          console.log('üìä Analysis type:', result.isRealTime ? 'Real-time' : 'Static');
          
          // Save analysis to database
          await saveAnalysisToDatabase(interviewData, result.analysis);
        } else {
          throw new Error('Analysis language mismatch');
        }
      } else if (!result.success) {
        throw new Error(result.error || 'Real-time analysis failed');
      } else {
        throw new Error('Invalid analysis data returned');
      }
    } catch (err) {
      console.error('‚ùå Real-time analysis error:', err);
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      
      // Display error to user - NO FALLBACKS
      setError(`Real-time AI analysis failed: ${errorMessage}. Please check your internet connection and try again.`);
      setIsRealTimeAnalysis(false);
    } finally {
      setIsLoading(false);
    }
  };

  // Save analysis to database for persistence
  const saveAnalysisToDatabase = async (interviewData: any, analysis: any) => {
    try {
      const userId = localStorage.getItem('userId') || `user_${Date.now()}`;
      localStorage.setItem('userId', userId); // Store for future use
      
      // Save interview with analysis
      const response = await fetch('/api/interview-database', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save',
          userId,
          role: interviewData.role,
          experience: interviewData.experience,
          language: interviewData.language,
          answers: interviewData.answers,
          analysis,
          timestamp: interviewData.timestamp,
          interviewDuration: interviewData.interviewDuration,
          isRealTimeAnalysis: true // Mark as real-time analysis
        })
      });

      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ Interview saved to database:', result.interviewId);
        localStorage.setItem('lastInterviewId', result.interviewId);
      } else {
        console.warn('‚ö†Ô∏è Failed to save to database:', result.error);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Database save error:', error);
      // Continue without failing - database is optional
    }
  };

  // Try analysis again
  const handleRetryAnalysis = async () => {
    // Get stored interview data
    const storedData = localStorage.getItem('interviewData');
    if (storedData) {
      try {
        const interviewData = JSON.parse(storedData);
        await analyzeInterview(interviewData);
      } catch (error) {
        console.error('Failed to retry analysis:', error);
        setError('Failed to retry analysis. Please try again.');
      }
    } else {
      setError('No interview data found to analyze.');
    }
  };

  // Handle sharing results
  const shareResults = async () => {
    if (!analysis) return;
    
    try {
      await navigator.share({
        title: 'My Interview Analysis Results',
        text: `I scored ${analysis.overallScore}% in my AI interview analysis!`,
        url: window.location.href
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };
  
  // Handle downloading results as PDF
  const downloadReport = async () => {
    if (!analysis) return;
    
    try {
      // Create a simple report data structure
      const reportData = {
        title: 'Interview Analysis Report',
        date: new Date().toLocaleDateString(),
        overallScore: analysis.overallScore,
        statistics: analysis.statistics,
        strengths: analysis.strengths,
        improvements: analysis.improvements,
        recommendations: analysis.recommendations,
        questions: analysis.questionAnalysis
      };
      
      // Download as JSON for now (PDF generation would require additional libraries)
      const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(reportData));
      const downloadAnchorNode = document.createElement('a');
      downloadAnchorNode.setAttribute("href", dataStr);
      downloadAnchorNode.setAttribute("download", "interview-analysis-report.json");
      document.body.appendChild(downloadAnchorNode);
      downloadAnchorNode.click();
      downloadAnchorNode.remove();
    } catch (error) {
      console.error('Error downloading report:', error);
    }
  };

  // Return loading state
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50 dark:bg-gray-900">
        <Card className="w-full max-w-2xl">
          <CardHeader>
            <CardTitle className="text-center">{t('loading')}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-col items-center space-y-4">
              <Brain size={64} className="text-primary animate-pulse" />
              <Progress value={isLoading ? 90 : 100} className="w-full" />
              <p className="text-center text-muted-foreground">
                {t('realTimeAnalysis')}...
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Return error state with retry option
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50 dark:bg-gray-900">
        <Card className="w-full max-w-2xl">
          <CardHeader>
            <CardTitle className="text-center text-red-500">{t('apiError')}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-col items-center space-y-4">
              <AlertCircle size={64} className="text-red-500" />
              <p className="text-center">{error}</p>
              <Button onClick={handleRetryAnalysis}>
                {t('tryAgain')}
              </Button>
              <Link href="/">
                <Button variant="outline">
                  <Home className="mr-2 h-4 w-4" />
                  {t('homeButton')}
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Return no data state
  if (!analysis) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50 dark:bg-gray-900">
        <Card className="w-full max-w-2xl">
          <CardHeader>
            <CardTitle className="text-center">{t('interviewSummary')}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-col items-center space-y-4">
              <AlertCircle size={64} className="text-yellow-500" />
              <p className="text-center">
                No interview analysis available. Please complete an interview first.
              </p>
              <Link href="/">
                <Button>
                  <Home className="mr-2 h-4 w-4" />
                  {t('homeButton')}
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Show selected question details or first question if none selected
  const currentQuestion = selectedQuestion || (analysis.questionAnalysis.length > 0 ? analysis.questionAnalysis[0] : null);
  
  // Calculate performance level
  const getPerformanceLevel = (score: number) => {
    if (score >= 85) return { text: t('excellent'), color: 'text-green-600' };
    if (score >= 70) return { text: t('good'), color: 'text-blue-600' };
    return { text: t('needsImprovement'), color: 'text-yellow-600' };
  };
  
  const performanceLevel = getPerformanceLevel(analysis.overallScore);

  return (
    <div className="container p-4">
      <div className="flex flex-col gap-4">
        {/* Header */}
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">{t('interviewSummary')}</h1>
          <Link href="/">
            <Button variant="outline">
              <Home className="mr-2 h-4 w-4" />
              {t('homeButton')}
            </Button>
          </Link>
        </div>
        
        {/* Real-time analysis badge */}
        <div className="flex justify-center mb-2">
          <Badge className="bg-blue-500 hover:bg-blue-600">
            {t('realTimeAnalysis')}
          </Badge>
        </div>
        
        {/* Tabs for navigation */}
        <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-2">
            <TabsTrigger value="overview">
              <Brain className="mr-2 h-4 w-4" />
              {t('overallScore')}
            </TabsTrigger>
            <TabsTrigger value="questions">
              <MessageSquare className="mr-2 h-4 w-4" />
              {t('questionAnalysis')}
            </TabsTrigger>
          </TabsList>
          
          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Score Card */}
              <Card className="col-span-1">
                <CardHeader className="pb-2">
                  <CardTitle className="text-center">
                    {t('overallScore')}
                  </CardTitle>
                </CardHeader>
                <CardContent className="flex flex-col items-center">
                  <div className="flex items-center justify-center w-24 h-24 rounded-full bg-primary/10 mb-2">
                    <span className="text-3xl font-bold text-primary">
                      {analysis.overallScore}%
                    </span>
                  </div>
                  <Badge className={`${performanceLevel.color} mt-2`}>
                    {performanceLevel.text}
                  </Badge>
                </CardContent>
              </Card>
              
              {/* Statistics Card */}
              <Card className="col-span-1">
                <CardHeader className="pb-2">
                  <CardTitle>
                    <BarChart3 className="inline-block mr-2 h-5 w-5" />
                    {t('performance')}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">{t('totalQuestions')}</span>
                    <span>{analysis.statistics.totalQuestions}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">{t('totalTime')}</span>
                    <span>{analysis.statistics.totalInterviewTime}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">{t('avgScore')}</span>
                    <span>{analysis.overallScore}%</span>
                  </div>
                </CardContent>
              </Card>
              
              {/* Actions Card */}
              <Card className="col-span-1">
                <CardHeader className="pb-2">
                  <CardTitle>
                    <Target className="inline-block mr-2 h-5 w-5" />
                    Actions
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  <Button onClick={shareResults} className="w-full flex items-center" variant="outline">
                    <Share2 className="mr-2 h-4 w-4" />
                    {t('shareResults')}
                  </Button>
                  <Button onClick={downloadReport} className="w-full flex items-center" variant="outline">
                    <Download className="mr-2 h-4 w-4" />
                    {t('downloadReport')}
                  </Button>
                  <Link href="/working-interview">
                    <Button className="w-full flex items-center" variant="default">
                      <Clock className="mr-2 h-4 w-4" />
                      {t('retakeInterview')}
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            </div>
            
            {/* Strengths and Improvements */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
              {/* Strengths */}
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle>
                    <CheckCircle className="inline-block mr-2 h-5 w-5 text-green-600" />
                    {t('strengths')}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {analysis.strengths.map((strength, index) => (
                      <li key={index} className="flex items-start">
                        <CheckCircle className="h-5 w-5 text-green-600 mr-2 mt-0.5" />
                        <span>{strength}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
              
              {/* Improvements */}
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle>
                    <AlertCircle className="inline-block mr-2 h-5 w-5 text-yellow-600" />
                    {t('areasToImprove')}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {analysis.improvements.map((improvement, index) => (
                      <li key={index} className="flex items-start">
                        <AlertCircle className="h-5 w-5 text-yellow-600 mr-2 mt-0.5" />
                        <span>{improvement}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </div>
            
            {/* Recommendations */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>
                  <Lightbulb className="inline-block mr-2 h-5 w-5 text-amber-500" />
                  {t('suggestions')}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {analysis.recommendations.map((recommendation, index) => (
                    <li key={index} className="flex items-start">
                      <Lightbulb className="h-5 w-5 text-amber-500 mr-2 mt-0.5" />
                      <span>{recommendation}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Questions Tab */}
          <TabsContent value="questions" className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Question List */}
              <Card className="md:col-span-1">
                <CardHeader className="pb-2">
                  <CardTitle>Questions</CardTitle>
                </CardHeader>
                <CardContent className="p-0">
                  <div className="divide-y">
                    {analysis.questionAnalysis.map((question) => (
                      <div 
                        key={question.questionId}
                        className={`p-4 cursor-pointer hover:bg-muted transition-colors ${
                          selectedQuestion?.questionId === question.questionId ? 'bg-muted' : ''
                        }`}
                        onClick={() => setSelectedQuestion(question)}
                      >
                        <p className="font-medium truncate">{question.questionText}</p>
                        <div className="flex items-center mt-2">
                          <Progress value={question.score} className="h-2" />
                          <span className="ml-2 text-sm">{question.score}%</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              {/* Question Details */}
              <Card className="md:col-span-2">
                <CardHeader className="pb-2">
                  <CardTitle>
                    {currentQuestion ? (
                      <span className="line-clamp-2">{currentQuestion.questionText}</span>
                    ) : (
                      'Question Details'
                    )}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {currentQuestion ? (
                    <>
                      <div>
                        <h4 className="font-medium mb-1">{t('yourAnswer')}</h4>
                        <div className="p-3 bg-muted rounded-md">
                          <p>{currentQuestion.answerText}</p>
                        </div>
                      </div>
                      
                      {/* Scores */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                        <div>
                          <p className="text-sm text-muted-foreground">{t('technicalAccuracy')}</p>
                          <div className="flex items-center">
                            <Progress value={currentQuestion.technicalAccuracy} className="h-2 flex-1" />
                            <span className="ml-2 text-sm">{currentQuestion.technicalAccuracy}%</span>
                          </div>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">{t('communicationClarity')}</p>
                          <div className="flex items-center">
                            <Progress value={currentQuestion.communicationClarity} className="h-2 flex-1" />
                            <span className="ml-2 text-sm">{currentQuestion.communicationClarity}%</span>
                          </div>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">{t('completeness')}</p>
                          <div className="flex items-center">
                            <Progress value={currentQuestion.completeness} className="h-2 flex-1" />
                            <span className="ml-2 text-sm">{currentQuestion.completeness}%</span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Feedback */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h4 className="font-medium flex items-center">
                            <CheckCircle className="h-4 w-4 text-green-600 mr-1" />
                            {t('strengths')}
                          </h4>
                          <ul className="list-disc list-inside pl-2 text-sm">
                            {currentQuestion.strengths.map((strength, index) => (
                              <li key={index}>{strength}</li>
                            ))}
                          </ul>
                        </div>
                        <div>
                          <h4 className="font-medium flex items-center">
                            <AlertCircle className="h-4 w-4 text-yellow-600 mr-1" />
                            {t('areasToImprove')}
                          </h4>
                          <ul className="list-disc list-inside pl-2 text-sm">
                            {currentQuestion.weaknesses.map((weakness, index) => (
                              <li key={index}>{weakness}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                      
                      {/* Expected Answer */}
                      <div>
                        <h4 className="font-medium mb-1 flex items-center">
                          <Eye className="h-4 w-4 mr-1" />
                          {t('expectedAnswer')}
                        </h4>
                        <div className="p-3 bg-primary/5 rounded-md">
                          <p className="text-sm">{currentQuestion.expectedAnswer}</p>
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="text-center p-8 text-muted-foreground">
                      Select a question to view details
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
