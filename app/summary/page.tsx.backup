"use client"

import { useState, useEffect } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { 
  Brain, 
  TrendingUp, 
  MessageSquare, 
  CheckCircle, 
  AlertCircle, 
  Target, 
  Mail, 
  Share2, 
  Download,
  Eye,
  BarChart3,
  Award,
  Clock,
  User,
  Lightbulb,
  Home,
  FileText,
  Bot
} from "lucide-react"
import Link from "next/link"

interface QuestionAnalysis {
  questionId: string;
  questionText: string;
  answerText: string;
  score: number;
  strengths: string[];
  weaknesses: string[];
  suggestions: string[];
  expectedAnswer: string;
  technicalAccuracy: number;
  communicationClarity: number;
  completeness: number;
  followUpGenerated?: boolean;
  answerType: 'technical' | 'behavioral' | 'resume-based' | 'follow-up';
}

interface AnalysisData {
  overallScore: number;
  breakdown: {
    technical: number;
    communication: number;
    completeness: number;
    confidence: number;
  };
  questionAnalysis: QuestionAnalysis[];
  strengths: string[];
  improvements: string[];
  recommendations: string[];
  statistics: {
    totalQuestions: number;
    averageResponseLength: number;
    totalInterviewTime: string;
    keywordsUsed: number;
    expectedKeywords: number;
    confidenceLevel: string;
  };
  // New multilingual support
  language: string;
  translations: {
    [key: string]: string;
  };
  // Real-time feedback
  realTimeFeedback: {
    speakingPace: string;
    confidenceLevel: string;
    technicalDepth: string;
    communicationStyle: string;
  };
  // Resume-based analysis
  resumeMatch: {
    experienceAlignment: number;
    skillsValidation: number;
    projectRelevance: number;
    overallFit: number;
  };
}

export default function SummaryPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [analysis, setAnalysis] = useState<AnalysisData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState("overview")
  const [selectedQuestion, setSelectedQuestion] = useState<QuestionAnalysis | null>(null)
  const [showAllAnswers, setShowAllAnswers] = useState(false)
  const [emailAddress, setEmailAddress] = useState("")
  const [isSharing, setIsSharing] = useState(false)

  // Multilingual translations
  const getTranslations = (language: string) => {
    const translations = {
      'hi': {
        title: 'साक्षात्कार सारांश',
        overallScore: 'कुल स्कोर',
        technicalSkills: 'तकनीकी कौशल',
        communication: 'संवाद कौशल',
        completeness: 'पूर्णता',
        confidence: 'आत्मविश्वास',
        strengths: 'मजबूत बिंदु',
        improvements: 'सुधार के क्षेत्र',
        recommendations: 'सुझाव',
        questionAnalysis: 'प्रश्न विश्लेषण',
        statistics: 'आंकड़े',
        totalQuestions: 'कुल प्रश्न',
        averageResponseLength: 'औसत उत्तर लंबाई',
        totalTime: 'कुल समय',
        confidenceLevel: 'आत्मविश्वास स्तर',
        emailReport: 'रिपोर्ट ईमेल करें',
        downloadReport: 'रिपोर्ट डाउनलोड करें',
        backToHome: 'होम पर वापस जाएं',
        realTimeFeedback: 'वास्तविक समय प्रतिक्रिया',
        resumeMatch: 'रिज्यूमे मिलान',
        experienceAlignment: 'अनुभव संरेखण',
        skillsValidation: 'कौशल सत्यापन',
        projectRelevance: 'परियोजना प्रासंगिकता',
        overallFit: 'समग्र फिट'
      },
      'en': {
        title: 'Interview Summary',
        overallScore: 'Overall Score',
        technicalSkills: 'Technical Skills',
        communication: 'Communication',
        completeness: 'Completeness',
        confidence: 'Confidence',
        strengths: 'Strengths',
        improvements: 'Areas for Improvement',
        recommendations: 'Recommendations',
        questionAnalysis: 'Question Analysis',
        statistics: 'Statistics',
        totalQuestions: 'Total Questions',
        averageResponseLength: 'Average Response Length',
        totalTime: 'Total Time',
        confidenceLevel: 'Confidence Level',
        emailReport: 'Email Report',
        downloadReport: 'Download Report',
        backToHome: 'Back to Home',
        realTimeFeedback: 'Real-time Feedback',
        resumeMatch: 'Resume Match',
        experienceAlignment: 'Experience Alignment',
        skillsValidation: 'Skills Validation',
        projectRelevance: 'Project Relevance',
        overallFit: 'Overall Fit'
      }
    }
    return translations[language as keyof typeof translations] || translations['en']
  }

  useEffect(() => {
    loadInterviewData()
  }, [])

  const loadInterviewData = async () => {
    try {
      // ONLY load actual interview data - no demo fallback
      const storedData = localStorage.getItem('interviewData')
      if (storedData) {
        const interviewData = JSON.parse(storedData)
        console.log('📊 Loading real interview data:', interviewData)
        
        // Validate we have actual interview answers
        if (interviewData.answers && interviewData.answers.length > 0) {
          await analyzeInterview(interviewData)
        } else {
          setError('No interview answers found. Please complete an interview first.')
          setIsLoading(false)
        }
      } else {
        // Try URL params as backup
        const answersParam = searchParams.get('answers')
        if (answersParam) {
          const interviewData = JSON.parse(decodeURIComponent(answersParam))
          if (interviewData.answers && interviewData.answers.length > 0) {
            await analyzeInterview(interviewData)
          } else {
            setError('No valid interview data found.')
            setIsLoading(false)
          }
        } else {
          // No interview data available
          setError('No interview data found. Please complete an interview first.')
          setIsLoading(false)
        }
      }
    } catch (err) {
      console.error('❌ Error loading interview data:', err)
      setError('Failed to load interview data. Please try again.')
      setIsLoading(false)
    }
  }

  const analyzeInterview = async (interviewData: any) => {
    try {
      setIsLoading(true)
      console.log('🤖 Starting REAL interview analysis with data:', interviewData)

      // Ensure we have the language and actual questions/answers
      const language = interviewData.language || 'en'
      const answers = interviewData.answers || []
      const role = interviewData.role || 'Software Engineer'
      const experience = interviewData.experience || '2-3 years'

      console.log(`🌍 Analysis Language: ${language}`)
      console.log(`📝 Analyzing ${answers.length} actual answers`)

      // Create analysis request with actual interview data
      const analysisRequest = {
        ...interviewData,
        language,
        role,
        experience,
        answers,
        analysisInstructions: `Analyze this interview in ${language} language. Provide feedback in the same language the candidate used.`
      }

      // Try enhanced AI analysis first
      const response = await fetch('/api/enhanced-interview-analysis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(analysisRequest)
      })

      if (!response.ok) {
        throw new Error(`Analysis failed: ${response.status}`)
      }

      const result = await response.json()
      console.log('✅ Enhanced AI Analysis result:', result)

      if (result.success && result.analysis) {
        // Use enhanced AI analysis
        setAnalysis(result.analysis)
        console.log(`✅ Using ${result.source} AI analysis based on actual interview`)
        
        // Save analysis to database
        await saveAnalysisToDatabase(interviewData, result.analysis)
      } else {
        throw new Error('Enhanced analysis failed')
      }
    } catch (err) {
      console.error('❌ Analysis error:', err)
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'
      setError(`AI analysis failed: ${errorMessage}`)
      
      // Create basic analysis from real data as last resort
      const basicAnalysis = await createDynamicAnalysis(interviewData)
      setAnalysis(basicAnalysis)
    } finally {
      setIsLoading(false)
    }
  }

  // Save analysis to database for persistence
  const saveAnalysisToDatabase = async (interviewData: any, analysis: any) => {
    try {
      const userId = localStorage.getItem('userId') || `user_${Date.now()}`
      localStorage.setItem('userId', userId) // Store for future use
      
      // Save interview with analysis
      const response = await fetch('/api/interview-database', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'save',
          userId,
          role: interviewData.role,
          experience: interviewData.experience,
          language: interviewData.language,
          answers: interviewData.answers,
          analysis,
          timestamp: interviewData.timestamp,
          interviewDuration: interviewData.interviewDuration
        })
      })

      const result = await response.json()
      if (result.success) {
        console.log('✅ Interview saved to database:', result.interviewId)
        localStorage.setItem('lastInterviewId', result.interviewId)
      } else {
        console.warn('⚠️ Failed to save to database:', result.error)
      }
    } catch (error) {
      console.warn('⚠️ Database save error:', error)
      // Continue without failing - database is optional
    }
  }

  // Create REAL AI-powered dynamic analysis based on actual interview data
  const createDynamicAnalysis = async (interviewData: any): Promise<AnalysisData> => {
    const answers = interviewData.answers || []
    const language = interviewData.language || 'en'
    const role = interviewData.role || 'Software Engineer'
    const experience = interviewData.experience || '2-3 years'
    
    console.log('🤖 Creating REAL AI-powered dynamic analysis - calling AI service')
    
    try {
      // First try to get real AI analysis
      const aiResponse = await fetch('/api/enhanced-interview-analysis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...interviewData,
          forceRealAnalysis: true,
          bypassCache: true
        })
      });

      if (aiResponse.ok) {
        const aiResult = await aiResponse.json();
        if (aiResult.success && aiResult.analysis) {
          console.log('✅ Got REAL AI analysis for summary');
          return aiResult.analysis;
        }
      }
    } catch (error) {
      console.warn('⚠️ AI analysis failed, using advanced local analysis');
    }

    // Advanced local analysis with real computation (not static)
    const questionAnalysis: QuestionAnalysis[] = await Promise.all(
      answers.map(async (answer: any, index: number) => {
        const answerText = answer.answerText || ''
        const questionText = answer.questionText || ''
        
        // Advanced AI-like scoring
        const metrics = analyzeAnswerAdvanced(answerText, questionText, language, role);
        
        return {
          questionId: answer.questionId || `q${index + 1}`,
          questionText: questionText,
          answerText: answerText,
          score: metrics.score,
          strengths: metrics.strengths,
          weaknesses: metrics.weaknesses,
          suggestions: metrics.suggestions,
          expectedAnswer: metrics.expectedAnswer,
          technicalAccuracy: metrics.technicalAccuracy,
          communicationClarity: metrics.communicationClarity,
          completeness: metrics.completeness
        }
      })
    )

    // Real-time computation of overall scores
    const overallScore = questionAnalysis.length > 0 
      ? Math.round(questionAnalysis.reduce((sum, q) => sum + q.score, 0) / questionAnalysis.length)
      : 70

    // Dynamic strengths and improvements based on actual performance
    const overallStrengths = generateDynamicStrengths(questionAnalysis, language);
    const overallImprovements = generateDynamicImprovements(questionAnalysis, language);
    const dynamicRecommendations = generateDynamicRecommendations(questionAnalysis, role, language);

    const startTime = interviewData.startTime ? new Date(interviewData.startTime) : new Date(Date.now() - 900000)
    const endTime = interviewData.endTime ? new Date(interviewData.endTime) : null
    let interviewDuration = '15m 00s'
    
    if (startTime && endTime) {
      const durationMs = endTime.getTime() - startTime.getTime()
      const minutes = Math.floor(durationMs / 60000)
      const seconds = Math.floor((durationMs % 60000) / 1000)
      interviewDuration = `${minutes}m ${seconds.toString().padStart(2, '0')}s`
    }

    return {
      overallScore,
      breakdown: {
        technical: Math.round((questionAnalysis.reduce((sum, q) => sum + q.technicalAccuracy, 0) / questionAnalysis.length) || 70),
        communication: Math.round((questionAnalysis.reduce((sum, q) => sum + q.communicationClarity, 0) / questionAnalysis.length) || 75),
        completeness: Math.round((questionAnalysis.reduce((sum, q) => sum + q.completeness, 0) / questionAnalysis.length) || 70),
        confidence: overallScore
      },
      questionAnalysis,
      strengths: overallStrengths,
      improvements: overallImprovements,
      recommendations: dynamicRecommendations,
      statistics: {
        totalQuestions: answers.length,
        averageResponseLength: Math.round(answers.reduce((sum: number, a: any) => sum + (a.answerText?.split(' ').length || 0), 0) / answers.length || 0),
        totalInterviewTime: interviewDuration,
        keywordsUsed: questionAnalysis.reduce((sum, q) => sum + (q.answerText.split(' ').length || 0), 0),
        expectedKeywords: Math.max(30, answers.length * 6),
        confidenceLevel: overallScore >= 85 ? (language === 'hi' ? 'उच्च' : 'High') : 
                        overallScore >= 70 ? (language === 'hi' ? 'अच्छा' : 'Good') : 
                        (language === 'hi' ? 'सुधार की आवश्यकता' : 'Needs Improvement')
      },
      language: language,
      translations: getTranslations(language),
      realTimeFeedback: {
        speakingPace: Math.round(answers.reduce((sum: number, a: any) => sum + (a.answerText?.split(' ').length || 0), 0) / answers.length) > 60 ? 
          (language === 'hi' ? 'अच्छी गति' : 'Good pace') : 
          (language === 'hi' ? 'धीमी गति' : 'Slow pace'),
        confidenceLevel: overallScore >= 80 ? 
          (language === 'hi' ? 'आत्मविश्वास से भरपूर' : 'Confident') : 
          (language === 'hi' ? 'और अभ्यास की जरूरत' : 'Needs more practice'),
        technicalDepth: Math.round((questionAnalysis.reduce((sum, q) => sum + q.technicalAccuracy, 0) / questionAnalysis.length) || 70) >= 75 ? 
          (language === 'hi' ? 'गहरी तकनीकी समझ' : 'Deep technical understanding') : 
          (language === 'hi' ? 'तकनीकी ज्ञान में सुधार चाहिए' : 'Technical knowledge needs improvement'),
        communicationStyle: Math.round(answers.reduce((sum: number, a: any) => sum + (a.answerText?.split(' ').length || 0), 0) / answers.length) > 40 ? 
          (language === 'hi' ? 'विस्तृत उत्तर' : 'Detailed answers') : 
          (language === 'hi' ? 'संक्षिप्त उत्तर' : 'Concise answers')
      },
      resumeMatch: {
        experienceAlignment: Math.round(overallScore * 0.9),
        skillsValidation: Math.round((questionAnalysis.reduce((sum, q) => sum + q.technicalAccuracy, 0) / questionAnalysis.length) * 0.95),
        projectRelevance: Math.round(overallScore * 0.85),
        overallFit: Math.round((overallScore + (questionAnalysis.reduce((sum, q) => sum + q.technicalAccuracy, 0) / questionAnalysis.length)) / 2)
      }
    }
  }
    
    // Analyze overall performance patterns
    const avgWordsPerAnswer = questionAnalysis.length > 0 ? totalWords / questionAnalysis.length : 0
    const highScoringAnswers = questionAnalysis.filter(q => q.score >= 80).length
    const lowScoringAnswers = questionAnalysis.filter(q => q.score < 60).length
    const hasConsistentQuality = questionAnalysis.every(q => Math.abs(q.score - avgScore) < 20)
    
    if (language === 'hi') {
      // Hindi feedback
      if (avgWordsPerAnswer > 50) overallStrengths.push('विस्तृत और व्यापक उत्तर देने में अच्छे हैं')
      if (highScoringAnswers > questionAnalysis.length / 2) overallStrengths.push('अधिकांश प्रश्नों में मजबूत प्रदर्शन')
      if (hasConsistentQuality) overallStrengths.push('सभी उत्तरों में निरंतरता बनाए रखी')
      if (technicalScore > avgScore) overallStrengths.push('तकनीकी प्रश्नों में विशेष रूप से अच्छा प्रदर्शन')
      
      if (avgWordsPerAnswer < 30) overallImprovements.push('उत्तरों में अधिक विवरण जोड़ें')
      if (lowScoringAnswers > 2) overallImprovements.push('कम स्कोर वाले प्रश्नों पर काम करें')
      if (!hasConsistentQuality) overallImprovements.push('सभी उत्तरों में एकरूपता लाएं')
      
      dynamicRecommendations.push(`${role} भूमिका के लिए विशिष्ट तकनीकी कौशल पर ध्यान दें`)
      dynamicRecommendations.push('मॉक इंटरव्यू का अभ्यास करें')
      if (avgScore < 75) dynamicRecommendations.push('STAR विधि का अधिक अभ्यास करें')
    } else {
      // English feedback  
      if (avgWordsPerAnswer > 50) overallStrengths.push('Provides detailed and comprehensive answers')
      if (highScoringAnswers > questionAnalysis.length / 2) overallStrengths.push('Strong performance on majority of questions')
      if (hasConsistentQuality) overallStrengths.push('Maintains consistency across all answers')
      if (technicalScore > avgScore) overallStrengths.push('Particularly strong in technical questions')
      
      if (avgWordsPerAnswer < 30) overallImprovements.push('Provide more detailed responses')
      if (lowScoringAnswers > 2) overallImprovements.push('Focus on improving weaker question areas')
      if (!hasConsistentQuality) overallImprovements.push('Work on maintaining consistent answer quality')
      
      dynamicRecommendations.push(`Focus on specific technical skills for ${role} role`)
      dynamicRecommendations.push('Practice mock interviews with similar question types')
      if (avgScore < 75) dynamicRecommendations.push('Practice the STAR method more extensively')
    }
    
    // Ensure we have feedback
    if (overallStrengths.length === 0) {
      overallStrengths.push(language === 'hi' ? 'साक्षात्कार पूरा करने के लिए प्रतिबद्धता दिखाई' : 'Demonstrated commitment by completing the interview')
    }
    if (overallImprovements.length === 0) {
      overallImprovements.push(language === 'hi' ? 'निरंतर अभ्यास से और भी बेहतर प्रदर्शन कर सकते हैं' : 'Can achieve even better performance with continued practice')
    }

    // Calculate real interview duration
    const startTime = interviewData.startTime ? new Date(interviewData.startTime) : null
    const endTime = interviewData.endTime ? new Date(interviewData.endTime) : null
    let interviewDuration = '15m 00s'
    
    if (startTime && endTime) {
      const durationMs = endTime.getTime() - startTime.getTime()
      const minutes = Math.floor(durationMs / 60000)
      const seconds = Math.floor((durationMs % 60000) / 1000)
      interviewDuration = `${minutes}m ${seconds.toString().padStart(2, '0')}s`
    }

    return {
      overallScore: avgScore,
      breakdown: {
        technical: technicalScore,
        communication: Math.round(avgScore * (avgWordsPerAnswer > 40 ? 1.1 : 0.9)),
        completeness: Math.round(questionAnalysis.reduce((sum, q) => sum + q.completeness, 0) / questionAnalysis.length),
        confidence: Math.round(avgScore * (hasConsistentQuality ? 1.0 : 0.85))
      },
      questionAnalysis,
      strengths: overallStrengths,
      improvements: overallImprovements,
      recommendations: dynamicRecommendations,
      statistics: {
        totalQuestions: answers.length,
        averageResponseLength: Math.round(avgWordsPerAnswer),
        totalInterviewTime: interviewDuration,
        keywordsUsed: totalWords > 100 ? Math.floor(totalWords / 10) : Math.floor(totalWords / 5),
        expectedKeywords: Math.max(30, answers.length * 6),
        confidenceLevel: avgScore >= 85 ? (language === 'hi' ? 'उच्च' : 'High') : 
                        avgScore >= 70 ? (language === 'hi' ? 'अच्छा' : 'Good') : 
                        (language === 'hi' ? 'सुधार की आवश्यकता' : 'Needs Improvement')
      },
      // Multilingual support
      language: language,
      translations: getTranslations(language),
      // Real-time feedback
      realTimeFeedback: {
        speakingPace: avgWordsPerAnswer > 60 ? 
          (language === 'hi' ? 'अच्छी गति' : 'Good pace') : 
          (language === 'hi' ? 'धीमी गति' : 'Slow pace'),
        confidenceLevel: avgScore >= 80 ? 
          (language === 'hi' ? 'आत्मविश्वास से भरपूर' : 'Confident') : 
          (language === 'hi' ? 'और अभ्यास की जरूरत' : 'Needs more practice'),
        technicalDepth: technicalScore >= 75 ? 
          (language === 'hi' ? 'गहरी तकनीकी समझ' : 'Deep technical understanding') : 
          (language === 'hi' ? 'तकनीकी ज्ञान में सुधार चाहिए' : 'Technical knowledge needs improvement'),
        communicationStyle: avgWordsPerAnswer > 40 ? 
          (language === 'hi' ? 'विस्तृत उत्तर' : 'Detailed answers') : 
          (language === 'hi' ? 'संक्षिप्त उत्तर' : 'Concise answers')
      },
      // Resume-based analysis (placeholder - will be enhanced with resume data)
      resumeMatch: {
        experienceAlignment: Math.round(avgScore * 0.9),
        skillsValidation: Math.round(technicalScore * 0.95),
        projectRelevance: Math.round(avgScore * 0.85),
        overallFit: Math.round((avgScore + technicalScore) / 2)
      }
    }
  }

  // Advanced answer analysis function
  const analyzeAnswerAdvanced = (answerText: string, questionText: string, language: string, role: string) => {
    const words = answerText.split(' ');
    const wordCount = words.length;
    
    // Pattern matching for different aspects
    const hasExamples = /\b(example|instance|experience|project|when|time|once|during)\b/i.test(answerText);
    const hasTechnicalTerms = /\b(code|develop|implement|design|algorithm|database|API|framework|architecture|system|solution)\b/i.test(answerText);
    const hasQuantifiableResults = /\b(\d+%|\d+\s*(users|hours|days|months|years|people|times|percent)|improved|increased|decreased|reduced|achieved|delivered)\b/i.test(answerText);
    const hasMethodology = /\b(approach|method|process|strategy|plan|workflow|procedure)\b/i.test(answerText);
    const hasProblemsAndSolutions = /\b(challenge|problem|issue|solution|solve|resolve|overcome|address)\b/i.test(answerText);
    
    // Calculate dynamic score
    let score = 40; // Base
    score += Math.min(wordCount / 8, 20); // Length (max 20)
    score += hasExamples ? 15 : 0;
    score += hasTechnicalTerms ? 12 : 0;
    score += hasQuantifiableResults ? 18 : 0;
    score += hasMethodology ? 8 : 0;
    score += hasProblemsAndSolutions ? 10 : 0;
    
    // Cap the score
    score = Math.min(Math.max(score, 35), 95);
    
    // Generate dynamic feedback
    const strengths = [];
    const weaknesses = [];
    const suggestions = [];
    
    if (language === 'hi') {
      if (wordCount > 50) strengths.push('विस्तृत और व्यापक उत्तर दिया');
      if (hasExamples) strengths.push('व्यावहारिक उदाहरण शामिल किए');
      if (hasTechnicalTerms) strengths.push('उचित तकनीकी शब्दावली का प्रयोग');
      if (hasQuantifiableResults) strengths.push('मापने योग्य परिणाम प्रदान किए');
      if (hasMethodology) strengths.push('कार्यप्रणाली की व्याख्या की');
      if (hasProblemsAndSolutions) strengths.push('समस्या-समाधान दृष्टिकोण दिखाया');
      
      if (wordCount < 25) weaknesses.push('उत्तर बहुत संक्षिप्त - अधिक विवरण दें');
      if (!hasExamples) weaknesses.push('अपने अनुभव से उदाहरण जोड़ें');
      if (!hasTechnicalTerms && role.toLowerCase().includes('developer')) weaknesses.push('तकनीकी विवरण में वृद्धि करें');
      if (!hasQuantifiableResults) weaknesses.push('परिणामों को संख्या में व्यक्त करें');
      
      suggestions.push('STAR पद्धति का उपयोग करें (स्थिति, कार्य, कार्रवाई, परिणाम)');
      if (!hasExamples) suggestions.push('अपने पिछले प्रोजेक्ट्स के विशिष्ट उदाहरण दें');
      if (score < 70) suggestions.push('अधिक विस्तार और संरचना के साथ उत्तर दें');
    } else {
      if (wordCount > 50) strengths.push('Provided detailed and comprehensive response');
      if (hasExamples) strengths.push('Included practical examples from experience');
      if (hasTechnicalTerms) strengths.push('Used appropriate technical terminology');
      if (hasQuantifiableResults) strengths.push('Provided measurable outcomes and results');
      if (hasMethodology) strengths.push('Explained methodology and approach clearly');
      if (hasProblemsAndSolutions) strengths.push('Demonstrated problem-solving mindset');
      
      if (wordCount < 25) weaknesses.push('Response too brief - provide more detail');
      if (!hasExamples) weaknesses.push('Include specific examples from your experience');
      if (!hasTechnicalTerms && role.toLowerCase().includes('developer')) weaknesses.push('Add more technical depth and details');
      if (!hasQuantifiableResults) weaknesses.push('Quantify your achievements and impact');
      
      suggestions.push('Use the STAR method (Situation, Task, Action, Result)');
      if (!hasExamples) suggestions.push('Share specific examples from your past projects');
      if (score < 70) suggestions.push('Structure your answers with more detail and clarity');
    }
    
    return {
      score: Math.round(score),
      strengths,
      weaknesses,
      suggestions,
      expectedAnswer: language === 'hi' ? 
        `${role} की भूमिका के लिए विशिष्ट उदाहरण, तकनीकी गहराई और मापने योग्य परिणामों के साथ संरचित उत्तर।` :
        `Structured answer with specific examples, technical depth, and measurable results relevant to ${role} role.`,
      technicalAccuracy: Math.round(score * (hasTechnicalTerms ? 1.0 : 0.8)),
      communicationClarity: Math.round(score * (wordCount > 30 ? 1.0 : 0.85)),
      completeness: Math.round(score * (hasExamples && hasQuantifiableResults ? 1.0 : 0.9))
    };
  };

  // Generate dynamic overall strengths
  const generateDynamicStrengths = (questionAnalysis: QuestionAnalysis[], language: string): string[] => {
    const avgScore = questionAnalysis.reduce((sum, q) => sum + q.score, 0) / questionAnalysis.length;
    const strengths = [];
    
    if (language === 'hi') {
      if (avgScore >= 80) strengths.push('उत्कृष्ट समग्र प्रदर्शन');
      if (questionAnalysis.some(q => q.strengths.some(s => s.includes('उदाहरण')))) strengths.push('व्यावहारिक उदाहरणों का अच्छा उपयोग');
      if (questionAnalysis.some(q => q.strengths.some(s => s.includes('तकनीकी')))) strengths.push('मजबूत तकनीकी ज्ञान');
      if (questionAnalysis.some(q => q.strengths.some(s => s.includes('विस्तृत')))) strengths.push('विस्तृत और व्यापक उत्तर');
    } else {
      if (avgScore >= 80) strengths.push('Excellent overall interview performance');
      if (questionAnalysis.some(q => q.strengths.some(s => s.includes('example')))) strengths.push('Strong use of practical examples');
      if (questionAnalysis.some(q => q.strengths.some(s => s.includes('technical')))) strengths.push('Solid technical knowledge and expertise');
      if (questionAnalysis.some(q => q.strengths.some(s => s.includes('detailed')))) strengths.push('Comprehensive and detailed responses');
    }
    
    return strengths.length > 0 ? strengths : [language === 'hi' ? 'साक्षात्कार पूरा किया' : 'Completed the interview'];
  };

  // Generate dynamic improvements
  const generateDynamicImprovements = (questionAnalysis: QuestionAnalysis[], language: string): string[] => {
    const improvements = [];
    const avgScore = questionAnalysis.reduce((sum, q) => sum + q.score, 0) / questionAnalysis.length;
    
    if (language === 'hi') {
      if (avgScore < 70) improvements.push('समग्र उत्तर की गुणवत्ता में सुधार करें');
      if (questionAnalysis.some(q => q.weaknesses.some(w => w.includes('संक्षिप्त')))) improvements.push('अधिक विस्तृत उत्तर प्रदान करें');
      if (questionAnalysis.some(q => q.weaknesses.some(w => w.includes('उदाहरण')))) improvements.push('अधिक व्यावहारिक उदाहरण शामिल करें');
      if (questionAnalysis.some(q => q.weaknesses.some(w => w.includes('तकनीकी')))) improvements.push('तकनीकी ज्ञान की गहराई बढ़ाएं');
    } else {
      if (avgScore < 70) improvements.push('Improve overall response quality and depth');
      if (questionAnalysis.some(q => q.weaknesses.some(w => w.includes('brief')))) improvements.push('Provide more detailed and comprehensive answers');
      if (questionAnalysis.some(q => q.weaknesses.some(w => w.includes('example')))) improvements.push('Include more specific examples from experience');
      if (questionAnalysis.some(q => q.weaknesses.some(w => w.includes('technical')))) improvements.push('Strengthen technical knowledge and terminology');
    }
    
    return improvements.length > 0 ? improvements : [language === 'hi' ? 'निरंतर अभ्यास करें' : 'Continue practicing'];
  };

  // Generate dynamic recommendations
  const generateDynamicRecommendations = (questionAnalysis: QuestionAnalysis[], role: string, language: string): string[] => {
    const recommendations = [];
    
    if (language === 'hi') {
      recommendations.push('STAR पद्धति का अभ्यास करें');
      recommendations.push(`${role} के लिए विशिष्ट तकनीकी कौशल पर फोकस करें`);
      recommendations.push('मॉक इंटरव्यू का अधिक अभ्यास करें');
      if (questionAnalysis.some(q => q.score < 60)) recommendations.push('कमजोर क्षेत्रों में अतिरिक्त तैयारी करें');
    } else {
      recommendations.push('Practice the STAR method for behavioral questions');
      recommendations.push(`Focus on specific technical skills required for ${role}`);
      recommendations.push('Conduct more mock interviews for practice');
      if (questionAnalysis.some(q => q.score < 60)) recommendations.push('Dedicate extra preparation time to weaker areas');
    }
    
    return recommendations;
  };

  // No demo analysis - only real interview data

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600'
    if (score >= 60) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getScoreBgColor = (score: number) => {
    if (score >= 80) return 'bg-green-100 border-green-200'
    if (score >= 60) return 'bg-yellow-100 border-yellow-200'
    return 'bg-red-100 border-red-200'
  }

  const sendEmailReport = async () => {
    if (!emailAddress.trim() || !analysis) return
    
    setIsSharing(true)
    try {
      // Simulate email sending
      await new Promise(resolve => setTimeout(resolve, 2000))
      alert(`Interview analysis report sent to ${emailAddress}!`)
      setEmailAddress("")
    } catch (error) {
      alert('Failed to send email. Please try again.')
    } finally {
      setIsSharing(false)
    }
  }

  const shareResults = async () => {
    if (!analysis) return
    
    try {
      const shareData = {
        title: 'AI Interview Analysis Results',
        text: `I scored ${analysis.overallScore}% in my AI interview analysis!`,
        url: window.location.href
      }
      
      if (navigator.share) {
        await navigator.share(shareData)
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(`${shareData.text} ${shareData.url}`)
        alert('Results copied to clipboard!')
      }
    } catch (error) {
      console.error('Error sharing:', error)
    }
  }

  const downloadReport = () => {
    if (!analysis) return
    
    const reportData = {
      timestamp: new Date().toISOString(),
      overallScore: analysis.overallScore,
      breakdown: analysis.breakdown,
      statistics: analysis.statistics,
      strengths: analysis.strengths,
      improvements: analysis.improvements,
      recommendations: analysis.recommendations
    }
    
    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `interview-analysis-${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex items-center justify-center">
        <Card className="p-8 w-96">
          <div className="text-center">
            <div className="relative">
              <Brain className="h-16 w-16 text-blue-600 mx-auto mb-4 animate-pulse" />
              <div className="absolute -top-1 -right-1 w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                <div className="w-3 h-3 bg-blue-600 rounded-full animate-ping"></div>
              </div>
            </div>
            <h2 className="text-2xl font-bold mb-2">🤖 AI Analyzing Your Performance</h2>
            <p className="text-gray-600 mb-4">Generating comprehensive feedback and insights</p>
            <div className="space-y-2 text-sm text-gray-500">
              <div className="flex items-center justify-center space-x-2">
                <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                <span>Analyzing responses...</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <div className="w-2 h-2 bg-purple-600 rounded-full animate-bounce delay-100"></div>
                <span>Evaluating technical accuracy...</span>
              </div>
              <div className="flex items-center justify-center space-x-2">
                <div className="w-2 h-2 bg-green-600 rounded-full animate-bounce delay-200"></div>
                <span>Generating recommendations...</span>
              </div>
            </div>
          </div>
        </Card>
      </div>
    )
  }

  if (error || !analysis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center">
        <Card className="p-8 w-96 text-center">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-red-700 mb-2">No Interview Data Found</h2>
          <p className="text-red-600 mb-4">
            {error || 'Please complete an interview first to see your analysis.'}
          </p>
          <div className="space-y-3">
            <Link href="/working-interview">
              <Button className="w-full bg-blue-600 hover:bg-blue-700">
                <Brain className="h-4 w-4 mr-2" />
                Take Interview Now
              </Button>
            </Link>
            <Link href="/">
              <Button variant="outline" className="w-full">
                <Home className="h-4 w-4 mr-2" />
                Go to Home
              </Button>
            </Link>
          </div>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8 text-center">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <Award className="h-8 w-8 text-blue-600" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              AI Interview Analysis
            </h1>
          </div>
          <p className="text-gray-600 text-lg">Comprehensive AI-powered performance evaluation</p>
        </div>

        {/* Overall Score Card */}
        <Card className="mb-8 border-2 border-blue-200 shadow-lg">
          <CardContent className="p-8">
            <div className="flex items-center justify-between">
              <div className="text-center">
                <div className={`text-6xl font-bold mb-4 ${getScoreColor(analysis.overallScore)}`}>
                  {analysis.overallScore}%
                </div>
                <Badge className={`text-lg px-4 py-2 ${getScoreBgColor(analysis.overallScore)}`}>
                  {analysis.overallScore >= 80 ? 
                    (analysis.language === 'hi' ? 'उत्कृष्ट प्रदर्शन' : 'Excellent Performance') :
                   analysis.overallScore >= 60 ? 
                    (analysis.language === 'hi' ? 'अच्छा प्रदर्शन' : 'Good Performance') : 
                    (analysis.language === 'hi' ? 'सुधार की आवश्यकता' : 'Needs Improvement')}
                </Badge>
                <p className="mt-2 text-gray-600">
                  {analysis.overallScore >= 80 ?
                    (analysis.language === 'hi' ? 
                      'बेहतरीन साक्षात्कार प्रदर्शन! मजबूत तकनीकी और संवाद कौशल।' :
                      'Outstanding interview performance with strong technical and communication skills!') :
                    analysis.overallScore >= 60 ?
                    (analysis.language === 'hi' ?
                      'अच्छा प्रदर्शन, कुछ क्षेत्रों में सुधार की गुंजाइश है।' :
                      'Good performance with room for focused improvements.') :
                    (analysis.language === 'hi' ?
                      'विकसित हो रहा प्रदर्शन - मुख्य सुधार क्षेत्रों पर ध्यान दें।' :
                      'Developing performance - focus on key improvement areas.')}
                </p>
              </div>
              
              {/* Action Buttons */}
              <div className="space-y-3">
                <Button onClick={shareResults} className="w-full bg-blue-600 hover:bg-blue-700">
                  <Share2 className="h-4 w-4 mr-2" />
                  {analysis.translations?.emailReport || 'Share Results'}
                </Button>
                <Button onClick={downloadReport} variant="outline" className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  {analysis.translations?.downloadReport || 'Download Report'}
                </Button>
                <div className="flex space-x-2">
                  <Input
                    placeholder="Enter email address"
                    value={emailAddress}
                    onChange={(e) => setEmailAddress(e.target.value)}
                    className="flex-1"
                  />
                  <Button 
                    onClick={sendEmailReport} 
                    disabled={!emailAddress.trim() || isSharing}
                    size="sm"
                  >
                    {isSharing ? (
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    ) : (
                      <Mail className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-6 bg-white border">
            <TabsTrigger value="overview" className="flex items-center space-x-2">
              <BarChart3 className="h-4 w-4" />
              <span>{analysis.translations?.title || 'Overview'}</span>
            </TabsTrigger>
            <TabsTrigger value="breakdown" className="flex items-center space-x-2">
              <TrendingUp className="h-4 w-4" />
              <span>Breakdown</span>
            </TabsTrigger>
            <TabsTrigger value="realtime" className="flex items-center space-x-2">
              <Bot className="h-4 w-4" />
              <span>{analysis.translations?.realTimeFeedback || 'Real-time'}</span>
            </TabsTrigger>
            <TabsTrigger value="resume" className="flex items-center space-x-2">
              <FileText className="h-4 w-4" />
              <span>{analysis.translations?.resumeMatch || 'Resume'}</span>
            </TabsTrigger>
            <TabsTrigger value="questions" className="flex items-center space-x-2">
              <Eye className="h-4 w-4" />
              <span>{analysis.translations?.questionAnalysis || 'Questions'}</span>
            </TabsTrigger>
            <TabsTrigger value="feedback" className="flex items-center space-x-2">
              <Lightbulb className="h-4 w-4" />
              <span>{analysis.translations?.recommendations || 'Feedback'}</span>
            </TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview">
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <Card className="border-green-200">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-green-700">Technical Skills</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between mb-2">
                    <span className={`text-2xl font-bold ${getScoreColor(analysis.breakdown.technical)}`}>
                      {analysis.breakdown.technical}%
                    </span>
                    <CheckCircle className="h-5 w-5 text-green-600" />
                  </div>
                  <Progress value={analysis.breakdown.technical} className="h-2" />
                </CardContent>
              </Card>

              <Card className="border-blue-200">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-blue-700">Communication</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between mb-2">
                    <span className={`text-2xl font-bold ${getScoreColor(analysis.breakdown.communication)}`}>
                      {analysis.breakdown.communication}%
                    </span>
                    <MessageSquare className="h-5 w-5 text-blue-600" />
                  </div>
                  <Progress value={analysis.breakdown.communication} className="h-2" />
                </CardContent>
              </Card>

              <Card className="border-purple-200">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-purple-700">Completeness</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between mb-2">
                    <span className={`text-2xl font-bold ${getScoreColor(analysis.breakdown.completeness)}`}>
                      {analysis.breakdown.completeness}%
                    </span>
                    <Target className="h-5 w-5 text-purple-600" />
                  </div>
                  <Progress value={analysis.breakdown.completeness} className="h-2" />
                </CardContent>
              </Card>

              <Card className="border-orange-200">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-orange-700">Confidence</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between mb-2">
                    <span className={`text-2xl font-bold ${getScoreColor(analysis.breakdown.confidence)}`}>
                      {analysis.breakdown.confidence}%
                    </span>
                    <User className="h-5 w-5 text-orange-600" />
                  </div>
                  <Progress value={analysis.breakdown.confidence} className="h-2" />
                </CardContent>
              </Card>
            </div>

            {/* Key Insights */}
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2 text-green-700">
                    <CheckCircle className="h-5 w-5" />
                    <span>Key Strengths</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    {analysis.strengths.map((strength, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                        <span className="text-sm">{strength}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2 text-orange-700">
                    <AlertCircle className="h-5 w-5" />
                    <span>Areas for Improvement</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    {analysis.improvements.map((improvement, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0"></div>
                        <span className="text-sm">{improvement}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Breakdown Tab - Dynamic Analysis for Each Category */}
          <TabsContent value="breakdown">
            <div className="grid gap-6">
              {Object.entries(analysis.breakdown).map(([category, score]) => {
                // Generate dynamic category-specific insights
                const getCategoryInsights = (cat: string, sc: number) => {
                  const language = analysis.statistics?.confidenceLevel?.includes('उच्च') || analysis.statistics?.confidenceLevel?.includes('अच्छा') ? 'hi' : 'en'
                  
                  switch(cat) {
                    case 'technical':
                      if (language === 'hi') {
                        return sc >= 80 ? 'तकनीकी कौशल में उत्कृष्ट प्रदर्शन। आप जटिल तकनीकी अवधारणाओं को स्पष्ट रूप से व्यक्त कर सकते हैं।' :
                               sc >= 60 ? 'तकनीकी ज्ञान अच्छा है। अधिक विशिष्ट उदाहरण और गहरी समझ दिखाने पर काम करें।' :
                               'तकनीकी कौशल में सुधार की आवश्यकता। मूलभूत अवधारणाओं पर अधिक अभ्यास करें।'
                      }
                      return sc >= 80 ? 'Excellent technical skills demonstrated. You clearly articulate complex technical concepts with confidence.' :
                             sc >= 60 ? 'Good technical knowledge shown. Work on providing more specific examples and demonstrating deeper understanding.' :
                             'Technical skills need development. Focus on practicing fundamental concepts and their practical applications.'
                    
                    case 'communication':
                      if (language === 'hi') {
                        return sc >= 80 ? 'संचार कौशल बहुत प्रभावी। आप विचारों को स्पष्ट और संरचित तरीके से व्यक्त करते हैं।' :
                               sc >= 60 ? 'संचार अच्छा है। उत्तरों की संरचना और स्पष्टता में सुधार की जा सकती है।' :
                               'संचार कौशल पर काम करने की आवश्यकता। अधिक स्पष्ट और संगठित उत्तर देने का अभ्यास करें।'
                      }
                      return sc >= 80 ? 'Excellent communication skills. You express ideas clearly and in a well-structured manner.' :
                             sc >= 60 ? 'Good communication demonstrated. Can improve on answer structure and clarity of expression.' :
                             'Communication skills need work. Practice giving clearer, more organized responses.'
                    
                    case 'completeness':
                      if (language === 'hi') {
                        return sc >= 80 ? 'उत्तर संपूर्ण और व्यापक हैं। आप सभी महत्वपूर्ण बिंदुओं को कवर करते हैं।' :
                               sc >= 60 ? 'उत्तर अधिकतर पूरे हैं। कुछ अतिरिक्त विवरण और उदाहरण जोड़ने से फायदा होगा।' :
                               'उत्तरों में अधिक विस्तार की आवश्यकता। सभी प्रश्न भागों को पूरी तरह संबोधित करने पर काम करें।'
                      }
                      return sc >= 80 ? 'Answers are complete and comprehensive. You address all key aspects of each question thoroughly.' :
                             sc >= 60 ? 'Answers are mostly complete. Would benefit from adding more detail and specific examples.' :
                             'Answers need more depth. Work on fully addressing all parts of each question.'
                    
                    case 'confidence':
                      if (language === 'hi') {
                        return sc >= 80 ? 'आत्मविश्वास से भरपूर प्रदर्शन। आप अपने उत्तरों में निश्चित और स्पष्ट हैं।' :
                               sc >= 60 ? 'अच्छा आत्मविश्वास दिखाया। कुछ उत्तरों में अधिक दृढ़ता की आवश्यकता हो सकती है।' :
                               'आत्मविश्वास बढ़ाने की आवश्यकता। अधिक अभ्यास और तैयारी से आत्मविश्वास में सुधार होगा।'
                      }
                      return sc >= 80 ? 'Confident performance throughout. You deliver answers with certainty and conviction.' :
                             sc >= 60 ? 'Good confidence shown. Some answers could benefit from more assertive delivery.' :
                             'Confidence needs building. More practice and preparation will improve your confidence level.'
                    
                    default:
                      return sc >= 80 ? 'Excellent performance in this area.' : 
                             sc >= 60 ? 'Good performance with room for improvement.' : 
                             'This area needs focused development.'
                  }
                }

                return (
                  <Card key={category}>
                    <CardHeader>
                      <CardTitle className="capitalize flex items-center justify-between">
                        <span>{category} Analysis</span>
                        <Badge className={`${getScoreBgColor(score)} font-bold`}>
                          {score}%
                        </Badge>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <Progress value={score} className="h-3 mb-4" />
                      <p className="text-sm text-gray-700 leading-relaxed">
                        {getCategoryInsights(category, score)}
                      </p>
                      {/* Dynamic action items based on score */}
                      <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                        <h4 className="font-semibold text-blue-800 text-sm mb-2">
                          {score >= 80 ? '🌟 Keep Excelling:' : score >= 60 ? '📈 Next Steps:' : '🎯 Focus Areas:'}
                        </h4>
                        <p className="text-blue-700 text-sm">
                          {(() => {
                            const language = analysis.statistics?.confidenceLevel?.includes('उच्च') ? 'hi' : 'en'
                            if (category === 'technical') {
                              return score >= 80 ? 
                                (language === 'hi' ? 'नवीनतम तकनीकों के साथ अद्यतन रहें और जटिल परिदृश्यों का अभ्यास करें।' : 'Stay updated with latest technologies and practice complex scenarios.') :
                                (language === 'hi' ? 'मूलभूत अवधारणाओं को मजबूत करें और प्रैक्टिकल प्रोजेक्ट्स पर काम करें।' : 'Strengthen fundamental concepts and work on practical projects.')
                            } else if (category === 'communication') {
                              return score >= 80 ? 
                                (language === 'hi' ? 'अपने संचार शैली को और परिष्कृत करें और नेतृत्व कौशल पर काम करें।' : 'Refine your communication style further and work on leadership skills.') :
                                (language === 'hi' ? 'STAR विधि का अभ्यास करें और स्पष्ट कहानी कहने का अभ्यास करें।' : 'Practice STAR method and work on clear storytelling.')
                            } else if (category === 'completeness') {
                              return score >= 80 ? 
                                (language === 'hi' ? 'विस्तृत उदाहरणों के साथ अपने मजबूत बिंदुओं को बनाए रखें।' : 'Maintain your thoroughness with detailed examples.') :
                                (language === 'hi' ? 'प्रत्येक प्रश्न के सभी भागों को संबोधित करने का अभ्यास करें।' : 'Practice addressing all parts of each question comprehensively.')
                            } else {
                              return score >= 80 ? 
                                (language === 'hi' ? 'अपने आत्मविश्वास को बनाए रखें और दूसरों को प्रेरित करें।' : 'Maintain your confidence and inspire others.') :
                                (language === 'hi' ? 'अधिक मॉक इंटरव्यू का अभ्यास करें और सकारात्मक आत्म-चर्चा करें।' : 'Practice more mock interviews and positive self-talk.')
                            }
                          })()}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          </TabsContent>

          {/* Question Analysis Tab */}
          <TabsContent value="questions">
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h3 className="text-xl font-semibold">Question-by-Question Analysis</h3>
                <Button
                  onClick={() => setShowAllAnswers(!showAllAnswers)}
                  variant="outline"
                  size="sm"
                >
                  <Eye className="h-4 w-4 mr-2" />
                  {showAllAnswers ? 'Hide' : 'Show'} All Answers
                </Button>
              </div>

              {analysis.questionAnalysis.map((question, index) => (
                <Card key={question.questionId} className="border-l-4 border-l-blue-500">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">Question {index + 1}</CardTitle>
                      <Badge className={getScoreBgColor(question.score)}>
                        {question.score}%
                      </Badge>
                    </div>
                    <p className="text-gray-700 font-medium">{question.questionText}</p>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Your Answer */}
                    {showAllAnswers && (
                      <div>
                        <h4 className="font-semibold text-sm text-gray-700 mb-2">Your Answer:</h4>
                        <div className="bg-gray-50 p-3 rounded-lg border">
                          <p className="text-sm">{question.answerText}</p>
                        </div>
                      </div>
                    )}

                    {/* Sub-scores */}
                    <div className="grid grid-cols-3 gap-4">
                      <div className="text-center">
                        <div className={`font-bold ${getScoreColor(question.technicalAccuracy)}`}>
                          {question.technicalAccuracy}%
                        </div>
                        <div className="text-xs text-gray-600">Technical</div>
                      </div>
                      <div className="text-center">
                        <div className={`font-bold ${getScoreColor(question.communicationClarity)}`}>
                          {question.communicationClarity}%
                        </div>
                        <div className="text-xs text-gray-600">Clarity</div>
                      </div>
                      <div className="text-center">
                        <div className={`font-bold ${getScoreColor(question.completeness)}`}>
                          {question.completeness}%
                        </div>
                        <div className="text-xs text-gray-600">Complete</div>
                      </div>
                    </div>

                    {/* Feedback */}
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h5 className="font-semibold text-green-700 text-sm mb-2">✅ Strengths:</h5>
                        <ul className="text-sm space-y-1">
                          {question.strengths.map((strength, i) => (
                            <li key={i} className="text-green-600">• {strength}</li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h5 className="font-semibold text-orange-700 text-sm mb-2">⚠️ Areas to Improve:</h5>
                        <ul className="text-sm space-y-1">
                          {question.weaknesses.map((weakness, i) => (
                            <li key={i} className="text-orange-600">• {weakness}</li>
                          ))}
                        </ul>
                      </div>
                    </div>

                    {/* Suggestions */}
                    <div>
                      <h5 className="font-semibold text-blue-700 text-sm mb-2">💡 Suggestions:</h5>
                      <ul className="text-sm space-y-1">
                        {question.suggestions.map((suggestion, i) => (
                          <li key={i} className="text-blue-600">• {suggestion}</li>
                        ))}
                      </ul>
                    </div>

                    {/* Expected Answer */}
                    <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                      <h5 className="font-semibold text-blue-700 text-sm mb-2">🎯 What we look for:</h5>
                      <p className="text-sm text-blue-700">{question.expectedAnswer}</p>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Real-time Feedback Tab */}
          <TabsContent value="realtime">
            <div className="space-y-6">
              <h3 className="text-xl font-semibold flex items-center gap-2">
                <Bot className="h-6 w-6 text-blue-600" />
                {analysis.translations?.realTimeFeedback || 'Real-time Interview Feedback'}
              </h3>
              
              <div className="grid md:grid-cols-2 gap-6">
                <Card className="border-green-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-green-700">
                      {analysis.translations?.speakingPace || 'Speaking Pace'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge variant="outline" className="text-lg px-4 py-2">
                        {analysis.realTimeFeedback?.speakingPace}
                      </Badge>
                      <MessageSquare className="h-8 w-8 text-green-600" />
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      {analysis.language === 'hi' 
                        ? 'आपकी बोलने की गति साक्षात्कार के दौरान समायोजित थी।'
                        : 'Your speaking pace was well-adjusted throughout the interview.'
                      }
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-blue-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-blue-700">
                      {analysis.translations?.confidenceLevel || 'Confidence Level'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge variant="outline" className="text-lg px-4 py-2">
                        {analysis.realTimeFeedback?.confidenceLevel}
                      </Badge>
                      <Award className="h-8 w-8 text-blue-600" />
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      {analysis.language === 'hi'
                        ? 'आपका आत्मविश्वास स्तर उत्तरों के दौरान स्थिर रहा।'
                        : 'Your confidence level remained consistent during responses.'
                      }
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-purple-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-purple-700">
                      Communication Style
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge variant="outline" className="text-lg px-4 py-2">
                        {analysis.realTimeFeedback?.communicationStyle}
                      </Badge>
                      <MessageSquare className="h-8 w-8 text-purple-600" />
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      {analysis.language === 'hi'
                        ? 'आपका संवाद शैली प्रभावी और स्पष्ट था।'
                        : 'Your communication style was effective and clear.'
                      }
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-orange-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-orange-700">
                      {analysis.translations?.technicalDepth || 'Technical Depth'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge variant="outline" className="text-lg px-4 py-2">
                        {analysis.realTimeFeedback?.technicalDepth}
                      </Badge>
                      <Brain className="h-8 w-8 text-orange-600" />
                    </div>
                    <p className="text-sm text-gray-600 mt-2">
                      {analysis.language === 'hi'
                        ? 'आपका तकनीकी ज्ञान की गहराई प्रभावशाली थी।'
                        : 'Your technical knowledge depth was impressive.'
                      }
                    </p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Resume Match Tab */}
          <TabsContent value="resume">
            <div className="space-y-6">
              <h3 className="text-xl font-semibold flex items-center gap-2">
                <FileText className="h-6 w-6 text-indigo-600" />
                {analysis.translations?.resumeMatch || 'Resume-Based Performance Analysis'}
              </h3>
              
              <div className="grid md:grid-cols-2 gap-6">
                <Card className="border-indigo-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-indigo-700">
                      {analysis.translations?.experienceAlignment || 'Experience Alignment'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between mb-3">
                      <span className={`text-2xl font-bold ${getScoreColor(analysis.resumeMatch?.experienceAlignment || 0)}`}>
                        {analysis.resumeMatch?.experienceAlignment || 0}%
                      </span>
                      <User className="h-8 w-8 text-indigo-600" />
                    </div>
                    <Progress value={analysis.resumeMatch?.experienceAlignment || 0} className="h-2 mb-2" />
                    <p className="text-sm text-gray-600">
                      {analysis.language === 'hi'
                        ? 'आपके रिज्यूमे अनुभव और साक्षात्कार उत्तरों में तालमेल।'
                        : 'Alignment between your resume experience and interview responses.'
                      }
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-green-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-green-700">
                      {analysis.translations?.skillsValidation || 'Skills Validation'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between mb-3">
                      <span className={`text-2xl font-bold ${getScoreColor(analysis.resumeMatch?.skillsValidation || 0)}`}>
                        {analysis.resumeMatch?.skillsValidation || 0}%
                      </span>
                      <Award className="h-8 w-8 text-green-600" />
                    </div>
                    <Progress value={analysis.resumeMatch?.skillsValidation || 0} className="h-2 mb-2" />
                    <p className="text-sm text-gray-600">
                      {analysis.language === 'hi'
                        ? 'आपके द्वारा दावा किए गए कौशल का सत्यापन।'
                        : 'Validation of the skills you claimed to possess.'
                      }
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-blue-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-blue-700">
                      {analysis.translations?.projectRelevance || 'Project Relevance'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between mb-3">
                      <span className={`text-2xl font-bold ${getScoreColor(analysis.resumeMatch?.projectRelevance || 0)}`}>
                        {analysis.resumeMatch?.projectRelevance || 0}%
                      </span>
                      <Target className="h-8 w-8 text-blue-600" />
                    </div>
                    <Progress value={analysis.resumeMatch?.projectRelevance || 0} className="h-2 mb-2" />
                    <p className="text-sm text-gray-600">
                      {analysis.language === 'hi'
                        ? 'आपके प्रोजेक्ट्स की प्रासंगिकता और चर्चा की गुणवत्ता।'
                        : 'Relevance of your projects and quality of discussion.'
                      }
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-purple-200">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg text-purple-700">
                      {analysis.translations?.overallFit || 'Overall Role Fit'}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between mb-3">
                      <span className={`text-2xl font-bold ${getScoreColor(analysis.resumeMatch?.overallFit || 0)}`}>
                        {analysis.resumeMatch?.overallFit || 0}%
                      </span>
                      <CheckCircle className="h-8 w-8 text-purple-600" />
                    </div>
                    <Progress value={analysis.resumeMatch?.overallFit || 0} className="h-2 mb-2" />
                    <p className="text-sm text-gray-600">
                      {analysis.language === 'hi'
                        ? 'इस भूमिका के लिए आपकी समग्र उपयुक्तता।'
                        : 'Your overall suitability for this role.'
                      }
                    </p>
                  </CardContent>
                </Card>
              </div>

              {/* Improvement Suggestions based on Resume */}
              <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
                <CardHeader>
                  <CardTitle className="text-lg text-blue-800">
                    {analysis.language === 'hi' ? 'रिज्यूमे-आधारित सुझाव' : 'Resume-Based Suggestions'}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2 text-sm">
                    <li className="flex items-start gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                      <span>
                        {analysis.language === 'hi'
                          ? 'अपने प्रोजेक्ट्स के तकनीकी विवरण और challenges को और बेहतर तरीके से समझाएं।'
                          : 'Better explain the technical details and challenges of your projects.'
                        }
                      </span>
                    </li>
                    <li className="flex items-start gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                      <span>
                        {analysis.language === 'hi'
                          ? 'अपने कार्य अनुभव से concrete examples और achievements share करें।'
                          : 'Share concrete examples and achievements from your work experience.'
                        }
                      </span>
                    </li>
                    <li className="flex items-start gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                      <span>
                        {analysis.language === 'hi'
                          ? 'अपने skills को practical scenarios के साथ validate करें।'
                          : 'Validate your skills with practical scenarios and real-world applications.'
                        }
                      </span>
                    </li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Feedback Tab */}
          <TabsContent value="feedback">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2 text-blue-700">
                    <Target className="h-5 w-5" />
                    <span>Actionable Recommendations</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    {analysis.recommendations.map((recommendation, index) => (
                      <div key={index} className="flex items-start space-x-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                        <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold flex-shrink-0 mt-1">
                          {index + 1}
                        </div>
                        <p className="text-sm text-blue-800">{recommendation}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Next Steps for Improvement</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                      <h4 className="font-semibold text-green-800 mb-2">🚀 Immediate Actions (This Week)</h4>
                      <ul className="text-sm text-green-700 space-y-1">
                        <li>• Review and practice answers to common interview questions</li>
                        <li>• Research the company's technical stack and recent projects</li>
                        <li>• Prepare 3-4 detailed project stories using the STAR method</li>
                      </ul>
                    </div>
                    
                    <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                      <h4 className="font-semibold text-blue-800 mb-2">📚 Medium-term Goals (Next Month)</h4>
                      <ul className="text-sm text-blue-700 space-y-1">
                        <li>• Complete technical skill assessments in weak areas</li>
                        <li>• Practice mock interviews with peers or mentors</li>
                        <li>• Build portfolio projects that demonstrate key skills</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Statistics Tab */}
          <TabsContent value="statistics">
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm font-medium">Interview Overview</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Total Questions:</span>
                    <span className="font-semibold">{analysis.statistics.totalQuestions}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Duration:</span>
                    <span className="font-semibold">{analysis.statistics.totalInterviewTime}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Confidence Level:</span>
                    <Badge className={getScoreBgColor(analysis.overallScore)}>
                      {analysis.statistics.confidenceLevel}
                    </Badge>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-sm font-medium">Response Quality</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Avg Response Length:</span>
                    <span className="font-semibold">{analysis.statistics.averageResponseLength} words</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Keywords Used:</span>
                    <span className="font-semibold">{analysis.statistics.keywordsUsed}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Expected Keywords:</span>
                    <span className="font-semibold">{analysis.statistics.expectedKeywords}</span>
                  </div>
                  <div className="mt-2">
                    <div className="flex justify-between text-sm mb-1">
                      <span>Keyword Coverage</span>
                      <span>{Math.round((analysis.statistics.keywordsUsed / analysis.statistics.expectedKeywords) * 100)}%</span>
                    </div>
                    <Progress 
                      value={(analysis.statistics.keywordsUsed / analysis.statistics.expectedKeywords) * 100} 
                      className="h-2" 
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-sm font-medium">Performance Insights</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600 mb-1">
                      {analysis.statistics.totalQuestions > 0 ? Math.round(analysis.overallScore) : 0}
                    </div>
                    <div className="text-sm text-gray-600">Overall Percentile</div>
                  </div>
                  <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-3 rounded-lg">
                    <p className="text-sm text-center">
                      {analysis.overallScore >= 80 ? 
                        "You performed better than 80% of candidates!" :
                        analysis.overallScore >= 60 ?
                        "You're in the top 60% - good progress!" :
                        "Focus on improvements to reach top performers!"
                      }
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {/* Footer Actions */}
        <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
          <Link href="/">
            <Button className="bg-blue-600 hover:bg-blue-700">
              <Home className="h-4 w-4 mr-2" />
              Take Another Interview
            </Button>
          </Link>
          <Button onClick={shareResults} variant="outline">
            <Share2 className="h-4 w-4 mr-2" />
            Share Results
          </Button>
          <Button onClick={downloadReport} variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Download Full Report
          </Button>
        </div>
      </div>
    </div>
  )
}
