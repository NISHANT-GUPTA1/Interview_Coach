// Enhanced Indian Language Support with Free APIs
// Provides comprehensive support for Indian regional languages

interface IndianLanguageConfig {
  code: string;
  name: string;
  nativeName: string;
  speechCode: string;
  ttsCode: string;
  translationCode: string;
  rtl: boolean;
  scriptSupported: boolean;
}

class IndianLanguageService {
  private apiCallCount = 0;
  private lastApiCall = 0;
  private rateLimitDelay = 1500; // 1.5 seconds for Indian language APIs

  // Comprehensive Indian language configurations
  private indianLanguages: IndianLanguageConfig[] = [
    {
      code: 'hi',
      name: 'Hindi',
      nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
      speechCode: 'hi-IN',
      ttsCode: 'hi-IN',
      translationCode: 'hi',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'bn',
      name: 'Bengali',
      nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
      speechCode: 'bn-IN',
      ttsCode: 'bn-IN',
      translationCode: 'bn',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'te',
      name: 'Telugu',
      nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å',
      speechCode: 'te-IN',
      ttsCode: 'te-IN',
      translationCode: 'te',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'ta',
      name: 'Tamil',
      nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
      speechCode: 'ta-IN',
      ttsCode: 'ta-IN',
      translationCode: 'ta',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'mr',
      name: 'Marathi',
      nativeName: '‡§Æ‡§∞‡§æ‡§†‡•Ä',
      speechCode: 'mr-IN',
      ttsCode: 'mr-IN',
      translationCode: 'mr',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'gu',
      name: 'Gujarati',
      nativeName: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä',
      speechCode: 'gu-IN',
      ttsCode: 'gu-IN',
      translationCode: 'gu',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'kn',
      name: 'Kannada',
      nativeName: '‡≤ï‡≤®‡≥ç‡≤®‡≤°',
      speechCode: 'kn-IN',
      ttsCode: 'kn-IN',
      translationCode: 'kn',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'ml',
      name: 'Malayalam',
      nativeName: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç',
      speechCode: 'ml-IN',
      ttsCode: 'ml-IN',
      translationCode: 'ml',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'pa',
      name: 'Punjabi',
      nativeName: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä',
      speechCode: 'pa-IN',
      ttsCode: 'pa-IN',
      translationCode: 'pa',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'or',
      name: 'Odia',
      nativeName: '‡¨ì‡¨°‡¨º‡¨ø‡¨Ü',
      speechCode: 'or-IN',
      ttsCode: 'or-IN',
      translationCode: 'or',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'as',
      name: 'Assamese',
      nativeName: '‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ',
      speechCode: 'as-IN',
      ttsCode: 'as-IN',
      translationCode: 'as',
      rtl: false,
      scriptSupported: true
    },
    {
      code: 'ur',
      name: 'Urdu',
      nativeName: 'ÿßÿ±ÿØŸà',
      speechCode: 'ur-PK',
      ttsCode: 'ur-PK',
      translationCode: 'ur',
      rtl: true,
      scriptSupported: true
    }
  ];

  isIndianLanguage(langCode: string): boolean {
    return this.indianLanguages.some(lang => lang.code === langCode);
  }

  getIndianLanguageConfig(langCode: string): IndianLanguageConfig | null {
    return this.indianLanguages.find(lang => lang.code === langCode) || null;
  }

  private async rateLimitedFetch(url: string, options: RequestInit): Promise<Response> {
    const now = Date.now();
    const timeSinceLastCall = now - this.lastApiCall;
    
    if (timeSinceLastCall < this.rateLimitDelay) {
      await new Promise(resolve => setTimeout(resolve, this.rateLimitDelay - timeSinceLastCall));
    }
    
    this.lastApiCall = Date.now();
    this.apiCallCount++;
    
    return fetch(url, options);
  }

  // Enhanced translation specifically for Indian languages
  async translateToIndianLanguage(text: string, targetLang: string): Promise<string> {
    if (!this.isIndianLanguage(targetLang)) {
      throw new Error(`${targetLang} is not supported as an Indian language`);
    }

    const config = this.getIndianLanguageConfig(targetLang);
    if (!config) {
      throw new Error(`Configuration not found for ${targetLang}`);
    }

    console.log(`üáÆüá≥ Translating to Indian language: ${config.name} (${config.nativeName})`);

    // Try multiple Indian language translation APIs
    let translation = await this.tryIndianLanguageAPI(text, targetLang, config);
    
    if (!translation) {
      translation = await this.tryMyMemoryIndian(text, targetLang, config);
    }
    
    if (!translation) {
      translation = await this.tryLibreTranslateIndian(text, targetLang, config);
    }

    if (!translation) {
      translation = await this.tryGoogleTranslateIndian(text, targetLang, config);
    }

    return translation || text;
  }

  // Specialized API for Indian languages - using Bhashini (Government of India's free API)
  private async tryIndianLanguageAPI(text: string, targetLang: string, config: IndianLanguageConfig): Promise<string | null> {
    try {
      console.log(`üîÑ Trying Bhashini API for ${config.name}...`);
      
      // Bhashini API is free but requires registration
      // For demo purposes, we'll use a public endpoint structure
      const response = await this.rateLimitedFetch('https://dhruva-api.bhashini.gov.in/services/inference/pipeline', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          pipelineTasks: [
            {
              taskType: 'translation',
              config: {
                language: {
                  sourceLanguage: 'en',
                  targetLanguage: config.translationCode
                }
              }
            }
          ],
          inputData: {
            input: [
              {
                source: text
              }
            ]
          }
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (data.pipelineResponse && data.pipelineResponse[0] && data.pipelineResponse[0].output) {
          const translated = data.pipelineResponse[0].output[0].target;
          console.log(`‚úÖ Bhashini translation successful: ${translated}`);
          return translated;
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Bhashini API failed for ${config.name}:`, error);
    }
    return null;
  }

  // MyMemory with Indian language optimization
  private async tryMyMemoryIndian(text: string, targetLang: string, config: IndianLanguageConfig): Promise<string | null> {
    try {
      console.log(`üîÑ Trying MyMemory API for ${config.name}...`);
      
      const response = await this.rateLimitedFetch(
        `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|${config.translationCode}&de=example@email.com`,
        { 
          method: 'GET',
          headers: {
            'User-Agent': 'AI Interview Coach (Indian Languages Support)'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.responseStatus === 200 && data.responseData?.translatedText) {
          const translated = data.responseData.translatedText;
          console.log(`‚úÖ MyMemory Indian translation: ${translated}`);
          return translated;
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è MyMemory failed for ${config.name}:`, error);
    }
    return null;
  }

  // LibreTranslate with Indian language support
  private async tryLibreTranslateIndian(text: string, targetLang: string, config: IndianLanguageConfig): Promise<string | null> {
    try {
      console.log(`üîÑ Trying LibreTranslate for ${config.name}...`);
      
      // LibreTranslate has limited Indian language support, but worth trying
      const response = await this.rateLimitedFetch('https://libretranslate.de/translate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          q: text,
          source: 'en',
          target: config.translationCode,
          format: 'text'
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (data.translatedText) {
          console.log(`‚úÖ LibreTranslate Indian translation: ${data.translatedText}`);
          return data.translatedText;
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è LibreTranslate failed for ${config.name}:`, error);
    }
    return null;
  }

  // Google Translate with Indian language codes
  private async tryGoogleTranslateIndian(text: string, targetLang: string, config: IndianLanguageConfig): Promise<string | null> {
    try {
      console.log(`üîÑ Trying Google Translate for ${config.name}...`);
      
      const response = await this.rateLimitedFetch(
        `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${config.translationCode}&dt=t&q=${encodeURIComponent(text)}`,
        { method: 'GET' }
      );

      if (response.ok) {
        const data = await response.json();
        if (data && data[0] && data[0][0] && data[0][0][0]) {
          const translated = data[0][0][0];
          console.log(`‚úÖ Google Translate Indian: ${translated}`);
          return translated;
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Google Translate failed for ${config.name}:`, error);
    }
    return null;
  }

  // Enhanced speech recognition for Indian languages
  setupIndianSpeechRecognition(langCode: string): boolean {
    if (typeof window === 'undefined') return false;
    
    const config = this.getIndianLanguageConfig(langCode);
    if (!config) return false;

    try {
      // Chrome's Web Speech API supports many Indian languages
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      
      if (!SpeechRecognition) {
        console.warn('Speech recognition not supported');
        return false;
      }

      const recognition = new SpeechRecognition();
      recognition.lang = config.speechCode;
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.maxAlternatives = 3;
      
      // Enhanced settings for Indian languages - don't set grammars property
      // Let the browser use default grammar handling
      
      console.log(`üé§ Indian speech recognition configured for ${config.name} (${config.speechCode})`);
      return true;
    } catch (error) {
      console.error(`Failed to setup Indian speech recognition for ${config.name}:`, error);
      return false;
    }
  }

  // Enhanced TTS for Indian languages
  async speakInIndianLanguage(text: string, langCode: string): Promise<boolean> {
    if (typeof window === 'undefined') return false;
    
    const config = this.getIndianLanguageConfig(langCode);
    if (!config) return false;

    try {
      const synthesis = window.speechSynthesis;
      if (!synthesis) return false;

      // Wait for voices to load
      const voices = synthesis.getVoices();
      
      // Find Indian language voice
      let selectedVoice = voices.find(voice => 
        voice.lang.startsWith(config.ttsCode) || 
        voice.lang.startsWith(langCode) ||
        voice.name.toLowerCase().includes(config.name.toLowerCase())
      );

      // Fallback to English voice if Indian voice not found
      if (!selectedVoice) {
        selectedVoice = voices.find(voice => voice.lang.startsWith('en'));
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = config.ttsCode;
      utterance.rate = 0.8; // Slower for clarity
      utterance.pitch = 1.0;
      utterance.volume = 1.0;
      
      if (selectedVoice) {
        utterance.voice = selectedVoice;
      }

      synthesis.speak(utterance);
      
      console.log(`üó£Ô∏è Speaking in ${config.name}: "${text}"`);
      return true;
    } catch (error) {
      console.error(`Failed to speak in ${config.name}:`, error);
      return false;
    }
  }

  // Generate sample Indian language interview questions
  getIndianLanguageQuestions(langCode: string, role: string): any[] {
    const config = this.getIndianLanguageConfig(langCode);
    if (!config) return [];

    // Pre-translated common interview questions for Indian languages
    const questionSets: { [key: string]: any[] } = {
      'hi': [
        { id: 1, text: `‡§Ö‡§™‡§®‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ${role} ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç‡•§`, category: "‡§™‡§∞‡§ø‡§ö‡§Ø" },
        { id: 2, text: "‡§Ü‡§™‡§®‡•á ‡§π‡§æ‡§≤ ‡§π‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡•ã ‡§∏‡§¨‡§∏‡•á ‡§ö‡•Å‡§®‡•å‡§§‡•Ä‡§™‡•Ç‡§∞‡•ç‡§£ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡§≤ ‡§ï‡•Ä ‡§π‡•à, ‡§â‡§∏‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç‡•§", category: "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä" },
        { id: 3, text: "‡§Ü‡§™ ‡§ú‡§ü‡§ø‡§≤ ‡§Æ‡•Å‡§¶‡•ç‡§¶‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§°‡§ø‡§¨‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?", category: "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä" },
        { id: 4, text: "‡§Ö‡§ó‡§≤‡•á 5 ‡§µ‡§∞‡•ç‡§∑‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•á ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?", category: "‡§ï‡§∞‡§ø‡§Ø‡§∞" }
      ],
      'ta': [
        { id: 1, text: `‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ${role} ‡ÆÜ‡Æï ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Æµ‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.`, category: "‡ÆÖ‡Æ±‡Æø‡ÆÆ‡ØÅ‡Æï‡ÆÆ‡Øç" },
        { id: 2, text: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ÆÆ‡ØÄ‡Æ™‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§ ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æö‡Æµ‡Ææ‡Æ≤‡Ææ‡Æ© ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™ ‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æµ‡Æø‡Æµ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.", category: "‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™‡ÆÆ‡Øç" },
        { id: 3, text: "‡Æö‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Ææ‡Æ© ‡Æ™‡Æø‡Æ∞‡Æö‡Øç‡Æö‡Æ©‡Øà‡Æï‡Æ≥‡Øà ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æü‡Æø‡Æ™‡Æï‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?", category: "‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡Æ®‡ØÅ‡Æü‡Øç‡Æ™‡ÆÆ‡Øç" },
        { id: 4, text: "‡ÆÖ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§ 5 ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ©?", category: "‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç" }
      ],
      'te': [
        { id: 1, text: `‡∞Æ‡±Ä ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ${role} ‡∞ó‡∞æ ‡∞Æ‡±Ä ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø.`, category: "‡∞™‡∞∞‡∞ø‡∞ö‡∞Ø‡∞Ç" },
        { id: 2, text: "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞á‡∞ü‡±Ä‡∞µ‡∞≤ ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞Ö‡∞§‡±ç‡∞Ø‡∞Ç‡∞§ ‡∞∏‡∞µ‡∞æ‡∞≤‡±Å‡∞ó‡∞æ ‡∞â‡∞®‡±ç‡∞® ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.", category: "‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï‡∞Ç" },
        { id: 3, text: "‡∞∏‡∞Ç‡∞ï‡±ç‡∞≤‡∞ø‡∞∑‡±ç‡∞ü ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞≤‡∞®‡±Å ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞≤‡∞æ ‡∞°‡±Ä‡∞¨‡∞ó‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å?", category: "‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï‡∞Ç" },
        { id: 4, text: "‡∞∞‡∞æ‡∞¨‡±ã‡∞Ø‡±á 5 ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡∞ï‡±Å ‡∞Æ‡±Ä ‡∞ï‡±Ü‡∞∞‡±Ä‡∞∞‡±ç ‡∞≤‡∞ï‡±ç‡∞∑‡±ç‡∞Ø‡∞æ‡∞≤‡±Å ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?", category: "‡∞ï‡±Ü‡∞∞‡±Ä‡∞∞‡±ç" }
      ],
      'bn': [
        { id: 1, text: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶è‡¶¨‡¶Ç ${role} ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®‡•§`, category: "‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º" },
        { id: 2, text: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Ø‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú‡¶ø‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶§‡¶æ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", category: "‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§" },
        { id: 3, text: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá‡¶®?", category: "‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§" },
        { id: 4, text: "‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡ß´ ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶ï‡ßÄ?", category: "‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞" }
      ]
    };

    return questionSets[langCode] || [];
  }

  getStats() {
    return {
      apiCalls: this.apiCallCount,
      supportedIndianLanguages: this.indianLanguages.length,
      lastApiCall: this.lastApiCall
    };
  }
}

// Export singleton instance
export const indianLanguageService = new IndianLanguageService();
