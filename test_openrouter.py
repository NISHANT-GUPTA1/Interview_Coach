#!/usr/bin/env python3
"""
Test OpenRouter AI Question Generation
"""

import json
import subprocess
import sys

def test_openrouter_api():
    """Test the OpenRouter API script directly"""
    print("=== Testing OpenRouter AI Question Generation ===\n")
    
    test_cases = [
        {
            "name": "Frontend Developer",
            "data": {"role": "Frontend Developer", "experience": "2-3 years", "count": 3}
        },
        {
            "name": "Backend Developer", 
            "data": {"role": "Backend Developer", "experience": "Senior", "count": 2}
        },
        {
            "name": "Full Stack Developer",
            "data": {"role": "Full Stack Developer", "experience": "5+ years", "count": 4}
        }
    ]
    
    for i, test_case in enumerate(test_cases):
        print(f"Test Case {i+1}: {test_case['name']}")
        print(f"Input: {test_case['data']}")
        print("-" * 50)
        
        try:
            # Run the Python API script
            result = subprocess.run(
                ['python', 'lib/ai_openrouter_api.py'], 
                input=json.dumps(test_case['data']), 
                text=True, 
                capture_output=True,
                timeout=60  # 60 second timeout for API calls
            )
            
            print(f"Return Code: {result.returncode}")
            
            if result.returncode == 0 and result.stdout:
                try:
                    output = json.loads(result.stdout)
                    
                    if 'error' in output:
                        print(f"❌ Error: {output['error']}")
                    else:
                        questions = output.get('questions', [])
                        metadata = output.get('metadata', {})
                        
                        print(f"✅ Success! Generated {len(questions)} questions")
                        print(f"Model used: {metadata.get('model', 'Unknown')}")
                        print(f"Generated by: {metadata.get('generated_by', 'Unknown')}")
                        
                        print("\nQuestions:")
                        for j, q in enumerate(questions):
                            print(f"{j+1}. [{q['type'].upper()}] {q['question'][:80]}...")
                            if q['type'] == 'mcq' and 'options' in q:
                                print(f"   Options: {len(q['options'])} choices")
                            print(f"   Source: {q['source']}")
                            print()
                        
                except json.JSONDecodeError as e:
                    print(f"❌ JSON Parse Error: {e}")
                    print(f"Raw output: {result.stdout[:200]}...")
            else:
                print(f"❌ Process failed")
                if result.stderr:
                    print(f"Error details: {result.stderr[-300:]}")
                    
        except subprocess.TimeoutExpired:
            print("❌ Test timed out (60 seconds)")
        except Exception as e:
            print(f"❌ Test failed: {e}")
        
        print("\n" + "="*60 + "\n")

if __name__ == "__main__":
    test_openrouter_api()
